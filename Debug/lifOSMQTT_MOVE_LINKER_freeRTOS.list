
lifOSMQTT_MOVE_LINKER_freeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  0800c000  0800c000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000851c  0800c110  0800c110  0000c110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0801462c  0801462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014a70  08014a70  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  08014a70  08014a70  00014a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014a78  08014a78  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014a78  08014a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014a7c  08014a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08014a80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000026b4  200000f0  08014b6c  000200f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200027a4  08014b6c  000227a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017785  00000000  00000000  00020115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039be  00000000  00000000  0003789a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003b258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a8  00000000  00000000  0003c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af56  00000000  00000000  0003d908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000185cf  00000000  00000000  0005885e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090cf3  00000000  00000000  00070e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00101b20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005838  00000000  00000000  00101b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800c110 <__do_global_dtors_aux>:
 800c110:	b510      	push	{r4, lr}
 800c112:	4c05      	ldr	r4, [pc, #20]	; (800c128 <__do_global_dtors_aux+0x18>)
 800c114:	7823      	ldrb	r3, [r4, #0]
 800c116:	b933      	cbnz	r3, 800c126 <__do_global_dtors_aux+0x16>
 800c118:	4b04      	ldr	r3, [pc, #16]	; (800c12c <__do_global_dtors_aux+0x1c>)
 800c11a:	b113      	cbz	r3, 800c122 <__do_global_dtors_aux+0x12>
 800c11c:	4804      	ldr	r0, [pc, #16]	; (800c130 <__do_global_dtors_aux+0x20>)
 800c11e:	f3af 8000 	nop.w
 800c122:	2301      	movs	r3, #1
 800c124:	7023      	strb	r3, [r4, #0]
 800c126:	bd10      	pop	{r4, pc}
 800c128:	200000f0 	.word	0x200000f0
 800c12c:	00000000 	.word	0x00000000
 800c130:	08014614 	.word	0x08014614

0800c134 <frame_dummy>:
 800c134:	b508      	push	{r3, lr}
 800c136:	4b03      	ldr	r3, [pc, #12]	; (800c144 <frame_dummy+0x10>)
 800c138:	b11b      	cbz	r3, 800c142 <frame_dummy+0xe>
 800c13a:	4903      	ldr	r1, [pc, #12]	; (800c148 <frame_dummy+0x14>)
 800c13c:	4803      	ldr	r0, [pc, #12]	; (800c14c <frame_dummy+0x18>)
 800c13e:	f3af 8000 	nop.w
 800c142:	bd08      	pop	{r3, pc}
 800c144:	00000000 	.word	0x00000000
 800c148:	200000f4 	.word	0x200000f4
 800c14c:	08014614 	.word	0x08014614

0800c150 <strlen>:
 800c150:	4603      	mov	r3, r0
 800c152:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c156:	2a00      	cmp	r2, #0
 800c158:	d1fb      	bne.n	800c152 <strlen+0x2>
 800c15a:	1a18      	subs	r0, r3, r0
 800c15c:	3801      	subs	r0, #1
 800c15e:	4770      	bx	lr

0800c160 <__aeabi_uldivmod>:
 800c160:	b953      	cbnz	r3, 800c178 <__aeabi_uldivmod+0x18>
 800c162:	b94a      	cbnz	r2, 800c178 <__aeabi_uldivmod+0x18>
 800c164:	2900      	cmp	r1, #0
 800c166:	bf08      	it	eq
 800c168:	2800      	cmpeq	r0, #0
 800c16a:	bf1c      	itt	ne
 800c16c:	f04f 31ff 	movne.w	r1, #4294967295
 800c170:	f04f 30ff 	movne.w	r0, #4294967295
 800c174:	f000 b976 	b.w	800c464 <__aeabi_idiv0>
 800c178:	f1ad 0c08 	sub.w	ip, sp, #8
 800c17c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800c180:	f000 f806 	bl	800c190 <__udivmoddi4>
 800c184:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c188:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c18c:	b004      	add	sp, #16
 800c18e:	4770      	bx	lr

0800c190 <__udivmoddi4>:
 800c190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c194:	9e08      	ldr	r6, [sp, #32]
 800c196:	460d      	mov	r5, r1
 800c198:	4604      	mov	r4, r0
 800c19a:	4688      	mov	r8, r1
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d14d      	bne.n	800c23c <__udivmoddi4+0xac>
 800c1a0:	428a      	cmp	r2, r1
 800c1a2:	4694      	mov	ip, r2
 800c1a4:	d968      	bls.n	800c278 <__udivmoddi4+0xe8>
 800c1a6:	fab2 f282 	clz	r2, r2
 800c1aa:	b152      	cbz	r2, 800c1c2 <__udivmoddi4+0x32>
 800c1ac:	fa01 f302 	lsl.w	r3, r1, r2
 800c1b0:	f1c2 0120 	rsb	r1, r2, #32
 800c1b4:	fa20 f101 	lsr.w	r1, r0, r1
 800c1b8:	fa0c fc02 	lsl.w	ip, ip, r2
 800c1bc:	ea41 0803 	orr.w	r8, r1, r3
 800c1c0:	4094      	lsls	r4, r2
 800c1c2:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800c1c6:	fbb8 f7f1 	udiv	r7, r8, r1
 800c1ca:	fa1f fe8c 	uxth.w	lr, ip
 800c1ce:	fb01 8817 	mls	r8, r1, r7, r8
 800c1d2:	fb07 f00e 	mul.w	r0, r7, lr
 800c1d6:	0c23      	lsrs	r3, r4, #16
 800c1d8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800c1dc:	4298      	cmp	r0, r3
 800c1de:	d90a      	bls.n	800c1f6 <__udivmoddi4+0x66>
 800c1e0:	eb1c 0303 	adds.w	r3, ip, r3
 800c1e4:	f107 35ff 	add.w	r5, r7, #4294967295
 800c1e8:	f080 811e 	bcs.w	800c428 <__udivmoddi4+0x298>
 800c1ec:	4298      	cmp	r0, r3
 800c1ee:	f240 811b 	bls.w	800c428 <__udivmoddi4+0x298>
 800c1f2:	3f02      	subs	r7, #2
 800c1f4:	4463      	add	r3, ip
 800c1f6:	1a1b      	subs	r3, r3, r0
 800c1f8:	fbb3 f0f1 	udiv	r0, r3, r1
 800c1fc:	fb01 3310 	mls	r3, r1, r0, r3
 800c200:	fb00 fe0e 	mul.w	lr, r0, lr
 800c204:	b2a4      	uxth	r4, r4
 800c206:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800c20a:	45a6      	cmp	lr, r4
 800c20c:	d90a      	bls.n	800c224 <__udivmoddi4+0x94>
 800c20e:	eb1c 0404 	adds.w	r4, ip, r4
 800c212:	f100 33ff 	add.w	r3, r0, #4294967295
 800c216:	f080 8109 	bcs.w	800c42c <__udivmoddi4+0x29c>
 800c21a:	45a6      	cmp	lr, r4
 800c21c:	f240 8106 	bls.w	800c42c <__udivmoddi4+0x29c>
 800c220:	4464      	add	r4, ip
 800c222:	3802      	subs	r0, #2
 800c224:	2100      	movs	r1, #0
 800c226:	eba4 040e 	sub.w	r4, r4, lr
 800c22a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800c22e:	b11e      	cbz	r6, 800c238 <__udivmoddi4+0xa8>
 800c230:	2300      	movs	r3, #0
 800c232:	40d4      	lsrs	r4, r2
 800c234:	e9c6 4300 	strd	r4, r3, [r6]
 800c238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c23c:	428b      	cmp	r3, r1
 800c23e:	d908      	bls.n	800c252 <__udivmoddi4+0xc2>
 800c240:	2e00      	cmp	r6, #0
 800c242:	f000 80ee 	beq.w	800c422 <__udivmoddi4+0x292>
 800c246:	2100      	movs	r1, #0
 800c248:	e9c6 0500 	strd	r0, r5, [r6]
 800c24c:	4608      	mov	r0, r1
 800c24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c252:	fab3 f183 	clz	r1, r3
 800c256:	2900      	cmp	r1, #0
 800c258:	d14a      	bne.n	800c2f0 <__udivmoddi4+0x160>
 800c25a:	42ab      	cmp	r3, r5
 800c25c:	d302      	bcc.n	800c264 <__udivmoddi4+0xd4>
 800c25e:	4282      	cmp	r2, r0
 800c260:	f200 80fc 	bhi.w	800c45c <__udivmoddi4+0x2cc>
 800c264:	1a84      	subs	r4, r0, r2
 800c266:	eb65 0303 	sbc.w	r3, r5, r3
 800c26a:	2001      	movs	r0, #1
 800c26c:	4698      	mov	r8, r3
 800c26e:	2e00      	cmp	r6, #0
 800c270:	d0e2      	beq.n	800c238 <__udivmoddi4+0xa8>
 800c272:	e9c6 4800 	strd	r4, r8, [r6]
 800c276:	e7df      	b.n	800c238 <__udivmoddi4+0xa8>
 800c278:	b902      	cbnz	r2, 800c27c <__udivmoddi4+0xec>
 800c27a:	deff      	udf	#255	; 0xff
 800c27c:	fab2 f282 	clz	r2, r2
 800c280:	2a00      	cmp	r2, #0
 800c282:	f040 8091 	bne.w	800c3a8 <__udivmoddi4+0x218>
 800c286:	eba1 000c 	sub.w	r0, r1, ip
 800c28a:	2101      	movs	r1, #1
 800c28c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c290:	fa1f fe8c 	uxth.w	lr, ip
 800c294:	fbb0 f3f7 	udiv	r3, r0, r7
 800c298:	fb07 0013 	mls	r0, r7, r3, r0
 800c29c:	0c25      	lsrs	r5, r4, #16
 800c29e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800c2a2:	fb0e f003 	mul.w	r0, lr, r3
 800c2a6:	42a8      	cmp	r0, r5
 800c2a8:	d908      	bls.n	800c2bc <__udivmoddi4+0x12c>
 800c2aa:	eb1c 0505 	adds.w	r5, ip, r5
 800c2ae:	f103 38ff 	add.w	r8, r3, #4294967295
 800c2b2:	d202      	bcs.n	800c2ba <__udivmoddi4+0x12a>
 800c2b4:	42a8      	cmp	r0, r5
 800c2b6:	f200 80ce 	bhi.w	800c456 <__udivmoddi4+0x2c6>
 800c2ba:	4643      	mov	r3, r8
 800c2bc:	1a2d      	subs	r5, r5, r0
 800c2be:	fbb5 f0f7 	udiv	r0, r5, r7
 800c2c2:	fb07 5510 	mls	r5, r7, r0, r5
 800c2c6:	fb0e fe00 	mul.w	lr, lr, r0
 800c2ca:	b2a4      	uxth	r4, r4
 800c2cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800c2d0:	45a6      	cmp	lr, r4
 800c2d2:	d908      	bls.n	800c2e6 <__udivmoddi4+0x156>
 800c2d4:	eb1c 0404 	adds.w	r4, ip, r4
 800c2d8:	f100 35ff 	add.w	r5, r0, #4294967295
 800c2dc:	d202      	bcs.n	800c2e4 <__udivmoddi4+0x154>
 800c2de:	45a6      	cmp	lr, r4
 800c2e0:	f200 80b6 	bhi.w	800c450 <__udivmoddi4+0x2c0>
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	eba4 040e 	sub.w	r4, r4, lr
 800c2ea:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c2ee:	e79e      	b.n	800c22e <__udivmoddi4+0x9e>
 800c2f0:	f1c1 0720 	rsb	r7, r1, #32
 800c2f4:	408b      	lsls	r3, r1
 800c2f6:	fa22 fc07 	lsr.w	ip, r2, r7
 800c2fa:	ea4c 0c03 	orr.w	ip, ip, r3
 800c2fe:	fa25 fa07 	lsr.w	sl, r5, r7
 800c302:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800c306:	fbba f8f9 	udiv	r8, sl, r9
 800c30a:	fa20 f307 	lsr.w	r3, r0, r7
 800c30e:	fb09 aa18 	mls	sl, r9, r8, sl
 800c312:	408d      	lsls	r5, r1
 800c314:	fa1f fe8c 	uxth.w	lr, ip
 800c318:	431d      	orrs	r5, r3
 800c31a:	fa00 f301 	lsl.w	r3, r0, r1
 800c31e:	fb08 f00e 	mul.w	r0, r8, lr
 800c322:	0c2c      	lsrs	r4, r5, #16
 800c324:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c328:	42a0      	cmp	r0, r4
 800c32a:	fa02 f201 	lsl.w	r2, r2, r1
 800c32e:	d90b      	bls.n	800c348 <__udivmoddi4+0x1b8>
 800c330:	eb1c 0404 	adds.w	r4, ip, r4
 800c334:	f108 3aff 	add.w	sl, r8, #4294967295
 800c338:	f080 8088 	bcs.w	800c44c <__udivmoddi4+0x2bc>
 800c33c:	42a0      	cmp	r0, r4
 800c33e:	f240 8085 	bls.w	800c44c <__udivmoddi4+0x2bc>
 800c342:	f1a8 0802 	sub.w	r8, r8, #2
 800c346:	4464      	add	r4, ip
 800c348:	1a24      	subs	r4, r4, r0
 800c34a:	fbb4 f0f9 	udiv	r0, r4, r9
 800c34e:	fb09 4410 	mls	r4, r9, r0, r4
 800c352:	fb00 fe0e 	mul.w	lr, r0, lr
 800c356:	b2ad      	uxth	r5, r5
 800c358:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800c35c:	45a6      	cmp	lr, r4
 800c35e:	d908      	bls.n	800c372 <__udivmoddi4+0x1e2>
 800c360:	eb1c 0404 	adds.w	r4, ip, r4
 800c364:	f100 35ff 	add.w	r5, r0, #4294967295
 800c368:	d26c      	bcs.n	800c444 <__udivmoddi4+0x2b4>
 800c36a:	45a6      	cmp	lr, r4
 800c36c:	d96a      	bls.n	800c444 <__udivmoddi4+0x2b4>
 800c36e:	3802      	subs	r0, #2
 800c370:	4464      	add	r4, ip
 800c372:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800c376:	fba0 9502 	umull	r9, r5, r0, r2
 800c37a:	eba4 040e 	sub.w	r4, r4, lr
 800c37e:	42ac      	cmp	r4, r5
 800c380:	46c8      	mov	r8, r9
 800c382:	46ae      	mov	lr, r5
 800c384:	d356      	bcc.n	800c434 <__udivmoddi4+0x2a4>
 800c386:	d053      	beq.n	800c430 <__udivmoddi4+0x2a0>
 800c388:	2e00      	cmp	r6, #0
 800c38a:	d069      	beq.n	800c460 <__udivmoddi4+0x2d0>
 800c38c:	ebb3 0208 	subs.w	r2, r3, r8
 800c390:	eb64 040e 	sbc.w	r4, r4, lr
 800c394:	fa22 f301 	lsr.w	r3, r2, r1
 800c398:	fa04 f707 	lsl.w	r7, r4, r7
 800c39c:	431f      	orrs	r7, r3
 800c39e:	40cc      	lsrs	r4, r1
 800c3a0:	e9c6 7400 	strd	r7, r4, [r6]
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	e747      	b.n	800c238 <__udivmoddi4+0xa8>
 800c3a8:	fa0c fc02 	lsl.w	ip, ip, r2
 800c3ac:	f1c2 0120 	rsb	r1, r2, #32
 800c3b0:	fa25 f301 	lsr.w	r3, r5, r1
 800c3b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800c3b8:	fa20 f101 	lsr.w	r1, r0, r1
 800c3bc:	4095      	lsls	r5, r2
 800c3be:	430d      	orrs	r5, r1
 800c3c0:	fbb3 f1f7 	udiv	r1, r3, r7
 800c3c4:	fb07 3311 	mls	r3, r7, r1, r3
 800c3c8:	fa1f fe8c 	uxth.w	lr, ip
 800c3cc:	0c28      	lsrs	r0, r5, #16
 800c3ce:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800c3d2:	fb01 f30e 	mul.w	r3, r1, lr
 800c3d6:	4283      	cmp	r3, r0
 800c3d8:	fa04 f402 	lsl.w	r4, r4, r2
 800c3dc:	d908      	bls.n	800c3f0 <__udivmoddi4+0x260>
 800c3de:	eb1c 0000 	adds.w	r0, ip, r0
 800c3e2:	f101 38ff 	add.w	r8, r1, #4294967295
 800c3e6:	d22f      	bcs.n	800c448 <__udivmoddi4+0x2b8>
 800c3e8:	4283      	cmp	r3, r0
 800c3ea:	d92d      	bls.n	800c448 <__udivmoddi4+0x2b8>
 800c3ec:	3902      	subs	r1, #2
 800c3ee:	4460      	add	r0, ip
 800c3f0:	1ac0      	subs	r0, r0, r3
 800c3f2:	fbb0 f3f7 	udiv	r3, r0, r7
 800c3f6:	fb07 0013 	mls	r0, r7, r3, r0
 800c3fa:	b2ad      	uxth	r5, r5
 800c3fc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800c400:	fb03 f00e 	mul.w	r0, r3, lr
 800c404:	42a8      	cmp	r0, r5
 800c406:	d908      	bls.n	800c41a <__udivmoddi4+0x28a>
 800c408:	eb1c 0505 	adds.w	r5, ip, r5
 800c40c:	f103 38ff 	add.w	r8, r3, #4294967295
 800c410:	d216      	bcs.n	800c440 <__udivmoddi4+0x2b0>
 800c412:	42a8      	cmp	r0, r5
 800c414:	d914      	bls.n	800c440 <__udivmoddi4+0x2b0>
 800c416:	3b02      	subs	r3, #2
 800c418:	4465      	add	r5, ip
 800c41a:	1a28      	subs	r0, r5, r0
 800c41c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800c420:	e738      	b.n	800c294 <__udivmoddi4+0x104>
 800c422:	4631      	mov	r1, r6
 800c424:	4630      	mov	r0, r6
 800c426:	e707      	b.n	800c238 <__udivmoddi4+0xa8>
 800c428:	462f      	mov	r7, r5
 800c42a:	e6e4      	b.n	800c1f6 <__udivmoddi4+0x66>
 800c42c:	4618      	mov	r0, r3
 800c42e:	e6f9      	b.n	800c224 <__udivmoddi4+0x94>
 800c430:	454b      	cmp	r3, r9
 800c432:	d2a9      	bcs.n	800c388 <__udivmoddi4+0x1f8>
 800c434:	ebb9 0802 	subs.w	r8, r9, r2
 800c438:	eb65 0e0c 	sbc.w	lr, r5, ip
 800c43c:	3801      	subs	r0, #1
 800c43e:	e7a3      	b.n	800c388 <__udivmoddi4+0x1f8>
 800c440:	4643      	mov	r3, r8
 800c442:	e7ea      	b.n	800c41a <__udivmoddi4+0x28a>
 800c444:	4628      	mov	r0, r5
 800c446:	e794      	b.n	800c372 <__udivmoddi4+0x1e2>
 800c448:	4641      	mov	r1, r8
 800c44a:	e7d1      	b.n	800c3f0 <__udivmoddi4+0x260>
 800c44c:	46d0      	mov	r8, sl
 800c44e:	e77b      	b.n	800c348 <__udivmoddi4+0x1b8>
 800c450:	4464      	add	r4, ip
 800c452:	3802      	subs	r0, #2
 800c454:	e747      	b.n	800c2e6 <__udivmoddi4+0x156>
 800c456:	3b02      	subs	r3, #2
 800c458:	4465      	add	r5, ip
 800c45a:	e72f      	b.n	800c2bc <__udivmoddi4+0x12c>
 800c45c:	4608      	mov	r0, r1
 800c45e:	e706      	b.n	800c26e <__udivmoddi4+0xde>
 800c460:	4631      	mov	r1, r6
 800c462:	e6e9      	b.n	800c238 <__udivmoddi4+0xa8>

0800c464 <__aeabi_idiv0>:
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop

0800c468 <convertNumberToCharArray>:
 */
#include "extra_functions_for_work.h"
#include "main.h"
#include <stdlib.h>

char* convertNumberToCharArray(uint64_t number) {
 800c468:	b580      	push	{r7, lr}
 800c46a:	b088      	sub	sp, #32
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	e9c7 0100 	strd	r0, r1, [r7]
    // Count the number of digits in the number
    uint64_t temp = number;
 800c472:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c476:	e9c7 2306 	strd	r2, r3, [r7, #24]
    int numDigits = 1;
 800c47a:	2301      	movs	r3, #1
 800c47c:	617b      	str	r3, [r7, #20]
    while (temp /= 10) {
 800c47e:	e002      	b.n	800c486 <convertNumberToCharArray+0x1e>
        numDigits++;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	3301      	adds	r3, #1
 800c484:	617b      	str	r3, [r7, #20]
    while (temp /= 10) {
 800c486:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800c48a:	f04f 020a 	mov.w	r2, #10
 800c48e:	f04f 0300 	mov.w	r3, #0
 800c492:	f7ff fe65 	bl	800c160 <__aeabi_uldivmod>
 800c496:	4602      	mov	r2, r0
 800c498:	460b      	mov	r3, r1
 800c49a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800c49e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c4a2:	4313      	orrs	r3, r2
 800c4a4:	d1ec      	bne.n	800c480 <convertNumberToCharArray+0x18>
    }

    // Allocate memory for the character array (+1 for null-terminator)
    char* buffer = (char*)malloc((numDigits + 1) * sizeof(char));
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	3301      	adds	r3, #1
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f007 fb16 	bl	8013adc <malloc>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	60fb      	str	r3, [r7, #12]
    if (buffer == NULL) {
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d101      	bne.n	800c4be <convertNumberToCharArray+0x56>
        // Error in memory allocation
        return NULL;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e02b      	b.n	800c516 <convertNumberToCharArray+0xae>
    }

    // Convert each digit to its corresponding character representation
    int i = numDigits - 1;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	613b      	str	r3, [r7, #16]
    while (number != 0) {
 800c4c4:	e01d      	b.n	800c502 <convertNumberToCharArray+0x9a>
        buffer[i--] = '0' + (number % 10);
 800c4c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4ca:	f04f 020a 	mov.w	r2, #10
 800c4ce:	f04f 0300 	mov.w	r3, #0
 800c4d2:	f7ff fe45 	bl	800c160 <__aeabi_uldivmod>
 800c4d6:	b2d2      	uxtb	r2, r2
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	1e59      	subs	r1, r3, #1
 800c4dc:	6139      	str	r1, [r7, #16]
 800c4de:	4619      	mov	r1, r3
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	440b      	add	r3, r1
 800c4e4:	3230      	adds	r2, #48	; 0x30
 800c4e6:	b2d2      	uxtb	r2, r2
 800c4e8:	701a      	strb	r2, [r3, #0]
        number /= 10;
 800c4ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c4ee:	f04f 020a 	mov.w	r2, #10
 800c4f2:	f04f 0300 	mov.w	r3, #0
 800c4f6:	f7ff fe33 	bl	800c160 <__aeabi_uldivmod>
 800c4fa:	4602      	mov	r2, r0
 800c4fc:	460b      	mov	r3, r1
 800c4fe:	e9c7 2300 	strd	r2, r3, [r7]
    while (number != 0) {
 800c502:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c506:	4313      	orrs	r3, r2
 800c508:	d1dd      	bne.n	800c4c6 <convertNumberToCharArray+0x5e>
    }

    buffer[numDigits] = '\0'; // Null-terminate the character array
 800c50a:	697b      	ldr	r3, [r7, #20]
 800c50c:	68fa      	ldr	r2, [r7, #12]
 800c50e:	4413      	add	r3, r2
 800c510:	2200      	movs	r2, #0
 800c512:	701a      	strb	r2, [r3, #0]

    return buffer;
 800c514:	68fb      	ldr	r3, [r7, #12]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3720      	adds	r7, #32
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <jumpToAddress>:

void jumpToAddress(uint32_t ADDRESSTOGO){
 800c51e:	b580      	push	{r7, lr}
 800c520:	b086      	sub	sp, #24
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
	  uint32_t addresstojump;

	  addresstojump = *((volatile uint32_t*)(ADDRESSTOGO + 4));
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	3304      	adds	r3, #4
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	617b      	str	r3, [r7, #20]
	  HAL_DeInit();
 800c52e:	f002 fa41 	bl	800e9b4 <HAL_DeInit>
	  HAL_RCC_DeInit();
 800c532:	f003 fadf 	bl	800faf4 <HAL_RCC_DeInit>
	  void (*GoToApp)(void);
	  GoToApp = (void (*) (void))addresstojump;
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	613b      	str	r3, [r7, #16]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800c53a:	b672      	cpsid	i
}
 800c53c:	bf00      	nop
	  __disable_irq();
	  __set_MSP(*((volatile uint32_t*)ADDRESSTOGO));
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f383 8808 	msr	MSP, r3
}
 800c54a:	bf00      	nop
	  GoToApp();
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	4798      	blx	r3
}
 800c550:	bf00      	nop
 800c552:	3718      	adds	r7, #24
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800c558:	b480      	push	{r7}
 800c55a:	b085      	sub	sp, #20
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	60f8      	str	r0, [r7, #12]
 800c560:	60b9      	str	r1, [r7, #8]
 800c562:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	4a06      	ldr	r2, [pc, #24]	; (800c580 <vApplicationGetIdleTaskMemory+0x28>)
 800c568:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800c56a:	68bb      	ldr	r3, [r7, #8]
 800c56c:	4a05      	ldr	r2, [pc, #20]	; (800c584 <vApplicationGetIdleTaskMemory+0x2c>)
 800c56e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	2280      	movs	r2, #128	; 0x80
 800c574:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800c576:	bf00      	nop
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bc80      	pop	{r7}
 800c57e:	4770      	bx	lr
 800c580:	2000010c 	.word	0x2000010c
 800c584:	200001c0 	.word	0x200001c0

0800c588 <printUcxoBaratia>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintStr("!");
	HD44780_SetCursor(6, 1);
	HD44780_PrintStr("-_-");
}
void printUcxoBaratia(uint8_t row, uint8_t column){
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	4603      	mov	r3, r0
 800c590:	460a      	mov	r2, r1
 800c592:	71fb      	strb	r3, [r7, #7]
 800c594:	4613      	mov	r3, r2
 800c596:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c598:	f000 fc42 	bl	800ce20 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, sGeo);
 800c59c:	494e      	ldr	r1, [pc, #312]	; (800c6d8 <printUcxoBaratia+0x150>)
 800c59e:	2001      	movs	r0, #1
 800c5a0:	f000 fc9c 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c5a4:	79fa      	ldrb	r2, [r7, #7]
 800c5a6:	79bb      	ldrb	r3, [r7, #6]
 800c5a8:	4611      	mov	r1, r2
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 fc4e 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	f000 fcbc 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(2, xGeo);
 800c5b6:	4949      	ldr	r1, [pc, #292]	; (800c6dc <printUcxoBaratia+0x154>)
 800c5b8:	2002      	movs	r0, #2
 800c5ba:	f000 fc8f 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c5be:	79bb      	ldrb	r3, [r7, #6]
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	b2db      	uxtb	r3, r3
 800c5c4:	79fa      	ldrb	r2, [r7, #7]
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 fc3f 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c5ce:	2002      	movs	r0, #2
 800c5d0:	f000 fcad 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(3, vGeo);
 800c5d4:	4942      	ldr	r1, [pc, #264]	; (800c6e0 <printUcxoBaratia+0x158>)
 800c5d6:	2003      	movs	r0, #3
 800c5d8:	f000 fc80 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c5dc:	79bb      	ldrb	r3, [r7, #6]
 800c5de:	3302      	adds	r3, #2
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	79fa      	ldrb	r2, [r7, #7]
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f000 fc30 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c5ec:	2003      	movs	r0, #3
 800c5ee:	f000 fc9e 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(4, aGeo);
 800c5f2:	493c      	ldr	r1, [pc, #240]	; (800c6e4 <printUcxoBaratia+0x15c>)
 800c5f4:	2004      	movs	r0, #4
 800c5f6:	f000 fc71 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c5fa:	79bb      	ldrb	r3, [r7, #6]
 800c5fc:	3303      	adds	r3, #3
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	79fa      	ldrb	r2, [r7, #7]
 800c602:	4611      	mov	r1, r2
 800c604:	4618      	mov	r0, r3
 800c606:	f000 fc21 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c60a:	2004      	movs	r0, #4
 800c60c:	f000 fc8f 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(5, bGeo);
 800c610:	4935      	ldr	r1, [pc, #212]	; (800c6e8 <printUcxoBaratia+0x160>)
 800c612:	2005      	movs	r0, #5
 800c614:	f000 fc62 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c618:	79bb      	ldrb	r3, [r7, #6]
 800c61a:	3305      	adds	r3, #5
 800c61c:	b2db      	uxtb	r3, r3
 800c61e:	79fa      	ldrb	r2, [r7, #7]
 800c620:	4611      	mov	r1, r2
 800c622:	4618      	mov	r0, r3
 800c624:	f000 fc12 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c628:	2005      	movs	r0, #5
 800c62a:	f000 fc80 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+6, row);
 800c62e:	79bb      	ldrb	r3, [r7, #6]
 800c630:	3306      	adds	r3, #6
 800c632:	b2db      	uxtb	r3, r3
 800c634:	79fa      	ldrb	r2, [r7, #7]
 800c636:	4611      	mov	r1, r2
 800c638:	4618      	mov	r0, r3
 800c63a:	f000 fc07 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c63e:	2004      	movs	r0, #4
 800c640:	f000 fc75 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(6, rGeo);
 800c644:	4929      	ldr	r1, [pc, #164]	; (800c6ec <printUcxoBaratia+0x164>)
 800c646:	2006      	movs	r0, #6
 800c648:	f000 fc48 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c64c:	79bb      	ldrb	r3, [r7, #6]
 800c64e:	3307      	adds	r3, #7
 800c650:	b2db      	uxtb	r3, r3
 800c652:	79fa      	ldrb	r2, [r7, #7]
 800c654:	4611      	mov	r1, r2
 800c656:	4618      	mov	r0, r3
 800c658:	f000 fbf8 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c65c:	2006      	movs	r0, #6
 800c65e:	f000 fc66 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+8, row);
 800c662:	79bb      	ldrb	r3, [r7, #6]
 800c664:	3308      	adds	r3, #8
 800c666:	b2db      	uxtb	r3, r3
 800c668:	79fa      	ldrb	r2, [r7, #7]
 800c66a:	4611      	mov	r1, r2
 800c66c:	4618      	mov	r0, r3
 800c66e:	f000 fbed 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c672:	2004      	movs	r0, #4
 800c674:	f000 fc5b 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(7, tGeo);
 800c678:	491d      	ldr	r1, [pc, #116]	; (800c6f0 <printUcxoBaratia+0x168>)
 800c67a:	2007      	movs	r0, #7
 800c67c:	f000 fc2e 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c680:	79bb      	ldrb	r3, [r7, #6]
 800c682:	3309      	adds	r3, #9
 800c684:	b2db      	uxtb	r3, r3
 800c686:	79fa      	ldrb	r2, [r7, #7]
 800c688:	4611      	mov	r1, r2
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 fbde 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c690:	2007      	movs	r0, #7
 800c692:	f000 fc4c 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_CreateSpecialChar(8, iGeo);
 800c696:	4917      	ldr	r1, [pc, #92]	; (800c6f4 <printUcxoBaratia+0x16c>)
 800c698:	2008      	movs	r0, #8
 800c69a:	f000 fc1f 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c69e:	79bb      	ldrb	r3, [r7, #6]
 800c6a0:	330a      	adds	r3, #10
 800c6a2:	b2db      	uxtb	r3, r3
 800c6a4:	79fa      	ldrb	r2, [r7, #7]
 800c6a6:	4611      	mov	r1, r2
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f000 fbcf 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c6ae:	2008      	movs	r0, #8
 800c6b0:	f000 fc3d 	bl	800cf2e <HD44780_PrintSpecialChar>

		HD44780_SetCursor(column+11, row);
 800c6b4:	79bb      	ldrb	r3, [r7, #6]
 800c6b6:	330b      	adds	r3, #11
 800c6b8:	b2db      	uxtb	r3, r3
 800c6ba:	79fa      	ldrb	r2, [r7, #7]
 800c6bc:	4611      	mov	r1, r2
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 fbc4 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c6c4:	2004      	movs	r0, #4
 800c6c6:	f000 fc32 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 800c6ca:	480b      	ldr	r0, [pc, #44]	; (800c6f8 <printUcxoBaratia+0x170>)
 800c6cc:	f000 fc3c 	bl	800cf48 <HD44780_PrintStr>

}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	20000008 	.word	0x20000008
 800c6dc:	20000010 	.word	0x20000010
 800c6e0:	20000058 	.word	0x20000058
 800c6e4:	20000020 	.word	0x20000020
 800c6e8:	20000028 	.word	0x20000028
 800c6ec:	20000060 	.word	0x20000060
 800c6f0:	20000048 	.word	0x20000048
 800c6f4:	20000030 	.word	0x20000030
 800c6f8:	0801462c 	.word	0x0801462c

0800c6fc <printBlansiAraa>:

void printBlansiAraa(uint8_t row, uint8_t column){
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	4603      	mov	r3, r0
 800c704:	460a      	mov	r2, r1
 800c706:	71fb      	strb	r3, [r7, #7]
 800c708:	4613      	mov	r3, r2
 800c70a:	71bb      	strb	r3, [r7, #6]

	HD44780_Clear();
 800c70c:	f000 fb88 	bl	800ce20 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo); //b
 800c710:	4948      	ldr	r1, [pc, #288]	; (800c834 <printBlansiAraa+0x138>)
 800c712:	2001      	movs	r0, #1
 800c714:	f000 fbe2 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800c718:	79fa      	ldrb	r2, [r7, #7]
 800c71a:	79bb      	ldrb	r3, [r7, #6]
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fb94 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800c724:	2001      	movs	r0, #1
 800c726:	f000 fc02 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo); //a
 800c72a:	4943      	ldr	r1, [pc, #268]	; (800c838 <printBlansiAraa+0x13c>)
 800c72c:	2002      	movs	r0, #2
 800c72e:	f000 fbd5 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800c732:	79bb      	ldrb	r3, [r7, #6]
 800c734:	3301      	adds	r3, #1
 800c736:	b2db      	uxtb	r3, r3
 800c738:	79fa      	ldrb	r2, [r7, #7]
 800c73a:	4611      	mov	r1, r2
 800c73c:	4618      	mov	r0, r3
 800c73e:	f000 fb85 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c742:	2002      	movs	r0, #2
 800c744:	f000 fbf3 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo); // l
 800c748:	493c      	ldr	r1, [pc, #240]	; (800c83c <printBlansiAraa+0x140>)
 800c74a:	2003      	movs	r0, #3
 800c74c:	f000 fbc6 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800c750:	79bb      	ldrb	r3, [r7, #6]
 800c752:	3302      	adds	r3, #2
 800c754:	b2db      	uxtb	r3, r3
 800c756:	79fa      	ldrb	r2, [r7, #7]
 800c758:	4611      	mov	r1, r2
 800c75a:	4618      	mov	r0, r3
 800c75c:	f000 fb76 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800c760:	2003      	movs	r0, #3
 800c762:	f000 fbe4 	bl	800cf2e <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+3, row); //a
 800c766:	79bb      	ldrb	r3, [r7, #6]
 800c768:	3303      	adds	r3, #3
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	79fa      	ldrb	r2, [r7, #7]
 800c76e:	4611      	mov	r1, r2
 800c770:	4618      	mov	r0, r3
 800c772:	f000 fb6b 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c776:	2002      	movs	r0, #2
 800c778:	f000 fbd9 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(4, nGeo); //n
 800c77c:	4930      	ldr	r1, [pc, #192]	; (800c840 <printBlansiAraa+0x144>)
 800c77e:	2004      	movs	r0, #4
 800c780:	f000 fbac 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800c784:	79bb      	ldrb	r3, [r7, #6]
 800c786:	3304      	adds	r3, #4
 800c788:	b2db      	uxtb	r3, r3
 800c78a:	79fa      	ldrb	r2, [r7, #7]
 800c78c:	4611      	mov	r1, r2
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 fb5c 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800c794:	2004      	movs	r0, #4
 800c796:	f000 fbca 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(5, sGeo); //s
 800c79a:	492a      	ldr	r1, [pc, #168]	; (800c844 <printBlansiAraa+0x148>)
 800c79c:	2005      	movs	r0, #5
 800c79e:	f000 fb9d 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800c7a2:	79bb      	ldrb	r3, [r7, #6]
 800c7a4:	3305      	adds	r3, #5
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	79fa      	ldrb	r2, [r7, #7]
 800c7aa:	4611      	mov	r1, r2
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fb4d 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800c7b2:	2005      	movs	r0, #5
 800c7b4:	f000 fbbb 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, iGeo); //i
 800c7b8:	4923      	ldr	r1, [pc, #140]	; (800c848 <printBlansiAraa+0x14c>)
 800c7ba:	2006      	movs	r0, #6
 800c7bc:	f000 fb8e 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800c7c0:	79bb      	ldrb	r3, [r7, #6]
 800c7c2:	3306      	adds	r3, #6
 800c7c4:	b2db      	uxtb	r3, r3
 800c7c6:	79fa      	ldrb	r2, [r7, #7]
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 fb3e 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800c7d0:	2006      	movs	r0, #6
 800c7d2:	f000 fbac 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_SetCursor(column+8, row); //a
 800c7d6:	79bb      	ldrb	r3, [r7, #6]
 800c7d8:	3308      	adds	r3, #8
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	79fa      	ldrb	r2, [r7, #7]
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f000 fb33 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c7e6:	2002      	movs	r0, #2
 800c7e8:	f000 fba1 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, rGeo);
 800c7ec:	4917      	ldr	r1, [pc, #92]	; (800c84c <printBlansiAraa+0x150>)
 800c7ee:	2007      	movs	r0, #7
 800c7f0:	f000 fb74 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+9, row);
 800c7f4:	79bb      	ldrb	r3, [r7, #6]
 800c7f6:	3309      	adds	r3, #9
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	79fa      	ldrb	r2, [r7, #7]
 800c7fc:	4611      	mov	r1, r2
 800c7fe:	4618      	mov	r0, r3
 800c800:	f000 fb24 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800c804:	2007      	movs	r0, #7
 800c806:	f000 fb92 	bl	800cf2e <HD44780_PrintSpecialChar>


	HD44780_SetCursor(column+10, row);//a
 800c80a:	79bb      	ldrb	r3, [r7, #6]
 800c80c:	330a      	adds	r3, #10
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	79fa      	ldrb	r2, [r7, #7]
 800c812:	4611      	mov	r1, r2
 800c814:	4618      	mov	r0, r3
 800c816:	f000 fb19 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800c81a:	2002      	movs	r0, #2
 800c81c:	f000 fb87 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800c820:	2002      	movs	r0, #2
 800c822:	f000 fb84 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800c826:	480a      	ldr	r0, [pc, #40]	; (800c850 <printBlansiAraa+0x154>)
 800c828:	f000 fb8e 	bl	800cf48 <HD44780_PrintStr>
}
 800c82c:	bf00      	nop
 800c82e:	3708      	adds	r7, #8
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}
 800c834:	20000028 	.word	0x20000028
 800c838:	20000020 	.word	0x20000020
 800c83c:	20000038 	.word	0x20000038
 800c840:	20000000 	.word	0x20000000
 800c844:	20000008 	.word	0x20000008
 800c848:	20000030 	.word	0x20000030
 800c84c:	20000060 	.word	0x20000060
 800c850:	0801462c 	.word	0x0801462c

0800c854 <printMiadetBarati>:

void printMiadetBarati(uint8_t row, uint8_t column){
 800c854:	b580      	push	{r7, lr}
 800c856:	b082      	sub	sp, #8
 800c858:	af00      	add	r7, sp, #0
 800c85a:	4603      	mov	r3, r0
 800c85c:	460a      	mov	r2, r1
 800c85e:	71fb      	strb	r3, [r7, #7]
 800c860:	4613      	mov	r3, r2
 800c862:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800c864:	f000 fadc 	bl	800ce20 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, mGeo);
 800c868:	4959      	ldr	r1, [pc, #356]	; (800c9d0 <printMiadetBarati+0x17c>)
 800c86a:	2001      	movs	r0, #1
 800c86c:	f000 fb36 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800c870:	79fa      	ldrb	r2, [r7, #7]
 800c872:	79bb      	ldrb	r3, [r7, #6]
 800c874:	4611      	mov	r1, r2
 800c876:	4618      	mov	r0, r3
 800c878:	f000 fae8 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800c87c:	2001      	movs	r0, #1
 800c87e:	f000 fb56 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, iGeo);
 800c882:	4954      	ldr	r1, [pc, #336]	; (800c9d4 <printMiadetBarati+0x180>)
 800c884:	2002      	movs	r0, #2
 800c886:	f000 fb29 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800c88a:	79bb      	ldrb	r3, [r7, #6]
 800c88c:	3301      	adds	r3, #1
 800c88e:	b2db      	uxtb	r3, r3
 800c890:	79fa      	ldrb	r2, [r7, #7]
 800c892:	4611      	mov	r1, r2
 800c894:	4618      	mov	r0, r3
 800c896:	f000 fad9 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c89a:	2002      	movs	r0, #2
 800c89c:	f000 fb47 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, aGeo);
 800c8a0:	494d      	ldr	r1, [pc, #308]	; (800c9d8 <printMiadetBarati+0x184>)
 800c8a2:	2003      	movs	r0, #3
 800c8a4:	f000 fb1a 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800c8a8:	79bb      	ldrb	r3, [r7, #6]
 800c8aa:	3302      	adds	r3, #2
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	79fa      	ldrb	r2, [r7, #7]
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f000 faca 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c8b8:	2003      	movs	r0, #3
 800c8ba:	f000 fb38 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, dGeo);
 800c8be:	4947      	ldr	r1, [pc, #284]	; (800c9dc <printMiadetBarati+0x188>)
 800c8c0:	2004      	movs	r0, #4
 800c8c2:	f000 fb0b 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800c8c6:	79bb      	ldrb	r3, [r7, #6]
 800c8c8:	3303      	adds	r3, #3
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	79fa      	ldrb	r2, [r7, #7]
 800c8ce:	4611      	mov	r1, r2
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 fabb 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800c8d6:	2004      	movs	r0, #4
 800c8d8:	f000 fb29 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, eGeo);
 800c8dc:	4940      	ldr	r1, [pc, #256]	; (800c9e0 <printMiadetBarati+0x18c>)
 800c8de:	2005      	movs	r0, #5
 800c8e0:	f000 fafc 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+4, row);
 800c8e4:	79bb      	ldrb	r3, [r7, #6]
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	b2db      	uxtb	r3, r3
 800c8ea:	79fa      	ldrb	r2, [r7, #7]
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f000 faac 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800c8f4:	2005      	movs	r0, #5
 800c8f6:	f000 fb1a 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, tGeo);
 800c8fa:	493a      	ldr	r1, [pc, #232]	; (800c9e4 <printMiadetBarati+0x190>)
 800c8fc:	2006      	movs	r0, #6
 800c8fe:	f000 faed 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800c902:	79bb      	ldrb	r3, [r7, #6]
 800c904:	3305      	adds	r3, #5
 800c906:	b2db      	uxtb	r3, r3
 800c908:	79fa      	ldrb	r2, [r7, #7]
 800c90a:	4611      	mov	r1, r2
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 fa9d 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c912:	2006      	movs	r0, #6
 800c914:	f000 fb0b 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo);
 800c918:	4933      	ldr	r1, [pc, #204]	; (800c9e8 <printMiadetBarati+0x194>)
 800c91a:	2007      	movs	r0, #7
 800c91c:	f000 fade 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800c920:	79bb      	ldrb	r3, [r7, #6]
 800c922:	3307      	adds	r3, #7
 800c924:	b2db      	uxtb	r3, r3
 800c926:	79fa      	ldrb	r2, [r7, #7]
 800c928:	4611      	mov	r1, r2
 800c92a:	4618      	mov	r0, r3
 800c92c:	f000 fa8e 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800c930:	2007      	movs	r0, #7
 800c932:	f000 fafc 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+8, row);
 800c936:	79bb      	ldrb	r3, [r7, #6]
 800c938:	3308      	adds	r3, #8
 800c93a:	b2db      	uxtb	r3, r3
 800c93c:	79fa      	ldrb	r2, [r7, #7]
 800c93e:	4611      	mov	r1, r2
 800c940:	4618      	mov	r0, r3
 800c942:	f000 fa83 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c946:	2003      	movs	r0, #3
 800c948:	f000 faf1 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(8, rGeo);
 800c94c:	4927      	ldr	r1, [pc, #156]	; (800c9ec <printMiadetBarati+0x198>)
 800c94e:	2008      	movs	r0, #8
 800c950:	f000 fac4 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+9, row);
 800c954:	79bb      	ldrb	r3, [r7, #6]
 800c956:	3309      	adds	r3, #9
 800c958:	b2db      	uxtb	r3, r3
 800c95a:	79fa      	ldrb	r2, [r7, #7]
 800c95c:	4611      	mov	r1, r2
 800c95e:	4618      	mov	r0, r3
 800c960:	f000 fa74 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(8);
 800c964:	2008      	movs	r0, #8
 800c966:	f000 fae2 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+10, row);
 800c96a:	79bb      	ldrb	r3, [r7, #6]
 800c96c:	330a      	adds	r3, #10
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	79fa      	ldrb	r2, [r7, #7]
 800c972:	4611      	mov	r1, r2
 800c974:	4618      	mov	r0, r3
 800c976:	f000 fa69 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800c97a:	2003      	movs	r0, #3
 800c97c:	f000 fad7 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+11, row);
 800c980:	79bb      	ldrb	r3, [r7, #6]
 800c982:	330b      	adds	r3, #11
 800c984:	b2db      	uxtb	r3, r3
 800c986:	79fa      	ldrb	r2, [r7, #7]
 800c988:	4611      	mov	r1, r2
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 fa5e 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800c990:	2006      	movs	r0, #6
 800c992:	f000 facc 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+12, row);
 800c996:	79bb      	ldrb	r3, [r7, #6]
 800c998:	330c      	adds	r3, #12
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	79fa      	ldrb	r2, [r7, #7]
 800c99e:	4611      	mov	r1, r2
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f000 fa53 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800c9a6:	2002      	movs	r0, #2
 800c9a8:	f000 fac1 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_SetCursor(column+2, row+1);
 800c9ac:	79bb      	ldrb	r3, [r7, #6]
 800c9ae:	3302      	adds	r3, #2
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	4619      	mov	r1, r3
 800c9ba:	4610      	mov	r0, r2
 800c9bc:	f000 fa46 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintStr("0.10 GEL");
 800c9c0:	480b      	ldr	r0, [pc, #44]	; (800c9f0 <printMiadetBarati+0x19c>)
 800c9c2:	f000 fac1 	bl	800cf48 <HD44780_PrintStr>


}
 800c9c6:	bf00      	nop
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	20000050 	.word	0x20000050
 800c9d4:	20000030 	.word	0x20000030
 800c9d8:	20000020 	.word	0x20000020
 800c9dc:	20000018 	.word	0x20000018
 800c9e0:	20000068 	.word	0x20000068
 800c9e4:	20000048 	.word	0x20000048
 800c9e8:	20000028 	.word	0x20000028
 800c9ec:	20000060 	.word	0x20000060
 800c9f0:	08014634 	.word	0x08014634

0800c9f4 <prinWarmateba>:

void prinWarmateba(uint8_t row, uint8_t column){
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b082      	sub	sp, #8
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	460a      	mov	r2, r1
 800c9fe:	71fb      	strb	r3, [r7, #7]
 800ca00:	4613      	mov	r3, r2
 800ca02:	71bb      	strb	r3, [r7, #6]
		HD44780_Clear();
 800ca04:	f000 fa0c 	bl	800ce20 <HD44780_Clear>
		HD44780_CreateSpecialChar(1, wGeo);
 800ca08:	4939      	ldr	r1, [pc, #228]	; (800caf0 <prinWarmateba+0xfc>)
 800ca0a:	2001      	movs	r0, #1
 800ca0c:	f000 fa66 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column, row);
 800ca10:	79fa      	ldrb	r2, [r7, #7]
 800ca12:	79bb      	ldrb	r3, [r7, #6]
 800ca14:	4611      	mov	r1, r2
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 fa18 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(1);
 800ca1c:	2001      	movs	r0, #1
 800ca1e:	f000 fa86 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(2, aGeo);
 800ca22:	4934      	ldr	r1, [pc, #208]	; (800caf4 <prinWarmateba+0x100>)
 800ca24:	2002      	movs	r0, #2
 800ca26:	f000 fa59 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+1, row);
 800ca2a:	79bb      	ldrb	r3, [r7, #6]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	b2db      	uxtb	r3, r3
 800ca30:	79fa      	ldrb	r2, [r7, #7]
 800ca32:	4611      	mov	r1, r2
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 fa09 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(2);
 800ca3a:	2002      	movs	r0, #2
 800ca3c:	f000 fa77 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(3, rGeo);
 800ca40:	492d      	ldr	r1, [pc, #180]	; (800caf8 <prinWarmateba+0x104>)
 800ca42:	2003      	movs	r0, #3
 800ca44:	f000 fa4a 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+2, row);
 800ca48:	79bb      	ldrb	r3, [r7, #6]
 800ca4a:	3302      	adds	r3, #2
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	79fa      	ldrb	r2, [r7, #7]
 800ca50:	4611      	mov	r1, r2
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 f9fa 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(3);
 800ca58:	2003      	movs	r0, #3
 800ca5a:	f000 fa68 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(4, mGeo);
 800ca5e:	4927      	ldr	r1, [pc, #156]	; (800cafc <prinWarmateba+0x108>)
 800ca60:	2004      	movs	r0, #4
 800ca62:	f000 fa3b 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+3, row);
 800ca66:	79bb      	ldrb	r3, [r7, #6]
 800ca68:	3303      	adds	r3, #3
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	79fa      	ldrb	r2, [r7, #7]
 800ca6e:	4611      	mov	r1, r2
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 f9eb 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(4);
 800ca76:	2004      	movs	r0, #4
 800ca78:	f000 fa59 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_PrintSpecialChar(2); // a
 800ca7c:	2002      	movs	r0, #2
 800ca7e:	f000 fa56 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(5, tGeo); //t
 800ca82:	491f      	ldr	r1, [pc, #124]	; (800cb00 <prinWarmateba+0x10c>)
 800ca84:	2005      	movs	r0, #5
 800ca86:	f000 fa29 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+5, row);
 800ca8a:	79bb      	ldrb	r3, [r7, #6]
 800ca8c:	3305      	adds	r3, #5
 800ca8e:	b2db      	uxtb	r3, r3
 800ca90:	79fa      	ldrb	r2, [r7, #7]
 800ca92:	4611      	mov	r1, r2
 800ca94:	4618      	mov	r0, r3
 800ca96:	f000 f9d9 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(5);
 800ca9a:	2005      	movs	r0, #5
 800ca9c:	f000 fa47 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(6, eGeo); //e
 800caa0:	4918      	ldr	r1, [pc, #96]	; (800cb04 <prinWarmateba+0x110>)
 800caa2:	2006      	movs	r0, #6
 800caa4:	f000 fa1a 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+6, row);
 800caa8:	79bb      	ldrb	r3, [r7, #6]
 800caaa:	3306      	adds	r3, #6
 800caac:	b2db      	uxtb	r3, r3
 800caae:	79fa      	ldrb	r2, [r7, #7]
 800cab0:	4611      	mov	r1, r2
 800cab2:	4618      	mov	r0, r3
 800cab4:	f000 f9ca 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(6);
 800cab8:	2006      	movs	r0, #6
 800caba:	f000 fa38 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_CreateSpecialChar(7, bGeo); //b
 800cabe:	4912      	ldr	r1, [pc, #72]	; (800cb08 <prinWarmateba+0x114>)
 800cac0:	2007      	movs	r0, #7
 800cac2:	f000 fa0b 	bl	800cedc <HD44780_CreateSpecialChar>
		HD44780_SetCursor(column+7, row);
 800cac6:	79bb      	ldrb	r3, [r7, #6]
 800cac8:	3307      	adds	r3, #7
 800caca:	b2db      	uxtb	r3, r3
 800cacc:	79fa      	ldrb	r2, [r7, #7]
 800cace:	4611      	mov	r1, r2
 800cad0:	4618      	mov	r0, r3
 800cad2:	f000 f9bb 	bl	800ce4c <HD44780_SetCursor>
		HD44780_PrintSpecialChar(7);
 800cad6:	2007      	movs	r0, #7
 800cad8:	f000 fa29 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_PrintSpecialChar(2);
 800cadc:	2002      	movs	r0, #2
 800cade:	f000 fa26 	bl	800cf2e <HD44780_PrintSpecialChar>
		HD44780_PrintStr("!");
 800cae2:	480a      	ldr	r0, [pc, #40]	; (800cb0c <prinWarmateba+0x118>)
 800cae4:	f000 fa30 	bl	800cf48 <HD44780_PrintStr>

}
 800cae8:	bf00      	nop
 800caea:	3708      	adds	r7, #8
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	20000070 	.word	0x20000070
 800caf4:	20000020 	.word	0x20000020
 800caf8:	20000060 	.word	0x20000060
 800cafc:	20000050 	.word	0x20000050
 800cb00:	20000048 	.word	0x20000048
 800cb04:	20000068 	.word	0x20000068
 800cb08:	20000028 	.word	0x20000028
 800cb0c:	0801462c 	.word	0x0801462c

0800cb10 <printDaicadet>:
	HD44780_PrintSpecialChar(7);
	HD44780_SetCursor(column+7, row);
	HD44780_PrintStr("!");
}

void printDaicadet(uint8_t row, uint8_t column){
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	4603      	mov	r3, r0
 800cb18:	460a      	mov	r2, r1
 800cb1a:	71fb      	strb	r3, [r7, #7]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800cb20:	f000 f97e 	bl	800ce20 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, dGeo);
 800cb24:	493a      	ldr	r1, [pc, #232]	; (800cc10 <printDaicadet+0x100>)
 800cb26:	2001      	movs	r0, #1
 800cb28:	f000 f9d8 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800cb2c:	79fa      	ldrb	r2, [r7, #7]
 800cb2e:	79bb      	ldrb	r3, [r7, #6]
 800cb30:	4611      	mov	r1, r2
 800cb32:	4618      	mov	r0, r3
 800cb34:	f000 f98a 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800cb38:	2001      	movs	r0, #1
 800cb3a:	f000 f9f8 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(2, aGeo);
 800cb3e:	4935      	ldr	r1, [pc, #212]	; (800cc14 <printDaicadet+0x104>)
 800cb40:	2002      	movs	r0, #2
 800cb42:	f000 f9cb 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800cb46:	79bb      	ldrb	r3, [r7, #6]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	b2db      	uxtb	r3, r3
 800cb4c:	79fa      	ldrb	r2, [r7, #7]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	4618      	mov	r0, r3
 800cb52:	f000 f97b 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800cb56:	2002      	movs	r0, #2
 800cb58:	f000 f9e9 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(3, iGeo);
 800cb5c:	492e      	ldr	r1, [pc, #184]	; (800cc18 <printDaicadet+0x108>)
 800cb5e:	2003      	movs	r0, #3
 800cb60:	f000 f9bc 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800cb64:	79bb      	ldrb	r3, [r7, #6]
 800cb66:	3302      	adds	r3, #2
 800cb68:	b2db      	uxtb	r3, r3
 800cb6a:	79fa      	ldrb	r2, [r7, #7]
 800cb6c:	4611      	mov	r1, r2
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f000 f96c 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800cb74:	2003      	movs	r0, #3
 800cb76:	f000 f9da 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(4, cGeo);
 800cb7a:	4928      	ldr	r1, [pc, #160]	; (800cc1c <printDaicadet+0x10c>)
 800cb7c:	2004      	movs	r0, #4
 800cb7e:	f000 f9ad 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+3, row);
 800cb82:	79bb      	ldrb	r3, [r7, #6]
 800cb84:	3303      	adds	r3, #3
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	79fa      	ldrb	r2, [r7, #7]
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f000 f95d 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(4);
 800cb92:	2004      	movs	r0, #4
 800cb94:	f000 f9cb 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+4, row);
 800cb98:	79bb      	ldrb	r3, [r7, #6]
 800cb9a:	3304      	adds	r3, #4
 800cb9c:	b2db      	uxtb	r3, r3
 800cb9e:	79fa      	ldrb	r2, [r7, #7]
 800cba0:	4611      	mov	r1, r2
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 f952 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800cba8:	2002      	movs	r0, #2
 800cbaa:	f000 f9c0 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+5, row);
 800cbae:	79bb      	ldrb	r3, [r7, #6]
 800cbb0:	3305      	adds	r3, #5
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	79fa      	ldrb	r2, [r7, #7]
 800cbb6:	4611      	mov	r1, r2
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 f947 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800cbbe:	2001      	movs	r0, #1
 800cbc0:	f000 f9b5 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(5, eGeo);
 800cbc4:	4916      	ldr	r1, [pc, #88]	; (800cc20 <printDaicadet+0x110>)
 800cbc6:	2005      	movs	r0, #5
 800cbc8:	f000 f988 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800cbcc:	79bb      	ldrb	r3, [r7, #6]
 800cbce:	3306      	adds	r3, #6
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	79fa      	ldrb	r2, [r7, #7]
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f938 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800cbdc:	2005      	movs	r0, #5
 800cbde:	f000 f9a6 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_CreateSpecialChar(6, tGeo);
 800cbe2:	4910      	ldr	r1, [pc, #64]	; (800cc24 <printDaicadet+0x114>)
 800cbe4:	2006      	movs	r0, #6
 800cbe6:	f000 f979 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+7, row);
 800cbea:	79bb      	ldrb	r3, [r7, #6]
 800cbec:	3307      	adds	r3, #7
 800cbee:	b2db      	uxtb	r3, r3
 800cbf0:	79fa      	ldrb	r2, [r7, #7]
 800cbf2:	4611      	mov	r1, r2
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f000 f929 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800cbfa:	2006      	movs	r0, #6
 800cbfc:	f000 f997 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_PrintStr("!");
 800cc00:	4809      	ldr	r0, [pc, #36]	; (800cc28 <printDaicadet+0x118>)
 800cc02:	f000 f9a1 	bl	800cf48 <HD44780_PrintStr>
}
 800cc06:	bf00      	nop
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}
 800cc0e:	bf00      	nop
 800cc10:	20000018 	.word	0x20000018
 800cc14:	20000020 	.word	0x20000020
 800cc18:	20000030 	.word	0x20000030
 800cc1c:	20000040 	.word	0x20000040
 800cc20:	20000068 	.word	0x20000068
 800cc24:	20000048 	.word	0x20000048
 800cc28:	0801462c 	.word	0x0801462c

0800cc2c <printBalansi>:
	HD44780_SetCursor(column+8, row);
	HD44780_PrintSpecialChar(8);
	HD44780_PrintStr("!");
}

void printBalansi(uint8_t row, uint8_t column){
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	4603      	mov	r3, r0
 800cc34:	460a      	mov	r2, r1
 800cc36:	71fb      	strb	r3, [r7, #7]
 800cc38:	4613      	mov	r3, r2
 800cc3a:	71bb      	strb	r3, [r7, #6]
	HD44780_Clear();
 800cc3c:	f000 f8f0 	bl	800ce20 <HD44780_Clear>
	HD44780_CreateSpecialChar(1, bGeo);
 800cc40:	4934      	ldr	r1, [pc, #208]	; (800cd14 <printBalansi+0xe8>)
 800cc42:	2001      	movs	r0, #1
 800cc44:	f000 f94a 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column, row);
 800cc48:	79fa      	ldrb	r2, [r7, #7]
 800cc4a:	79bb      	ldrb	r3, [r7, #6]
 800cc4c:	4611      	mov	r1, r2
 800cc4e:	4618      	mov	r0, r3
 800cc50:	f000 f8fc 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(1);
 800cc54:	2001      	movs	r0, #1
 800cc56:	f000 f96a 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(2, aGeo);
 800cc5a:	492f      	ldr	r1, [pc, #188]	; (800cd18 <printBalansi+0xec>)
 800cc5c:	2002      	movs	r0, #2
 800cc5e:	f000 f93d 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+1, row);
 800cc62:	79bb      	ldrb	r3, [r7, #6]
 800cc64:	3301      	adds	r3, #1
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	79fa      	ldrb	r2, [r7, #7]
 800cc6a:	4611      	mov	r1, r2
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f000 f8ed 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(2);
 800cc72:	2002      	movs	r0, #2
 800cc74:	f000 f95b 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(3, lGeo);
 800cc78:	4928      	ldr	r1, [pc, #160]	; (800cd1c <printBalansi+0xf0>)
 800cc7a:	2003      	movs	r0, #3
 800cc7c:	f000 f92e 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+2, row);
 800cc80:	79bb      	ldrb	r3, [r7, #6]
 800cc82:	3302      	adds	r3, #2
 800cc84:	b2db      	uxtb	r3, r3
 800cc86:	79fa      	ldrb	r2, [r7, #7]
 800cc88:	4611      	mov	r1, r2
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f000 f8de 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(3);
 800cc90:	2003      	movs	r0, #3
 800cc92:	f000 f94c 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_PrintSpecialChar(2);
 800cc96:	2002      	movs	r0, #2
 800cc98:	f000 f949 	bl	800cf2e <HD44780_PrintSpecialChar>
	HD44780_SetCursor(column+3, row);
 800cc9c:	79bb      	ldrb	r3, [r7, #6]
 800cc9e:	3303      	adds	r3, #3
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	79fa      	ldrb	r2, [r7, #7]
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f000 f8d0 	bl	800ce4c <HD44780_SetCursor>

	HD44780_CreateSpecialChar(5, nGeo);
 800ccac:	491c      	ldr	r1, [pc, #112]	; (800cd20 <printBalansi+0xf4>)
 800ccae:	2005      	movs	r0, #5
 800ccb0:	f000 f914 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+4, row);
 800ccb4:	79bb      	ldrb	r3, [r7, #6]
 800ccb6:	3304      	adds	r3, #4
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	79fa      	ldrb	r2, [r7, #7]
 800ccbc:	4611      	mov	r1, r2
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	f000 f8c4 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(5);
 800ccc4:	2005      	movs	r0, #5
 800ccc6:	f000 f932 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(6, sGeo);
 800ccca:	4916      	ldr	r1, [pc, #88]	; (800cd24 <printBalansi+0xf8>)
 800cccc:	2006      	movs	r0, #6
 800ccce:	f000 f905 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+5, row);
 800ccd2:	79bb      	ldrb	r3, [r7, #6]
 800ccd4:	3305      	adds	r3, #5
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	79fa      	ldrb	r2, [r7, #7]
 800ccda:	4611      	mov	r1, r2
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 f8b5 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(6);
 800cce2:	2006      	movs	r0, #6
 800cce4:	f000 f923 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_CreateSpecialChar(7, iGeo);
 800cce8:	490f      	ldr	r1, [pc, #60]	; (800cd28 <printBalansi+0xfc>)
 800ccea:	2007      	movs	r0, #7
 800ccec:	f000 f8f6 	bl	800cedc <HD44780_CreateSpecialChar>
	HD44780_SetCursor(column+6, row);
 800ccf0:	79bb      	ldrb	r3, [r7, #6]
 800ccf2:	3306      	adds	r3, #6
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	79fa      	ldrb	r2, [r7, #7]
 800ccf8:	4611      	mov	r1, r2
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	f000 f8a6 	bl	800ce4c <HD44780_SetCursor>
	HD44780_PrintSpecialChar(7);
 800cd00:	2007      	movs	r0, #7
 800cd02:	f000 f914 	bl	800cf2e <HD44780_PrintSpecialChar>

	HD44780_PrintStr(": ");
 800cd06:	4809      	ldr	r0, [pc, #36]	; (800cd2c <printBalansi+0x100>)
 800cd08:	f000 f91e 	bl	800cf48 <HD44780_PrintStr>
}
 800cd0c:	bf00      	nop
 800cd0e:	3708      	adds	r7, #8
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}
 800cd14:	20000028 	.word	0x20000028
 800cd18:	20000020 	.word	0x20000020
 800cd1c:	20000038 	.word	0x20000038
 800cd20:	20000000 	.word	0x20000000
 800cd24:	20000008 	.word	0x20000008
 800cd28:	20000030 	.word	0x20000030
 800cd2c:	08014640 	.word	0x08014640

0800cd30 <HD44780_Init>:
static void DelayUS(uint32_t);



void HD44780_Init(uint8_t rows)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b082      	sub	sp, #8
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	4603      	mov	r3, r0
 800cd38:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800cd3a:	4a34      	ldr	r2, [pc, #208]	; (800ce0c <HD44780_Init+0xdc>)
 800cd3c:	79fb      	ldrb	r3, [r7, #7]
 800cd3e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 800cd40:	4b33      	ldr	r3, [pc, #204]	; (800ce10 <HD44780_Init+0xe0>)
 800cd42:	2208      	movs	r2, #8
 800cd44:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800cd46:	4b33      	ldr	r3, [pc, #204]	; (800ce14 <HD44780_Init+0xe4>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800cd4c:	4b2f      	ldr	r3, [pc, #188]	; (800ce0c <HD44780_Init+0xdc>)
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d907      	bls.n	800cd64 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800cd54:	4b2f      	ldr	r3, [pc, #188]	; (800ce14 <HD44780_Init+0xe4>)
 800cd56:	781b      	ldrb	r3, [r3, #0]
 800cd58:	f043 0308 	orr.w	r3, r3, #8
 800cd5c:	b2da      	uxtb	r2, r3
 800cd5e:	4b2d      	ldr	r3, [pc, #180]	; (800ce14 <HD44780_Init+0xe4>)
 800cd60:	701a      	strb	r2, [r3, #0]
 800cd62:	e006      	b.n	800cd72 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800cd64:	4b2b      	ldr	r3, [pc, #172]	; (800ce14 <HD44780_Init+0xe4>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	f043 0304 	orr.w	r3, r3, #4
 800cd6c:	b2da      	uxtb	r2, r3
 800cd6e:	4b29      	ldr	r3, [pc, #164]	; (800ce14 <HD44780_Init+0xe4>)
 800cd70:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800cd72:	f000 f987 	bl	800d084 <DelayInit>
  HAL_Delay(50);
 800cd76:	2032      	movs	r0, #50	; 0x32
 800cd78:	f001 fe86 	bl	800ea88 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800cd7c:	4b24      	ldr	r3, [pc, #144]	; (800ce10 <HD44780_Init+0xe0>)
 800cd7e:	781b      	ldrb	r3, [r3, #0]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f000 f945 	bl	800d010 <ExpanderWrite>
  HAL_Delay(1000);
 800cd86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cd8a:	f001 fe7d 	bl	800ea88 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800cd8e:	2030      	movs	r0, #48	; 0x30
 800cd90:	f000 f92c 	bl	800cfec <Write4Bits>
  DelayUS(4500);
 800cd94:	f241 1094 	movw	r0, #4500	; 0x1194
 800cd98:	f000 f99c 	bl	800d0d4 <DelayUS>

  Write4Bits(0x03 << 4);
 800cd9c:	2030      	movs	r0, #48	; 0x30
 800cd9e:	f000 f925 	bl	800cfec <Write4Bits>
  DelayUS(4500);
 800cda2:	f241 1094 	movw	r0, #4500	; 0x1194
 800cda6:	f000 f995 	bl	800d0d4 <DelayUS>

  Write4Bits(0x03 << 4);
 800cdaa:	2030      	movs	r0, #48	; 0x30
 800cdac:	f000 f91e 	bl	800cfec <Write4Bits>
  DelayUS(4500);
 800cdb0:	f241 1094 	movw	r0, #4500	; 0x1194
 800cdb4:	f000 f98e 	bl	800d0d4 <DelayUS>

  Write4Bits(0x02 << 4);
 800cdb8:	2020      	movs	r0, #32
 800cdba:	f000 f917 	bl	800cfec <Write4Bits>
  DelayUS(100);
 800cdbe:	2064      	movs	r0, #100	; 0x64
 800cdc0:	f000 f988 	bl	800d0d4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 800cdc4:	4b13      	ldr	r3, [pc, #76]	; (800ce14 <HD44780_Init+0xe4>)
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	f043 0320 	orr.w	r3, r3, #32
 800cdcc:	b2db      	uxtb	r3, r3
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f000 f8cf 	bl	800cf72 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800cdd4:	4b10      	ldr	r3, [pc, #64]	; (800ce18 <HD44780_Init+0xe8>)
 800cdd6:	2204      	movs	r2, #4
 800cdd8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 800cdda:	f000 f869 	bl	800ceb0 <HD44780_Display>
  HD44780_Clear();
 800cdde:	f000 f81f 	bl	800ce20 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800cde2:	4b0e      	ldr	r3, [pc, #56]	; (800ce1c <HD44780_Init+0xec>)
 800cde4:	2202      	movs	r2, #2
 800cde6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 800cde8:	4b0c      	ldr	r3, [pc, #48]	; (800ce1c <HD44780_Init+0xec>)
 800cdea:	781b      	ldrb	r3, [r3, #0]
 800cdec:	f043 0304 	orr.w	r3, r3, #4
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 f8bd 	bl	800cf72 <SendCommand>
  DelayUS(4500);
 800cdf8:	f241 1094 	movw	r0, #4500	; 0x1194
 800cdfc:	f000 f96a 	bl	800d0d4 <DelayUS>



  HD44780_Home();
 800ce00:	f000 f819 	bl	800ce36 <HD44780_Home>
}
 800ce04:	bf00      	nop
 800ce06:	3708      	adds	r7, #8
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}
 800ce0c:	200003c3 	.word	0x200003c3
 800ce10:	200003c4 	.word	0x200003c4
 800ce14:	200003c0 	.word	0x200003c0
 800ce18:	200003c1 	.word	0x200003c1
 800ce1c:	200003c2 	.word	0x200003c2

0800ce20 <HD44780_Clear>:

void HD44780_Clear()
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800ce24:	2001      	movs	r0, #1
 800ce26:	f000 f8a4 	bl	800cf72 <SendCommand>
  DelayUS(2000);
 800ce2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ce2e:	f000 f951 	bl	800d0d4 <DelayUS>
}
 800ce32:	bf00      	nop
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <HD44780_Home>:

void HD44780_Home()
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800ce3a:	2002      	movs	r0, #2
 800ce3c:	f000 f899 	bl	800cf72 <SendCommand>
  DelayUS(2000);
 800ce40:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ce44:	f000 f946 	bl	800d0d4 <DelayUS>
}
 800ce48:	bf00      	nop
 800ce4a:	bd80      	pop	{r7, pc}

0800ce4c <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 800ce4c:	b590      	push	{r4, r7, lr}
 800ce4e:	b087      	sub	sp, #28
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	4603      	mov	r3, r0
 800ce54:	460a      	mov	r2, r1
 800ce56:	71fb      	strb	r3, [r7, #7]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 800ce5c:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <HD44780_SetCursor+0x5c>)
 800ce5e:	f107 0408 	add.w	r4, r7, #8
 800ce62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ce64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800ce68:	4b10      	ldr	r3, [pc, #64]	; (800ceac <HD44780_SetCursor+0x60>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	79ba      	ldrb	r2, [r7, #6]
 800ce6e:	429a      	cmp	r2, r3
 800ce70:	d303      	bcc.n	800ce7a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800ce72:	4b0e      	ldr	r3, [pc, #56]	; (800ceac <HD44780_SetCursor+0x60>)
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	3b01      	subs	r3, #1
 800ce78:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800ce7a:	79bb      	ldrb	r3, [r7, #6]
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	3318      	adds	r3, #24
 800ce80:	443b      	add	r3, r7
 800ce82:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	b25b      	sxtb	r3, r3
 800ce90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ce94:	b25b      	sxtb	r3, r3
 800ce96:	b2db      	uxtb	r3, r3
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 f86a 	bl	800cf72 <SendCommand>
}
 800ce9e:	bf00      	nop
 800cea0:	371c      	adds	r7, #28
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd90      	pop	{r4, r7, pc}
 800cea6:	bf00      	nop
 800cea8:	08014644 	.word	0x08014644
 800ceac:	200003c3 	.word	0x200003c3

0800ceb0 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 800ceb4:	4b08      	ldr	r3, [pc, #32]	; (800ced8 <HD44780_Display+0x28>)
 800ceb6:	781b      	ldrb	r3, [r3, #0]
 800ceb8:	f043 0304 	orr.w	r3, r3, #4
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	4b06      	ldr	r3, [pc, #24]	; (800ced8 <HD44780_Display+0x28>)
 800cec0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 800cec2:	4b05      	ldr	r3, [pc, #20]	; (800ced8 <HD44780_Display+0x28>)
 800cec4:	781b      	ldrb	r3, [r3, #0]
 800cec6:	f043 0308 	orr.w	r3, r3, #8
 800ceca:	b2db      	uxtb	r3, r3
 800cecc:	4618      	mov	r0, r3
 800cece:	f000 f850 	bl	800cf72 <SendCommand>
}
 800ced2:	bf00      	nop
 800ced4:	bd80      	pop	{r7, pc}
 800ced6:	bf00      	nop
 800ced8:	200003c1 	.word	0x200003c1

0800cedc <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	4603      	mov	r3, r0
 800cee4:	6039      	str	r1, [r7, #0]
 800cee6:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800cee8:	79fb      	ldrb	r3, [r7, #7]
 800ceea:	f003 0307 	and.w	r3, r3, #7
 800ceee:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800cef0:	79fb      	ldrb	r3, [r7, #7]
 800cef2:	00db      	lsls	r3, r3, #3
 800cef4:	b25b      	sxtb	r3, r3
 800cef6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cefa:	b25b      	sxtb	r3, r3
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	4618      	mov	r0, r3
 800cf00:	f000 f837 	bl	800cf72 <SendCommand>
  for (int i=0; i<8; i++)
 800cf04:	2300      	movs	r3, #0
 800cf06:	60fb      	str	r3, [r7, #12]
 800cf08:	e009      	b.n	800cf1e <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	683a      	ldr	r2, [r7, #0]
 800cf0e:	4413      	add	r3, r2
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	4618      	mov	r0, r3
 800cf14:	f000 f83b 	bl	800cf8e <SendChar>
  for (int i=0; i<8; i++)
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	3301      	adds	r3, #1
 800cf1c:	60fb      	str	r3, [r7, #12]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2b07      	cmp	r3, #7
 800cf22:	ddf2      	ble.n	800cf0a <HD44780_CreateSpecialChar+0x2e>
  }
}
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <HD44780_PrintSpecialChar>:

void HD44780_PrintSpecialChar(uint8_t index)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b082      	sub	sp, #8
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	4603      	mov	r3, r0
 800cf36:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f000 f827 	bl	800cf8e <SendChar>
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b082      	sub	sp, #8
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800cf50:	e006      	b.n	800cf60 <HD44780_PrintStr+0x18>
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	1c5a      	adds	r2, r3, #1
 800cf56:	607a      	str	r2, [r7, #4]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	f000 f817 	bl	800cf8e <SendChar>
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1f4      	bne.n	800cf52 <HD44780_PrintStr+0xa>
}
 800cf68:	bf00      	nop
 800cf6a:	bf00      	nop
 800cf6c:	3708      	adds	r7, #8
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}

0800cf72 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b082      	sub	sp, #8
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	4603      	mov	r3, r0
 800cf7a:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	2100      	movs	r1, #0
 800cf80:	4618      	mov	r0, r3
 800cf82:	f000 f812 	bl	800cfaa <Send>
}
 800cf86:	bf00      	nop
 800cf88:	3708      	adds	r7, #8
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	bd80      	pop	{r7, pc}

0800cf8e <SendChar>:

static void SendChar(uint8_t ch)
{
 800cf8e:	b580      	push	{r7, lr}
 800cf90:	b082      	sub	sp, #8
 800cf92:	af00      	add	r7, sp, #0
 800cf94:	4603      	mov	r3, r0
 800cf96:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 800cf98:	79fb      	ldrb	r3, [r7, #7]
 800cf9a:	2101      	movs	r1, #1
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 f804 	bl	800cfaa <Send>
}
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}

0800cfaa <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	460a      	mov	r2, r1
 800cfb4:	71fb      	strb	r3, [r7, #7]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	71bb      	strb	r3, [r7, #6]

  uint8_t highnib = value & 0xF0;
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	f023 030f 	bic.w	r3, r3, #15
 800cfc0:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 800cfc2:	79fb      	ldrb	r3, [r7, #7]
 800cfc4:	011b      	lsls	r3, r3, #4
 800cfc6:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800cfc8:	7bfa      	ldrb	r2, [r7, #15]
 800cfca:	79bb      	ldrb	r3, [r7, #6]
 800cfcc:	4313      	orrs	r3, r2
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 f80b 	bl	800cfec <Write4Bits>
  Write4Bits((lownib)|mode);
 800cfd6:	7bba      	ldrb	r2, [r7, #14]
 800cfd8:	79bb      	ldrb	r3, [r7, #6]
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f000 f804 	bl	800cfec <Write4Bits>
}
 800cfe4:	bf00      	nop
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	4603      	mov	r3, r0
 800cff4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800cff6:	79fb      	ldrb	r3, [r7, #7]
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 f809 	bl	800d010 <ExpanderWrite>
  PulseEnable(value);
 800cffe:	79fb      	ldrb	r3, [r7, #7]
 800d000:	4618      	mov	r0, r3
 800d002:	f000 f821 	bl	800d048 <PulseEnable>
}
 800d006:	bf00      	nop
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
	...

0800d010 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af02      	add	r7, sp, #8
 800d016:	4603      	mov	r3, r0
 800d018:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800d01a:	4b09      	ldr	r3, [pc, #36]	; (800d040 <ExpanderWrite+0x30>)
 800d01c:	781a      	ldrb	r2, [r3, #0]
 800d01e:	79fb      	ldrb	r3, [r7, #7]
 800d020:	4313      	orrs	r3, r2
 800d022:	b2db      	uxtb	r3, r3
 800d024:	73fb      	strb	r3, [r7, #15]

  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800d026:	f107 020f 	add.w	r2, r7, #15
 800d02a:	230a      	movs	r3, #10
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	2301      	movs	r3, #1
 800d030:	214e      	movs	r1, #78	; 0x4e
 800d032:	4804      	ldr	r0, [pc, #16]	; (800d044 <ExpanderWrite+0x34>)
 800d034:	f002 fa06 	bl	800f444 <HAL_I2C_Master_Transmit>

}
 800d038:	bf00      	nop
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	200003c4 	.word	0x200003c4
 800d044:	20000584 	.word	0x20000584

0800d048 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	4603      	mov	r3, r0
 800d050:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800d052:	79fb      	ldrb	r3, [r7, #7]
 800d054:	f043 0304 	orr.w	r3, r3, #4
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7ff ffd8 	bl	800d010 <ExpanderWrite>
  DelayUS(20);
 800d060:	2014      	movs	r0, #20
 800d062:	f000 f837 	bl	800d0d4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	f023 0304 	bic.w	r3, r3, #4
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	4618      	mov	r0, r3
 800d070:	f7ff ffce 	bl	800d010 <ExpanderWrite>
  DelayUS(20);
 800d074:	2014      	movs	r0, #20
 800d076:	f000 f82d 	bl	800d0d4 <DelayUS>
}
 800d07a:	bf00      	nop
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
	...

0800d084 <DelayInit>:

static void DelayInit(void)
{
 800d084:	b480      	push	{r7}
 800d086:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 800d088:	4b10      	ldr	r3, [pc, #64]	; (800d0cc <DelayInit+0x48>)
 800d08a:	68db      	ldr	r3, [r3, #12]
 800d08c:	4a0f      	ldr	r2, [pc, #60]	; (800d0cc <DelayInit+0x48>)
 800d08e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d092:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 800d094:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <DelayInit+0x48>)
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	4a0c      	ldr	r2, [pc, #48]	; (800d0cc <DelayInit+0x48>)
 800d09a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d09e:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800d0a0:	4b0b      	ldr	r3, [pc, #44]	; (800d0d0 <DelayInit+0x4c>)
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	4a0a      	ldr	r2, [pc, #40]	; (800d0d0 <DelayInit+0x4c>)
 800d0a6:	f023 0301 	bic.w	r3, r3, #1
 800d0aa:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 800d0ac:	4b08      	ldr	r3, [pc, #32]	; (800d0d0 <DelayInit+0x4c>)
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4a07      	ldr	r2, [pc, #28]	; (800d0d0 <DelayInit+0x4c>)
 800d0b2:	f043 0301 	orr.w	r3, r3, #1
 800d0b6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800d0b8:	4b05      	ldr	r3, [pc, #20]	; (800d0d0 <DelayInit+0x4c>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 800d0be:	bf00      	nop
  __ASM volatile ("NOP");
 800d0c0:	bf00      	nop
  __ASM volatile ("NOP");
 800d0c2:	bf00      	nop
}
 800d0c4:	bf00      	nop
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bc80      	pop	{r7}
 800d0ca:	4770      	bx	lr
 800d0cc:	e000edf0 	.word	0xe000edf0
 800d0d0:	e0001000 	.word	0xe0001000

0800d0d4 <DelayUS>:

static void DelayUS(uint32_t us) {
 800d0d4:	b480      	push	{r7}
 800d0d6:	b087      	sub	sp, #28
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 800d0dc:	4b0d      	ldr	r3, [pc, #52]	; (800d114 <DelayUS+0x40>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	4a0d      	ldr	r2, [pc, #52]	; (800d118 <DelayUS+0x44>)
 800d0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e6:	0c9a      	lsrs	r2, r3, #18
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	fb02 f303 	mul.w	r3, r2, r3
 800d0ee:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 800d0f0:	4b0a      	ldr	r3, [pc, #40]	; (800d11c <DelayUS+0x48>)
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800d0f6:	4b09      	ldr	r3, [pc, #36]	; (800d11c <DelayUS+0x48>)
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	1ad3      	subs	r3, r2, r3
 800d0fe:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	697a      	ldr	r2, [r7, #20]
 800d104:	429a      	cmp	r2, r3
 800d106:	d8f6      	bhi.n	800d0f6 <DelayUS+0x22>
}
 800d108:	bf00      	nop
 800d10a:	bf00      	nop
 800d10c:	371c      	adds	r7, #28
 800d10e:	46bd      	mov	sp, r7
 800d110:	bc80      	pop	{r7}
 800d112:	4770      	bx	lr
 800d114:	20000078 	.word	0x20000078
 800d118:	431bde83 	.word	0x431bde83
 800d11c:	e0001000 	.word	0xe0001000

0800d120 <HAL_UART_RxCpltCallback>:
osThreadId process_statusHandle;
osThreadId postenabledHandle;
//osSemaphoreId semaphore_to_do_postHandle;
/* USER CODE BEGIN PV */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]

BaseType_t xHigherPriorityTaskWoken;

  if (huart->Instance == USART1)
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a1d      	ldr	r2, [pc, #116]	; (800d1a4 <HAL_UART_RxCpltCallback+0x84>)
 800d12e:	4293      	cmp	r3, r2
 800d130:	d134      	bne.n	800d19c <HAL_UART_RxCpltCallback+0x7c>
  {
	xHigherPriorityTaskWoken = pdFALSE;
 800d132:	2300      	movs	r3, #0
 800d134:	60fb      	str	r3, [r7, #12]
	if(c == '<'){
 800d136:	4b1c      	ldr	r3, [pc, #112]	; (800d1a8 <HAL_UART_RxCpltCallback+0x88>)
 800d138:	781b      	ldrb	r3, [r3, #0]
 800d13a:	2b3c      	cmp	r3, #60	; 0x3c
 800d13c:	d102      	bne.n	800d144 <HAL_UART_RxCpltCallback+0x24>
		store_input_flag = 1;
 800d13e:	4b1b      	ldr	r3, [pc, #108]	; (800d1ac <HAL_UART_RxCpltCallback+0x8c>)
 800d140:	2201      	movs	r2, #1
 800d142:	701a      	strb	r2, [r3, #0]
	}

	if(store_input_flag){
 800d144:	4b19      	ldr	r3, [pc, #100]	; (800d1ac <HAL_UART_RxCpltCallback+0x8c>)
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d008      	beq.n	800d15e <HAL_UART_RxCpltCallback+0x3e>
		BUFFER[i++] = c;
 800d14c:	4b18      	ldr	r3, [pc, #96]	; (800d1b0 <HAL_UART_RxCpltCallback+0x90>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	1c5a      	adds	r2, r3, #1
 800d152:	4917      	ldr	r1, [pc, #92]	; (800d1b0 <HAL_UART_RxCpltCallback+0x90>)
 800d154:	600a      	str	r2, [r1, #0]
 800d156:	4a14      	ldr	r2, [pc, #80]	; (800d1a8 <HAL_UART_RxCpltCallback+0x88>)
 800d158:	7811      	ldrb	r1, [r2, #0]
 800d15a:	4a16      	ldr	r2, [pc, #88]	; (800d1b4 <HAL_UART_RxCpltCallback+0x94>)
 800d15c:	54d1      	strb	r1, [r2, r3]
	}
	if(c == '!'){
 800d15e:	4b12      	ldr	r3, [pc, #72]	; (800d1a8 <HAL_UART_RxCpltCallback+0x88>)
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	2b21      	cmp	r3, #33	; 0x21
 800d164:	d115      	bne.n	800d192 <HAL_UART_RxCpltCallback+0x72>
		store_input_flag = 0;
 800d166:	4b11      	ldr	r3, [pc, #68]	; (800d1ac <HAL_UART_RxCpltCallback+0x8c>)
 800d168:	2200      	movs	r2, #0
 800d16a:	701a      	strb	r2, [r3, #0]


		xSemaphoreGiveFromISR(semaphore_to_enable_status_process, &xHigherPriorityTaskWoken );
 800d16c:	4b12      	ldr	r3, [pc, #72]	; (800d1b8 <HAL_UART_RxCpltCallback+0x98>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f107 020c 	add.w	r2, r7, #12
 800d174:	4611      	mov	r1, r2
 800d176:	4618      	mov	r0, r3
 800d178:	f004 fdaa 	bl	8011cd0 <xQueueGiveFromISR>

		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d007      	beq.n	800d192 <HAL_UART_RxCpltCallback+0x72>
 800d182:	4b0e      	ldr	r3, [pc, #56]	; (800d1bc <HAL_UART_RxCpltCallback+0x9c>)
 800d184:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d188:	601a      	str	r2, [r3, #0]
 800d18a:	f3bf 8f4f 	dsb	sy
 800d18e:	f3bf 8f6f 	isb	sy
		//HAL_UART_Transmit(&huart1, BUFFER, strlen((char *)BUFFER), 50);
	}
	  HAL_UART_Receive_IT(&huart1, &c, 1);
 800d192:	2201      	movs	r2, #1
 800d194:	4904      	ldr	r1, [pc, #16]	; (800d1a8 <HAL_UART_RxCpltCallback+0x88>)
 800d196:	480a      	ldr	r0, [pc, #40]	; (800d1c0 <HAL_UART_RxCpltCallback+0xa0>)
 800d198:	f003 fd03 	bl	8010ba2 <HAL_UART_Receive_IT>
  }
}
 800d19c:	bf00      	nop
 800d19e:	3710      	adds	r7, #16
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd80      	pop	{r7, pc}
 800d1a4:	40013800 	.word	0x40013800
 800d1a8:	200003c6 	.word	0x200003c6
 800d1ac:	200003c5 	.word	0x200003c5
 800d1b0:	20000478 	.word	0x20000478
 800d1b4:	20000440 	.word	0x20000440
 800d1b8:	2000057c 	.word	0x2000057c
 800d1bc:	e000ed04 	.word	0xe000ed04
 800d1c0:	20000630 	.word	0x20000630

0800d1c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d1c4:	b5b0      	push	{r4, r5, r7, lr}
 800d1c6:	b096      	sub	sp, #88	; 0x58
 800d1c8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d1ca:	b672      	cpsid	i
}
 800d1cc:	bf00      	nop
  /* USER CODE BEGIN 1 */
	__disable_irq();
	SCB->VTOR = 0x800C000;
 800d1ce:	4b45      	ldr	r3, [pc, #276]	; (800d2e4 <main+0x120>)
 800d1d0:	4a45      	ldr	r2, [pc, #276]	; (800d2e8 <main+0x124>)
 800d1d2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800d1d4:	b662      	cpsie	i
}
 800d1d6:	bf00      	nop
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d1d8:	f001 fbd6 	bl	800e988 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d1dc:	f000 f8a8 	bl	800d330 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d1e0:	f000 f9a4 	bl	800d52c <MX_GPIO_Init>
  MX_I2C1_Init();
 800d1e4:	f000 f8ea 	bl	800d3bc <MX_I2C1_Init>
  MX_SPI1_Init();
 800d1e8:	f000 f916 	bl	800d418 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 800d1ec:	f000 f94a 	bl	800d484 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800d1f0:	f000 f972 	bl	800d4d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 800d1f4:	f000 feef 	bl	800dfd6 <MFRC522_Init>
  HD44780_Init(2);
 800d1f8:	2002      	movs	r0, #2
 800d1fa:	f7ff fd99 	bl	800cd30 <HD44780_Init>


  HAL_UART_Receive_IT(&huart1, &c, 1);
 800d1fe:	2201      	movs	r2, #1
 800d200:	493a      	ldr	r1, [pc, #232]	; (800d2ec <main+0x128>)
 800d202:	483b      	ldr	r0, [pc, #236]	; (800d2f0 <main+0x12c>)
 800d204:	f003 fccd 	bl	8010ba2 <HAL_UART_Receive_IT>

  version = *(__IO uint32_t *)versionAdress; // for version check
 800d208:	4b3a      	ldr	r3, [pc, #232]	; (800d2f4 <main+0x130>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a3a      	ldr	r2, [pc, #232]	; (800d2f8 <main+0x134>)
 800d20e:	6013      	str	r3, [r2, #0]
  terminalID = *(uint64_t *)currentTerminalADRR;
 800d210:	4b3a      	ldr	r3, [pc, #232]	; (800d2fc <main+0x138>)
 800d212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d216:	493a      	ldr	r1, [pc, #232]	; (800d300 <main+0x13c>)
 800d218:	e9c1 2300 	strd	r2, r3, [r1]
  terminalStr = convertNumberToCharArray(terminalID);
 800d21c:	4b38      	ldr	r3, [pc, #224]	; (800d300 <main+0x13c>)
 800d21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d222:	4610      	mov	r0, r2
 800d224:	4619      	mov	r1, r3
 800d226:	f7ff f91f 	bl	800c468 <convertNumberToCharArray>
 800d22a:	4603      	mov	r3, r0
 800d22c:	4a35      	ldr	r2, [pc, #212]	; (800d304 <main+0x140>)
 800d22e:	6013      	str	r3, [r2, #0]
//
 sprintf((char*) MQTT_CHECK_DATA, "{\"operationType\":\"check\",\"content\":{\"terminalID\":\"%s\",\"firmwareVersion\":%ld}}",terminalStr, version);
 800d230:	4b34      	ldr	r3, [pc, #208]	; (800d304 <main+0x140>)
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	4b30      	ldr	r3, [pc, #192]	; (800d2f8 <main+0x134>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4933      	ldr	r1, [pc, #204]	; (800d308 <main+0x144>)
 800d23a:	4834      	ldr	r0, [pc, #208]	; (800d30c <main+0x148>)
 800d23c:	f006 fdc2 	bl	8013dc4 <siprintf>
  /* definition and creation of semaphore_to_do_post */
//  osSemaphoreDef(semaphore_to_do_post);
//  semaphore_to_do_postHandle = osSemaphoreCreate(osSemaphore(semaphore_to_do_post), 1);

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  semaphore_to_enable_status_process =  xSemaphoreCreateBinary();
 800d240:	2203      	movs	r2, #3
 800d242:	2100      	movs	r1, #0
 800d244:	2001      	movs	r0, #1
 800d246:	f004 fbe7 	bl	8011a18 <xQueueGenericCreate>
 800d24a:	4603      	mov	r3, r0
 800d24c:	4a30      	ldr	r2, [pc, #192]	; (800d310 <main+0x14c>)
 800d24e:	6013      	str	r3, [r2, #0]
  semaphore_to_do_post = xSemaphoreCreateBinary();
 800d250:	2203      	movs	r2, #3
 800d252:	2100      	movs	r1, #0
 800d254:	2001      	movs	r0, #1
 800d256:	f004 fbdf 	bl	8011a18 <xQueueGenericCreate>
 800d25a:	4603      	mov	r3, r0
 800d25c:	4a2d      	ldr	r2, [pc, #180]	; (800d314 <main+0x150>)
 800d25e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of read_cards */
  osThreadDef(read_cards, read_card_task, osPriorityNormal, 0, 512);
 800d260:	4b2d      	ldr	r3, [pc, #180]	; (800d318 <main+0x154>)
 800d262:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800d266:	461d      	mov	r5, r3
 800d268:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d26a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d26c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  read_cardsHandle = osThreadCreate(osThread(read_cards), NULL);
 800d274:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d278:	2100      	movs	r1, #0
 800d27a:	4618      	mov	r0, r3
 800d27c:	f004 fa54 	bl	8011728 <osThreadCreate>
 800d280:	4603      	mov	r3, r0
 800d282:	4a26      	ldr	r2, [pc, #152]	; (800d31c <main+0x158>)
 800d284:	6013      	str	r3, [r2, #0]

  /* definition and creation of process_status */
  osThreadDef(process_status, process_status_task, osPriorityAboveNormal, 0, 512);
 800d286:	4b26      	ldr	r3, [pc, #152]	; (800d320 <main+0x15c>)
 800d288:	f107 0420 	add.w	r4, r7, #32
 800d28c:	461d      	mov	r5, r3
 800d28e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d292:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d296:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  process_statusHandle = osThreadCreate(osThread(process_status), NULL);
 800d29a:	f107 0320 	add.w	r3, r7, #32
 800d29e:	2100      	movs	r1, #0
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f004 fa41 	bl	8011728 <osThreadCreate>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	4a1e      	ldr	r2, [pc, #120]	; (800d324 <main+0x160>)
 800d2aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of postenabled */
  osThreadDef(postenabled, send_card_data_MQTT, osPriorityAboveNormal, 0, 512);
 800d2ac:	4b1e      	ldr	r3, [pc, #120]	; (800d328 <main+0x164>)
 800d2ae:	1d3c      	adds	r4, r7, #4
 800d2b0:	461d      	mov	r5, r3
 800d2b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d2ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  postenabledHandle = osThreadCreate(osThread(postenabled), NULL);
 800d2be:	1d3b      	adds	r3, r7, #4
 800d2c0:	2100      	movs	r1, #0
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f004 fa30 	bl	8011728 <osThreadCreate>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	4a18      	ldr	r2, [pc, #96]	; (800d32c <main+0x168>)
 800d2cc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  printMiadetBarati(0, 2);
 800d2ce:	2102      	movs	r1, #2
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	f7ff fabf 	bl	800c854 <printMiadetBarati>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800d2d6:	f004 fa20 	bl	801171a <osKernelStart>
 800d2da:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3758      	adds	r7, #88	; 0x58
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bdb0      	pop	{r4, r5, r7, pc}
 800d2e4:	e000ed00 	.word	0xe000ed00
 800d2e8:	0800c000 	.word	0x0800c000
 800d2ec:	200003c6 	.word	0x200003c6
 800d2f0:	20000630 	.word	0x20000630
 800d2f4:	0800bff0 	.word	0x0800bff0
 800d2f8:	200003c8 	.word	0x200003c8
 800d2fc:	0800b000 	.word	0x0800b000
 800d300:	200003d0 	.word	0x200003d0
 800d304:	200003d8 	.word	0x200003d8
 800d308:	0801467c 	.word	0x0801467c
 800d30c:	200003dc 	.word	0x200003dc
 800d310:	2000057c 	.word	0x2000057c
 800d314:	20000580 	.word	0x20000580
 800d318:	080146cc 	.word	0x080146cc
 800d31c:	200006c0 	.word	0x200006c0
 800d320:	080146e8 	.word	0x080146e8
 800d324:	200006c4 	.word	0x200006c4
 800d328:	08014704 	.word	0x08014704
 800d32c:	200006c8 	.word	0x200006c8

0800d330 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b090      	sub	sp, #64	; 0x40
 800d334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d336:	f107 0318 	add.w	r3, r7, #24
 800d33a:	2228      	movs	r2, #40	; 0x28
 800d33c:	2100      	movs	r1, #0
 800d33e:	4618      	mov	r0, r3
 800d340:	f006 fbe2 	bl	8013b08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d344:	1d3b      	adds	r3, r7, #4
 800d346:	2200      	movs	r2, #0
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	605a      	str	r2, [r3, #4]
 800d34c:	609a      	str	r2, [r3, #8]
 800d34e:	60da      	str	r2, [r3, #12]
 800d350:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d352:	2301      	movs	r3, #1
 800d354:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d356:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d35a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800d35c:	2300      	movs	r3, #0
 800d35e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800d360:	2301      	movs	r3, #1
 800d362:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d364:	2302      	movs	r3, #2
 800d366:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d368:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d36c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800d36e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800d372:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d374:	f107 0318 	add.w	r3, r7, #24
 800d378:	4618      	mov	r0, r3
 800d37a:	f002 fc55 	bl	800fc28 <HAL_RCC_OscConfig>
 800d37e:	4603      	mov	r3, r0
 800d380:	2b00      	cmp	r3, #0
 800d382:	d001      	beq.n	800d388 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800d384:	f000 fb08 	bl	800d998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d388:	230f      	movs	r3, #15
 800d38a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d38c:	2302      	movs	r3, #2
 800d38e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d390:	2300      	movs	r3, #0
 800d392:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800d394:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d398:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800d39a:	2300      	movs	r3, #0
 800d39c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800d39e:	1d3b      	adds	r3, r7, #4
 800d3a0:	2102      	movs	r1, #2
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	f002 fec2 	bl	801012c <HAL_RCC_ClockConfig>
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d001      	beq.n	800d3b2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800d3ae:	f000 faf3 	bl	800d998 <Error_Handler>
  }
}
 800d3b2:	bf00      	nop
 800d3b4:	3740      	adds	r7, #64	; 0x40
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
	...

0800d3bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d3c0:	4b12      	ldr	r3, [pc, #72]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3c2:	4a13      	ldr	r2, [pc, #76]	; (800d410 <MX_I2C1_Init+0x54>)
 800d3c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d3c6:	4b11      	ldr	r3, [pc, #68]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3c8:	4a12      	ldr	r2, [pc, #72]	; (800d414 <MX_I2C1_Init+0x58>)
 800d3ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d3cc:	4b0f      	ldr	r3, [pc, #60]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d3d2:	4b0e      	ldr	r3, [pc, #56]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d3d8:	4b0c      	ldr	r3, [pc, #48]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d3de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d3e6:	4b09      	ldr	r3, [pc, #36]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d3ec:	4b07      	ldr	r3, [pc, #28]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d3f2:	4b06      	ldr	r3, [pc, #24]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d3f8:	4804      	ldr	r0, [pc, #16]	; (800d40c <MX_I2C1_Init+0x50>)
 800d3fa:	f001 fedf 	bl	800f1bc <HAL_I2C_Init>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d001      	beq.n	800d408 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d404:	f000 fac8 	bl	800d998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800d408:	bf00      	nop
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	20000584 	.word	0x20000584
 800d410:	40005400 	.word	0x40005400
 800d414:	000186a0 	.word	0x000186a0

0800d418 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800d41c:	4b17      	ldr	r3, [pc, #92]	; (800d47c <MX_SPI1_Init+0x64>)
 800d41e:	4a18      	ldr	r2, [pc, #96]	; (800d480 <MX_SPI1_Init+0x68>)
 800d420:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800d422:	4b16      	ldr	r3, [pc, #88]	; (800d47c <MX_SPI1_Init+0x64>)
 800d424:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d428:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800d42a:	4b14      	ldr	r3, [pc, #80]	; (800d47c <MX_SPI1_Init+0x64>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800d430:	4b12      	ldr	r3, [pc, #72]	; (800d47c <MX_SPI1_Init+0x64>)
 800d432:	2200      	movs	r2, #0
 800d434:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d436:	4b11      	ldr	r3, [pc, #68]	; (800d47c <MX_SPI1_Init+0x64>)
 800d438:	2200      	movs	r2, #0
 800d43a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d43c:	4b0f      	ldr	r3, [pc, #60]	; (800d47c <MX_SPI1_Init+0x64>)
 800d43e:	2200      	movs	r2, #0
 800d440:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800d442:	4b0e      	ldr	r3, [pc, #56]	; (800d47c <MX_SPI1_Init+0x64>)
 800d444:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d448:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800d44a:	4b0c      	ldr	r3, [pc, #48]	; (800d47c <MX_SPI1_Init+0x64>)
 800d44c:	2218      	movs	r2, #24
 800d44e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d450:	4b0a      	ldr	r3, [pc, #40]	; (800d47c <MX_SPI1_Init+0x64>)
 800d452:	2200      	movs	r2, #0
 800d454:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800d456:	4b09      	ldr	r3, [pc, #36]	; (800d47c <MX_SPI1_Init+0x64>)
 800d458:	2200      	movs	r2, #0
 800d45a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d45c:	4b07      	ldr	r3, [pc, #28]	; (800d47c <MX_SPI1_Init+0x64>)
 800d45e:	2200      	movs	r2, #0
 800d460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800d462:	4b06      	ldr	r3, [pc, #24]	; (800d47c <MX_SPI1_Init+0x64>)
 800d464:	220a      	movs	r2, #10
 800d466:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800d468:	4804      	ldr	r0, [pc, #16]	; (800d47c <MX_SPI1_Init+0x64>)
 800d46a:	f002 ffed 	bl	8010448 <HAL_SPI_Init>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800d474:	f000 fa90 	bl	800d998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  /* USER CODE END SPI1_Init 2 */

}
 800d478:	bf00      	nop
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	200005d8 	.word	0x200005d8
 800d480:	40013000 	.word	0x40013000

0800d484 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_Init 0 */
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800d488:	4b11      	ldr	r3, [pc, #68]	; (800d4d0 <MX_USART1_UART_Init+0x4c>)
 800d48a:	4a12      	ldr	r2, [pc, #72]	; (800d4d4 <MX_USART1_UART_Init+0x50>)
 800d48c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800d48e:	4b10      	ldr	r3, [pc, #64]	; (800d4d0 <MX_USART1_UART_Init+0x4c>)
 800d490:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d494:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800d496:	4b0e      	ldr	r3, [pc, #56]	; (800d4d0 <MX_USART1_UART_Init+0x4c>)
 800d498:	2200      	movs	r2, #0
 800d49a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800d49c:	4b0c      	ldr	r3, [pc, #48]	; (800d4d0 <MX_USART1_UART_Init+0x4c>)
 800d49e:	2200      	movs	r2, #0
 800d4a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800d4a2:	4b0b      	ldr	r3, [pc, #44]	; (800d4d0 <MX_USART1_UART_Init+0x4c>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800d4a8:	4b09      	ldr	r3, [pc, #36]	; (800d4d0 <MX_USART1_UART_Init+0x4c>)
 800d4aa:	220c      	movs	r2, #12
 800d4ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d4ae:	4b08      	ldr	r3, [pc, #32]	; (800d4d0 <MX_USART1_UART_Init+0x4c>)
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800d4b4:	4b06      	ldr	r3, [pc, #24]	; (800d4d0 <MX_USART1_UART_Init+0x4c>)
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800d4ba:	4805      	ldr	r0, [pc, #20]	; (800d4d0 <MX_USART1_UART_Init+0x4c>)
 800d4bc:	f003 fa9e 	bl	80109fc <HAL_UART_Init>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d001      	beq.n	800d4ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800d4c6:	f000 fa67 	bl	800d998 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 800d4ca:	bf00      	nop
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	20000630 	.word	0x20000630
 800d4d4:	40013800 	.word	0x40013800

0800d4d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800d4dc:	4b11      	ldr	r3, [pc, #68]	; (800d524 <MX_USART2_UART_Init+0x4c>)
 800d4de:	4a12      	ldr	r2, [pc, #72]	; (800d528 <MX_USART2_UART_Init+0x50>)
 800d4e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800d4e2:	4b10      	ldr	r3, [pc, #64]	; (800d524 <MX_USART2_UART_Init+0x4c>)
 800d4e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800d4e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800d4ea:	4b0e      	ldr	r3, [pc, #56]	; (800d524 <MX_USART2_UART_Init+0x4c>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800d4f0:	4b0c      	ldr	r3, [pc, #48]	; (800d524 <MX_USART2_UART_Init+0x4c>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800d4f6:	4b0b      	ldr	r3, [pc, #44]	; (800d524 <MX_USART2_UART_Init+0x4c>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800d4fc:	4b09      	ldr	r3, [pc, #36]	; (800d524 <MX_USART2_UART_Init+0x4c>)
 800d4fe:	220c      	movs	r2, #12
 800d500:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800d502:	4b08      	ldr	r3, [pc, #32]	; (800d524 <MX_USART2_UART_Init+0x4c>)
 800d504:	2200      	movs	r2, #0
 800d506:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800d508:	4b06      	ldr	r3, [pc, #24]	; (800d524 <MX_USART2_UART_Init+0x4c>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800d50e:	4805      	ldr	r0, [pc, #20]	; (800d524 <MX_USART2_UART_Init+0x4c>)
 800d510:	f003 fa74 	bl	80109fc <HAL_UART_Init>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800d51a:	f000 fa3d 	bl	800d998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800d51e:	bf00      	nop
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20000678 	.word	0x20000678
 800d528:	40004400 	.word	0x40004400

0800d52c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b088      	sub	sp, #32
 800d530:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d532:	f107 0310 	add.w	r3, r7, #16
 800d536:	2200      	movs	r2, #0
 800d538:	601a      	str	r2, [r3, #0]
 800d53a:	605a      	str	r2, [r3, #4]
 800d53c:	609a      	str	r2, [r3, #8]
 800d53e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d540:	4b37      	ldr	r3, [pc, #220]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d542:	699b      	ldr	r3, [r3, #24]
 800d544:	4a36      	ldr	r2, [pc, #216]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d546:	f043 0310 	orr.w	r3, r3, #16
 800d54a:	6193      	str	r3, [r2, #24]
 800d54c:	4b34      	ldr	r3, [pc, #208]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d54e:	699b      	ldr	r3, [r3, #24]
 800d550:	f003 0310 	and.w	r3, r3, #16
 800d554:	60fb      	str	r3, [r7, #12]
 800d556:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800d558:	4b31      	ldr	r3, [pc, #196]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d55a:	699b      	ldr	r3, [r3, #24]
 800d55c:	4a30      	ldr	r2, [pc, #192]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d55e:	f043 0320 	orr.w	r3, r3, #32
 800d562:	6193      	str	r3, [r2, #24]
 800d564:	4b2e      	ldr	r3, [pc, #184]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d566:	699b      	ldr	r3, [r3, #24]
 800d568:	f003 0320 	and.w	r3, r3, #32
 800d56c:	60bb      	str	r3, [r7, #8]
 800d56e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800d570:	4b2b      	ldr	r3, [pc, #172]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d572:	699b      	ldr	r3, [r3, #24]
 800d574:	4a2a      	ldr	r2, [pc, #168]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d576:	f043 0304 	orr.w	r3, r3, #4
 800d57a:	6193      	str	r3, [r2, #24]
 800d57c:	4b28      	ldr	r3, [pc, #160]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d57e:	699b      	ldr	r3, [r3, #24]
 800d580:	f003 0304 	and.w	r3, r3, #4
 800d584:	607b      	str	r3, [r7, #4]
 800d586:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800d588:	4b25      	ldr	r3, [pc, #148]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d58a:	699b      	ldr	r3, [r3, #24]
 800d58c:	4a24      	ldr	r2, [pc, #144]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d58e:	f043 0308 	orr.w	r3, r3, #8
 800d592:	6193      	str	r3, [r2, #24]
 800d594:	4b22      	ldr	r3, [pc, #136]	; (800d620 <MX_GPIO_Init+0xf4>)
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	f003 0308 	and.w	r3, r3, #8
 800d59c:	603b      	str	r3, [r7, #0]
 800d59e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d5a6:	481f      	ldr	r0, [pc, #124]	; (800d624 <MX_GPIO_Init+0xf8>)
 800d5a8:	f001 fdd6 	bl	800f158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2110      	movs	r1, #16
 800d5b0:	481d      	ldr	r0, [pc, #116]	; (800d628 <MX_GPIO_Init+0xfc>)
 800d5b2:	f001 fdd1 	bl	800f158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|RELAY_Pin, GPIO_PIN_RESET);
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	2103      	movs	r1, #3
 800d5ba:	481c      	ldr	r0, [pc, #112]	; (800d62c <MX_GPIO_Init+0x100>)
 800d5bc:	f001 fdcc 	bl	800f158 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800d5c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d5c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5ce:	2302      	movs	r3, #2
 800d5d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d5d2:	f107 0310 	add.w	r3, r7, #16
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	4812      	ldr	r0, [pc, #72]	; (800d624 <MX_GPIO_Init+0xf8>)
 800d5da:	f001 fc39 	bl	800ee50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800d5de:	2310      	movs	r3, #16
 800d5e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d5ee:	f107 0310 	add.w	r3, r7, #16
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	480c      	ldr	r0, [pc, #48]	; (800d628 <MX_GPIO_Init+0xfc>)
 800d5f6:	f001 fc2b 	bl	800ee50 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin RELAY_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|RELAY_Pin;
 800d5fa:	2303      	movs	r3, #3
 800d5fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d5fe:	2301      	movs	r3, #1
 800d600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d602:	2300      	movs	r3, #0
 800d604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d606:	2302      	movs	r3, #2
 800d608:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d60a:	f107 0310 	add.w	r3, r7, #16
 800d60e:	4619      	mov	r1, r3
 800d610:	4806      	ldr	r0, [pc, #24]	; (800d62c <MX_GPIO_Init+0x100>)
 800d612:	f001 fc1d 	bl	800ee50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800d616:	bf00      	nop
 800d618:	3720      	adds	r7, #32
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}
 800d61e:	bf00      	nop
 800d620:	40021000 	.word	0x40021000
 800d624:	40011000 	.word	0x40011000
 800d628:	40010800 	.word	0x40010800
 800d62c:	40010c00 	.word	0x40010c00

0800d630 <read_card_task>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_read_card_task */
/* USER CODE END Header_read_card_task */
void read_card_task(void const * argument)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b086      	sub	sp, #24
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
//		 HAL_UART_Transmit(&huart1, MQTT_CHECK_DATA, strlen((char*)MQTT_CHECK_DATA), 50);
//
//		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
//

		uint8_t card_read_stat = cardOperationWithBlockedSector(postData);
 800d638:	4828      	ldr	r0, [pc, #160]	; (800d6dc <read_card_task+0xac>)
 800d63a:	f000 fd0d 	bl	800e058 <cardOperationWithBlockedSector>
 800d63e:	4603      	mov	r3, r0
 800d640:	73fb      	strb	r3, [r7, #15]
		 //printMiadetBarati(0, 2);
		uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800d642:	2000      	movs	r0, #0
 800d644:	f005 fb9c 	bl	8012d80 <uxTaskGetStackHighWaterMark>
 800d648:	60b8      	str	r0, [r7, #8]

		 if(card_read_stat){
 800d64a:	7bfb      	ldrb	r3, [r7, #15]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d03f      	beq.n	800d6d0 <read_card_task+0xa0>
			 uint8_t bpundCount = 0;
 800d650:	2300      	movs	r3, #0
 800d652:	75fb      	strb	r3, [r7, #23]
			 uint8_t postEnable = 0;
 800d654:	2300      	movs	r3, #0
 800d656:	75bb      	strb	r3, [r7, #22]

			 LENGTH = strlen((char*)postData);
 800d658:	4820      	ldr	r0, [pc, #128]	; (800d6dc <read_card_task+0xac>)
 800d65a:	f7fe fd79 	bl	800c150 <strlen>
 800d65e:	4603      	mov	r3, r0
 800d660:	461a      	mov	r2, r3
 800d662:	4b1f      	ldr	r3, [pc, #124]	; (800d6e0 <read_card_task+0xb0>)
 800d664:	601a      	str	r2, [r3, #0]

			 for(int i = 0; i< LENGTH+5; i++){
 800d666:	2300      	movs	r3, #0
 800d668:	613b      	str	r3, [r7, #16]
 800d66a:	e011      	b.n	800d690 <read_card_task+0x60>

				 if(postData[i]== '{' || postData[i] == '}'){
 800d66c:	4a1b      	ldr	r2, [pc, #108]	; (800d6dc <read_card_task+0xac>)
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	4413      	add	r3, r2
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	2b7b      	cmp	r3, #123	; 0x7b
 800d676:	d005      	beq.n	800d684 <read_card_task+0x54>
 800d678:	4a18      	ldr	r2, [pc, #96]	; (800d6dc <read_card_task+0xac>)
 800d67a:	693b      	ldr	r3, [r7, #16]
 800d67c:	4413      	add	r3, r2
 800d67e:	781b      	ldrb	r3, [r3, #0]
 800d680:	2b7d      	cmp	r3, #125	; 0x7d
 800d682:	d102      	bne.n	800d68a <read_card_task+0x5a>
					 bpundCount++;
 800d684:	7dfb      	ldrb	r3, [r7, #23]
 800d686:	3301      	adds	r3, #1
 800d688:	75fb      	strb	r3, [r7, #23]
			 for(int i = 0; i< LENGTH+5; i++){
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	3301      	adds	r3, #1
 800d68e:	613b      	str	r3, [r7, #16]
 800d690:	4b13      	ldr	r3, [pc, #76]	; (800d6e0 <read_card_task+0xb0>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	3304      	adds	r3, #4
 800d696:	693a      	ldr	r2, [r7, #16]
 800d698:	429a      	cmp	r2, r3
 800d69a:	dde7      	ble.n	800d66c <read_card_task+0x3c>
				 }

			 }
			 if(bpundCount != 4){
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
 800d69e:	2b04      	cmp	r3, #4
 800d6a0:	d006      	beq.n	800d6b0 <read_card_task+0x80>
				postEnable = 1;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	75bb      	strb	r3, [r7, #22]
				memset(postData, 0, sizeof(postData));
 800d6a6:	22fa      	movs	r2, #250	; 0xfa
 800d6a8:	2100      	movs	r1, #0
 800d6aa:	480c      	ldr	r0, [pc, #48]	; (800d6dc <read_card_task+0xac>)
 800d6ac:	f006 fa2c 	bl	8013b08 <memset>
			  }

			 if(postEnable == 0){
 800d6b0:	7dbb      	ldrb	r3, [r7, #22]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d10c      	bne.n	800d6d0 <read_card_task+0xa0>
				 CardReadSound();
 800d6b6:	f001 f82f 	bl	800e718 <CardReadSound>
				 uxHighWaterMark = uxTaskGetStackHighWaterMark( NULL );
 800d6ba:	2000      	movs	r0, #0
 800d6bc:	f005 fb60 	bl	8012d80 <uxTaskGetStackHighWaterMark>
 800d6c0:	60b8      	str	r0, [r7, #8]

				 xSemaphoreGive( semaphore_to_do_post );
 800d6c2:	4b08      	ldr	r3, [pc, #32]	; (800d6e4 <read_card_task+0xb4>)
 800d6c4:	6818      	ldr	r0, [r3, #0]
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	f004 fa02 	bl	8011ad4 <xQueueGenericSend>

			 }

		 }
		 osDelay(1000);
 800d6d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d6d4:	f004 f874 	bl	80117c0 <osDelay>
	for(;;){
 800d6d8:	e7ae      	b.n	800d638 <read_card_task+0x8>
 800d6da:	bf00      	nop
 800d6dc:	20000480 	.word	0x20000480
 800d6e0:	20000474 	.word	0x20000474
 800d6e4:	20000580 	.word	0x20000580

0800d6e8 <process_status_task>:
}

/* USER CODE BEGIN Header_process_status_task */
/* USER CODE END Header_process_status_task */
void process_status_task(void const * argument)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b090      	sub	sp, #64	; 0x40
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN process_status_task */
	for(;;){
		xSemaphoreTake( semaphore_to_enable_status_process, portMAX_DELAY );
 800d6f0:	4b8d      	ldr	r3, [pc, #564]	; (800d928 <process_status_task+0x240>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f04f 31ff 	mov.w	r1, #4294967295
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f004 fb77 	bl	8011dec <xQueueSemaphoreTake>
		int Status = takeStatus(BUFFER, i);
 800d6fe:	4b8b      	ldr	r3, [pc, #556]	; (800d92c <process_status_task+0x244>)
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4619      	mov	r1, r3
 800d704:	488a      	ldr	r0, [pc, #552]	; (800d930 <process_status_task+0x248>)
 800d706:	f001 f89b 	bl	800e840 <takeStatus>
 800d70a:	63f8      	str	r0, [r7, #60]	; 0x3c
		i = 0;
 800d70c:	4b87      	ldr	r3, [pc, #540]	; (800d92c <process_status_task+0x244>)
 800d70e:	2200      	movs	r2, #0
 800d710:	601a      	str	r2, [r3, #0]
		uint8_t dispData[50];
		//HAL_UART_Transmit(&huart1, BUFFER, sizeof BUFFER / sizeof BUFFER[0], 10);
		switch(Status){
 800d712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d714:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d718:	f280 80f5 	bge.w	800d906 <process_status_task+0x21e>
 800d71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d71e:	f5b3 7f91 	cmp.w	r3, #290	; 0x122
 800d722:	dc0d      	bgt.n	800d740 <process_status_task+0x58>
 800d724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d726:	2bca      	cmp	r3, #202	; 0xca
 800d728:	d026      	beq.n	800d778 <process_status_task+0x90>
 800d72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d72c:	2bca      	cmp	r3, #202	; 0xca
 800d72e:	f300 80ea 	bgt.w	800d906 <process_status_task+0x21e>
 800d732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d734:	2bc8      	cmp	r3, #200	; 0xc8
 800d736:	d049      	beq.n	800d7cc <process_status_task+0xe4>
 800d738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d73a:	2bc9      	cmp	r3, #201	; 0xc9
 800d73c:	d04c      	beq.n	800d7d8 <process_status_task+0xf0>
 800d73e:	e0e2      	b.n	800d906 <process_status_task+0x21e>
 800d740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d742:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 800d746:	2b08      	cmp	r3, #8
 800d748:	f200 80dd 	bhi.w	800d906 <process_status_task+0x21e>
 800d74c:	a201      	add	r2, pc, #4	; (adr r2, 800d754 <process_status_task+0x6c>)
 800d74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d752:	bf00      	nop
 800d754:	0800d859 	.word	0x0800d859
 800d758:	0800d907 	.word	0x0800d907
 800d75c:	0800d82f 	.word	0x0800d82f
 800d760:	0800d907 	.word	0x0800d907
 800d764:	0800d907 	.word	0x0800d907
 800d768:	0800d883 	.word	0x0800d883
 800d76c:	0800d8af 	.word	0x0800d8af
 800d770:	0800d907 	.word	0x0800d907
 800d774:	0800d8db 	.word	0x0800d8db
			case 202:
				HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
 800d778:	2102      	movs	r1, #2
 800d77a:	486e      	ldr	r0, [pc, #440]	; (800d934 <process_status_task+0x24c>)
 800d77c:	f001 fd04 	bl	800f188 <HAL_GPIO_TogglePin>
				AppruveSound();
 800d780:	f000 ff78 	bl	800e674 <AppruveSound>
				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 800d784:	2201      	movs	r2, #1
 800d786:	2102      	movs	r1, #2
 800d788:	486a      	ldr	r0, [pc, #424]	; (800d934 <process_status_task+0x24c>)
 800d78a:	f001 fce5 	bl	800f158 <HAL_GPIO_WritePin>


				prinWarmateba(0, 3);
 800d78e:	2103      	movs	r1, #3
 800d790:	2000      	movs	r0, #0
 800d792:	f7ff f92f 	bl	800c9f4 <prinWarmateba>
				insert(postData);
 800d796:	4868      	ldr	r0, [pc, #416]	; (800d938 <process_status_task+0x250>)
 800d798:	f001 f80c 	bl	800e7b4 <insert>

				LENGTH = strlen((char*)postData);
 800d79c:	4866      	ldr	r0, [pc, #408]	; (800d938 <process_status_task+0x250>)
 800d79e:	f7fe fcd7 	bl	800c150 <strlen>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	4b65      	ldr	r3, [pc, #404]	; (800d93c <process_status_task+0x254>)
 800d7a8:	601a      	str	r2, [r3, #0]
				MQTTPubToTopic(LENGTH);
 800d7aa:	4b64      	ldr	r3, [pc, #400]	; (800d93c <process_status_task+0x254>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f000 f8f8 	bl	800d9a4 <MQTTPubToTopic>
				HAL_Delay(10);
 800d7b4:	200a      	movs	r0, #10
 800d7b6:	f001 f967 	bl	800ea88 <HAL_Delay>
				HAL_UART_Transmit(&huart1, postData, LENGTH, 10);
 800d7ba:	4b60      	ldr	r3, [pc, #384]	; (800d93c <process_status_task+0x254>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	230a      	movs	r3, #10
 800d7c2:	495d      	ldr	r1, [pc, #372]	; (800d938 <process_status_task+0x250>)
 800d7c4:	485e      	ldr	r0, [pc, #376]	; (800d940 <process_status_task+0x258>)
 800d7c6:	f003 f969 	bl	8010a9c <HAL_UART_Transmit>

				break;
 800d7ca:	e0a7      	b.n	800d91c <process_status_task+0x234>
			case 200:
				//AppruveSound();
				check++;
 800d7cc:	4b5d      	ldr	r3, [pc, #372]	; (800d944 <process_status_task+0x25c>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	3301      	adds	r3, #1
 800d7d2:	4a5c      	ldr	r2, [pc, #368]	; (800d944 <process_status_task+0x25c>)
 800d7d4:	6013      	str	r3, [r2, #0]
				break;
 800d7d6:	e0a1      	b.n	800d91c <process_status_task+0x234>
			case 201:
				//HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);

				takeData(BUFFER, strlen((char*)BUFFER), dispData);
 800d7d8:	4855      	ldr	r0, [pc, #340]	; (800d930 <process_status_task+0x248>)
 800d7da:	f7fe fcb9 	bl	800c150 <strlen>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	f107 0308 	add.w	r3, r7, #8
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	4851      	ldr	r0, [pc, #324]	; (800d930 <process_status_task+0x248>)
 800d7ea:	f000 ffa7 	bl	800e73c <takeData>
				printBalansi(0, 0);
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	2000      	movs	r0, #0
 800d7f2:	f7ff fa1b 	bl	800cc2c <printBalansi>
				HD44780_PrintStr((char*) dispData);
 800d7f6:	f107 0308 	add.w	r3, r7, #8
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7ff fba4 	bl	800cf48 <HD44780_PrintStr>
				HAL_Delay(1000);
 800d800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d804:	f001 f940 	bl	800ea88 <HAL_Delay>
				HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 800d808:	2200      	movs	r2, #0
 800d80a:	2102      	movs	r1, #2
 800d80c:	4849      	ldr	r0, [pc, #292]	; (800d934 <process_status_task+0x24c>)
 800d80e:	f001 fca3 	bl	800f158 <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 800d812:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d816:	f001 f937 	bl	800ea88 <HAL_Delay>
				printMiadetBarati(0, 2);
 800d81a:	2102      	movs	r1, #2
 800d81c:	2000      	movs	r0, #0
 800d81e:	f7ff f819 	bl	800c854 <printMiadetBarati>
				memset(postData, 0, sizeof(postData));
 800d822:	22fa      	movs	r2, #250	; 0xfa
 800d824:	2100      	movs	r1, #0
 800d826:	4844      	ldr	r0, [pc, #272]	; (800d938 <process_status_task+0x250>)
 800d828:	f006 f96e 	bl	8013b08 <memset>
				break;
 800d82c:	e076      	b.n	800d91c <process_status_task+0x234>
			case 293:

				//takeData(buffer, count, dispData);
				HD44780_Clear();
 800d82e:	f7ff faf7 	bl	800ce20 <HD44780_Clear>
				HD44780_SetCursor(0, 0);
 800d832:	2100      	movs	r1, #0
 800d834:	2000      	movs	r0, #0
 800d836:	f7ff fb09 	bl	800ce4c <HD44780_SetCursor>
				printUcxoBaratia(0,0);
 800d83a:	2100      	movs	r1, #0
 800d83c:	2000      	movs	r0, #0
 800d83e:	f7fe fea3 	bl	800c588 <printUcxoBaratia>
				ErrorSound();
 800d842:	f000 ff47 	bl	800e6d4 <ErrorSound>
				HAL_Delay(1000);
 800d846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d84a:	f001 f91d 	bl	800ea88 <HAL_Delay>
				printMiadetBarati(0, 2);
 800d84e:	2102      	movs	r1, #2
 800d850:	2000      	movs	r0, #0
 800d852:	f7fe ffff 	bl	800c854 <printMiadetBarati>
				break;
 800d856:	e061      	b.n	800d91c <process_status_task+0x234>
			case 291:
				//takeData(buffer, count, dispData);
				HD44780_Clear();
 800d858:	f7ff fae2 	bl	800ce20 <HD44780_Clear>
				HD44780_SetCursor(0, 0);
 800d85c:	2100      	movs	r1, #0
 800d85e:	2000      	movs	r0, #0
 800d860:	f7ff faf4 	bl	800ce4c <HD44780_SetCursor>
				printBlansiAraa(0, 0);
 800d864:	2100      	movs	r1, #0
 800d866:	2000      	movs	r0, #0
 800d868:	f7fe ff48 	bl	800c6fc <printBlansiAraa>
				ErrorSound();
 800d86c:	f000 ff32 	bl	800e6d4 <ErrorSound>
				HAL_Delay(1000);
 800d870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800d874:	f001 f908 	bl	800ea88 <HAL_Delay>
				printMiadetBarati(0, 2);
 800d878:	2102      	movs	r1, #2
 800d87a:	2000      	movs	r0, #0
 800d87c:	f7fe ffea 	bl	800c854 <printMiadetBarati>
				break;
 800d880:	e04c      	b.n	800d91c <process_status_task+0x234>
			case 296:
				//takeData(buffer, count, dispData);
				HD44780_Clear();
 800d882:	f7ff facd 	bl	800ce20 <HD44780_Clear>
				HD44780_SetCursor(0, 0);
 800d886:	2100      	movs	r1, #0
 800d888:	2000      	movs	r0, #0
 800d88a:	f7ff fadf 	bl	800ce4c <HD44780_SetCursor>
				HD44780_PrintStr((char*) dispData);
 800d88e:	f107 0308 	add.w	r3, r7, #8
 800d892:	4618      	mov	r0, r3
 800d894:	f7ff fb58 	bl	800cf48 <HD44780_PrintStr>
				ErrorSound();
 800d898:	f000 ff1c 	bl	800e6d4 <ErrorSound>
				HAL_Delay(3000);
 800d89c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d8a0:	f001 f8f2 	bl	800ea88 <HAL_Delay>
				printMiadetBarati(0, 2);
 800d8a4:	2102      	movs	r1, #2
 800d8a6:	2000      	movs	r0, #0
 800d8a8:	f7fe ffd4 	bl	800c854 <printMiadetBarati>
				break;
 800d8ac:	e036      	b.n	800d91c <process_status_task+0x234>
			case 297:
				//takeData(buffer, count, dispData);
				HD44780_Clear();
 800d8ae:	f7ff fab7 	bl	800ce20 <HD44780_Clear>
				HD44780_SetCursor(0, 0);
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	f7ff fac9 	bl	800ce4c <HD44780_SetCursor>
				HD44780_PrintStr((char*) dispData);
 800d8ba:	f107 0308 	add.w	r3, r7, #8
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7ff fb42 	bl	800cf48 <HD44780_PrintStr>
				ErrorSound();
 800d8c4:	f000 ff06 	bl	800e6d4 <ErrorSound>
				HAL_Delay(3000);
 800d8c8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d8cc:	f001 f8dc 	bl	800ea88 <HAL_Delay>
				printMiadetBarati(0, 2);
 800d8d0:	2102      	movs	r1, #2
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	f7fe ffbe 	bl	800c854 <printMiadetBarati>
				break;
 800d8d8:	e020      	b.n	800d91c <process_status_task+0x234>
			case 299:
				//takeData(buffer, count, dispData);
				HD44780_Clear();
 800d8da:	f7ff faa1 	bl	800ce20 <HD44780_Clear>
				HD44780_SetCursor(0, 0);
 800d8de:	2100      	movs	r1, #0
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	f7ff fab3 	bl	800ce4c <HD44780_SetCursor>
				HD44780_PrintStr((char*) dispData);
 800d8e6:	f107 0308 	add.w	r3, r7, #8
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f7ff fb2c 	bl	800cf48 <HD44780_PrintStr>
				ErrorSound();
 800d8f0:	f000 fef0 	bl	800e6d4 <ErrorSound>
				HAL_Delay(3000);
 800d8f4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d8f8:	f001 f8c6 	bl	800ea88 <HAL_Delay>
				printMiadetBarati(0, 2);
 800d8fc:	2102      	movs	r1, #2
 800d8fe:	2000      	movs	r0, #0
 800d900:	f7fe ffa8 	bl	800c854 <printMiadetBarati>
				break;
 800d904:	e00a      	b.n	800d91c <process_status_task+0x234>
			default:
				memset(dispData, 0, sizeof(dispData));
 800d906:	f107 0308 	add.w	r3, r7, #8
 800d90a:	2232      	movs	r2, #50	; 0x32
 800d90c:	2100      	movs	r1, #0
 800d90e:	4618      	mov	r0, r3
 800d910:	f006 f8fa 	bl	8013b08 <memset>
				printMiadetBarati(0, 2);
 800d914:	2102      	movs	r1, #2
 800d916:	2000      	movs	r0, #0
 800d918:	f7fe ff9c 	bl	800c854 <printMiadetBarati>

	  }
		memset(BUFFER, '\0', sizeof BUFFER / sizeof BUFFER[0]);
 800d91c:	2232      	movs	r2, #50	; 0x32
 800d91e:	2100      	movs	r1, #0
 800d920:	4803      	ldr	r0, [pc, #12]	; (800d930 <process_status_task+0x248>)
 800d922:	f006 f8f1 	bl	8013b08 <memset>
	for(;;){
 800d926:	e6e3      	b.n	800d6f0 <process_status_task+0x8>
 800d928:	2000057c 	.word	0x2000057c
 800d92c:	20000478 	.word	0x20000478
 800d930:	20000440 	.word	0x20000440
 800d934:	40010c00 	.word	0x40010c00
 800d938:	20000480 	.word	0x20000480
 800d93c:	20000474 	.word	0x20000474
 800d940:	20000630 	.word	0x20000630
 800d944:	2000047c 	.word	0x2000047c

0800d948 <send_card_data_MQTT>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_card_data_MQTT */
void send_card_data_MQTT(void const * argument)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

	//xSemaphoreTake(semaphore_to_do_post, portMAX_DELAY);
  for(;;)
  {
	  	  xSemaphoreTake(semaphore_to_do_post, portMAX_DELAY);
 800d950:	4b0d      	ldr	r3, [pc, #52]	; (800d988 <send_card_data_MQTT+0x40>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f04f 31ff 	mov.w	r1, #4294967295
 800d958:	4618      	mov	r0, r3
 800d95a:	f004 fa47 	bl	8011dec <xQueueSemaphoreTake>
		  //vSemaphoreDelete(semaphore_to_do_post);
		  printDaicadet(0, 4);
 800d95e:	2104      	movs	r1, #4
 800d960:	2000      	movs	r0, #0
 800d962:	f7ff f8d5 	bl	800cb10 <printDaicadet>

		  MQTTPubToTopic(LENGTH);
 800d966:	4b09      	ldr	r3, [pc, #36]	; (800d98c <send_card_data_MQTT+0x44>)
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	4618      	mov	r0, r3
 800d96c:	f000 f81a 	bl	800d9a4 <MQTTPubToTopic>
		  HAL_Delay(50);
 800d970:	2032      	movs	r0, #50	; 0x32
 800d972:	f001 f889 	bl	800ea88 <HAL_Delay>

		  HAL_UART_Transmit(&huart1, postData, LENGTH, 100);
 800d976:	4b05      	ldr	r3, [pc, #20]	; (800d98c <send_card_data_MQTT+0x44>)
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	b29a      	uxth	r2, r3
 800d97c:	2364      	movs	r3, #100	; 0x64
 800d97e:	4904      	ldr	r1, [pc, #16]	; (800d990 <send_card_data_MQTT+0x48>)
 800d980:	4804      	ldr	r0, [pc, #16]	; (800d994 <send_card_data_MQTT+0x4c>)
 800d982:	f003 f88b 	bl	8010a9c <HAL_UART_Transmit>
	  	  xSemaphoreTake(semaphore_to_do_post, portMAX_DELAY);
 800d986:	e7e3      	b.n	800d950 <send_card_data_MQTT+0x8>
 800d988:	20000580 	.word	0x20000580
 800d98c:	20000474 	.word	0x20000474
 800d990:	20000480 	.word	0x20000480
 800d994:	20000630 	.word	0x20000630

0800d998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d998:	b480      	push	{r7}
 800d99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800d99c:	bf00      	nop
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bc80      	pop	{r7}
 800d9a2:	4770      	bx	lr

0800d9a4 <MQTTPubToTopic>:
extern UART_HandleTypeDef huart1;
extern UART_HandleTypeDef huart2;

uint8_t MQTT_PUB[50];

void MQTTPubToTopic(int length){
 800d9a4:	b580      	push	{r7, lr}
 800d9a6:	b082      	sub	sp, #8
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
	//uint8_t status = 0;
	sprintf((char*) MQTT_PUB, "AT+QMTPUBEX=0,0,0,0,\""STR(backServer)"\",%d\r\n", (length));
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	4908      	ldr	r1, [pc, #32]	; (800d9d0 <MQTTPubToTopic+0x2c>)
 800d9b0:	4808      	ldr	r0, [pc, #32]	; (800d9d4 <MQTTPubToTopic+0x30>)
 800d9b2:	f006 fa07 	bl	8013dc4 <siprintf>


		HAL_UART_Transmit(&huart1, MQTT_PUB, sizeof MQTT_PUB / sizeof MQTT_PUB[0], 100);
 800d9b6:	2364      	movs	r3, #100	; 0x64
 800d9b8:	2232      	movs	r2, #50	; 0x32
 800d9ba:	4906      	ldr	r1, [pc, #24]	; (800d9d4 <MQTTPubToTopic+0x30>)
 800d9bc:	4806      	ldr	r0, [pc, #24]	; (800d9d8 <MQTTPubToTopic+0x34>)
 800d9be:	f003 f86d 	bl	8010a9c <HAL_UART_Transmit>

		//HAL_UART_Receive(&huart1, RXBuffer, 10, 100);

		//status = checkCommand(RXBuffer, (uint8_t*)">");
		HAL_Delay(30);
 800d9c2:	201e      	movs	r0, #30
 800d9c4:	f001 f860 	bl	800ea88 <HAL_Delay>

}
 800d9c8:	bf00      	nop
 800d9ca:	3708      	adds	r7, #8
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	bd80      	pop	{r7, pc}
 800d9d0:	08014720 	.word	0x08014720
 800d9d4:	200006cc 	.word	0x200006cc
 800d9d8:	20000630 	.word	0x20000630

0800d9dc <SPI1SendByte>:
uint8_t cardOperationWithBlockedSector(uint8_t* finalData);




uint8_t SPI1SendByte(uint8_t data) {
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b086      	sub	sp, #24
 800d9e0:	af02      	add	r7, sp, #8
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	71fb      	strb	r3, [r7, #7]
	unsigned char writeCommand[1];
	unsigned char readValue[1];
	writeCommand[0] = data;
 800d9e6:	79fb      	ldrb	r3, [r7, #7]
 800d9e8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&writeCommand, (uint8_t*)&readValue, 1, 10);
 800d9ea:	f107 0208 	add.w	r2, r7, #8
 800d9ee:	f107 010c 	add.w	r1, r7, #12
 800d9f2:	230a      	movs	r3, #10
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	4803      	ldr	r0, [pc, #12]	; (800da08 <SPI1SendByte+0x2c>)
 800d9fa:	f002 fda9 	bl	8010550 <HAL_SPI_TransmitReceive>
	return readValue[0];
 800d9fe:	7a3b      	ldrb	r3, [r7, #8]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	200005d8 	.word	0x200005d8

0800da0c <SPI1_WriteReg>:

void SPI1_WriteReg(uint8_t address, uint8_t value) {
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	4603      	mov	r3, r0
 800da14:	460a      	mov	r2, r1
 800da16:	71fb      	strb	r3, [r7, #7]
 800da18:	4613      	mov	r3, r2
 800da1a:	71bb      	strb	r3, [r7, #6]
	cs_reset();
 800da1c:	2200      	movs	r2, #0
 800da1e:	2110      	movs	r1, #16
 800da20:	4809      	ldr	r0, [pc, #36]	; (800da48 <SPI1_WriteReg+0x3c>)
 800da22:	f001 fb99 	bl	800f158 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800da26:	79fb      	ldrb	r3, [r7, #7]
 800da28:	4618      	mov	r0, r3
 800da2a:	f7ff ffd7 	bl	800d9dc <SPI1SendByte>
	SPI1SendByte(value);
 800da2e:	79bb      	ldrb	r3, [r7, #6]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff ffd3 	bl	800d9dc <SPI1SendByte>
	cs_set();
 800da36:	2201      	movs	r2, #1
 800da38:	2110      	movs	r1, #16
 800da3a:	4803      	ldr	r0, [pc, #12]	; (800da48 <SPI1_WriteReg+0x3c>)
 800da3c:	f001 fb8c 	bl	800f158 <HAL_GPIO_WritePin>
}
 800da40:	bf00      	nop
 800da42:	3708      	adds	r7, #8
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	40010800 	.word	0x40010800

0800da4c <SPI1_ReadReg>:

uint8_t SPI1_ReadReg(uint8_t address) {
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	4603      	mov	r3, r0
 800da54:	71fb      	strb	r3, [r7, #7]
	uint8_t	val;

	cs_reset();
 800da56:	2200      	movs	r2, #0
 800da58:	2110      	movs	r1, #16
 800da5a:	480b      	ldr	r0, [pc, #44]	; (800da88 <SPI1_ReadReg+0x3c>)
 800da5c:	f001 fb7c 	bl	800f158 <HAL_GPIO_WritePin>
	SPI1SendByte(address);
 800da60:	79fb      	ldrb	r3, [r7, #7]
 800da62:	4618      	mov	r0, r3
 800da64:	f7ff ffba 	bl	800d9dc <SPI1SendByte>
	val = SPI1SendByte(0x00);
 800da68:	2000      	movs	r0, #0
 800da6a:	f7ff ffb7 	bl	800d9dc <SPI1SendByte>
 800da6e:	4603      	mov	r3, r0
 800da70:	73fb      	strb	r3, [r7, #15]
	cs_set();
 800da72:	2201      	movs	r2, #1
 800da74:	2110      	movs	r1, #16
 800da76:	4804      	ldr	r0, [pc, #16]	; (800da88 <SPI1_ReadReg+0x3c>)
 800da78:	f001 fb6e 	bl	800f158 <HAL_GPIO_WritePin>
	return val;
 800da7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3710      	adds	r7, #16
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	40010800 	.word	0x40010800

0800da8c <MFRC522_WriteRegister>:

void MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b082      	sub	sp, #8
 800da90:	af00      	add	r7, sp, #0
 800da92:	4603      	mov	r3, r0
 800da94:	460a      	mov	r2, r1
 800da96:	71fb      	strb	r3, [r7, #7]
 800da98:	4613      	mov	r3, r2
 800da9a:	71bb      	strb	r3, [r7, #6]
	addr = (addr << 1) & 0x7E;															// Address format: 0XXXXXX0
 800da9c:	79fb      	ldrb	r3, [r7, #7]
 800da9e:	005b      	lsls	r3, r3, #1
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800daa6:	71fb      	strb	r3, [r7, #7]
  SPI1_WriteReg(addr, val);
 800daa8:	79ba      	ldrb	r2, [r7, #6]
 800daaa:	79fb      	ldrb	r3, [r7, #7]
 800daac:	4611      	mov	r1, r2
 800daae:	4618      	mov	r0, r3
 800dab0:	f7ff ffac 	bl	800da0c <SPI1_WriteReg>
}
 800dab4:	bf00      	nop
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <MFRC522_ReadRegister>:

uint8_t MFRC522_ReadRegister(uint8_t addr) {
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	4603      	mov	r3, r0
 800dac4:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	addr = ((addr << 1) & 0x7E) | 0x80;
 800dac6:	79fb      	ldrb	r3, [r7, #7]
 800dac8:	005b      	lsls	r3, r3, #1
 800daca:	b25b      	sxtb	r3, r3
 800dacc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800dad0:	b25b      	sxtb	r3, r3
 800dad2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dad6:	b25b      	sxtb	r3, r3
 800dad8:	71fb      	strb	r3, [r7, #7]
	val = SPI1_ReadReg(addr);
 800dada:	79fb      	ldrb	r3, [r7, #7]
 800dadc:	4618      	mov	r0, r3
 800dade:	f7ff ffb5 	bl	800da4c <SPI1_ReadReg>
 800dae2:	4603      	mov	r3, r0
 800dae4:	73fb      	strb	r3, [r7, #15]
	return val;	
 800dae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3710      	adds	r7, #16
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <MFRC522_SetBitMask>:
		if (CardID[i] != CompareID[i]) return MI_ERR;
	}
	return MI_OK;
}

void MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	460a      	mov	r2, r1
 800dafa:	71fb      	strb	r3, [r7, #7]
 800dafc:	4613      	mov	r3, r2
 800dafe:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) | mask);
 800db00:	79fb      	ldrb	r3, [r7, #7]
 800db02:	4618      	mov	r0, r3
 800db04:	f7ff ffda 	bl	800dabc <MFRC522_ReadRegister>
 800db08:	4603      	mov	r3, r0
 800db0a:	461a      	mov	r2, r3
 800db0c:	79bb      	ldrb	r3, [r7, #6]
 800db0e:	4313      	orrs	r3, r2
 800db10:	b2da      	uxtb	r2, r3
 800db12:	79fb      	ldrb	r3, [r7, #7]
 800db14:	4611      	mov	r1, r2
 800db16:	4618      	mov	r0, r3
 800db18:	f7ff ffb8 	bl	800da8c <MFRC522_WriteRegister>
}
 800db1c:	bf00      	nop
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <MFRC522_ClearBitMask>:

void MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	4603      	mov	r3, r0
 800db2c:	460a      	mov	r2, r1
 800db2e:	71fb      	strb	r3, [r7, #7]
 800db30:	4613      	mov	r3, r2
 800db32:	71bb      	strb	r3, [r7, #6]
	MFRC522_WriteRegister(reg, MFRC522_ReadRegister(reg) & (~mask));
 800db34:	79fb      	ldrb	r3, [r7, #7]
 800db36:	4618      	mov	r0, r3
 800db38:	f7ff ffc0 	bl	800dabc <MFRC522_ReadRegister>
 800db3c:	4603      	mov	r3, r0
 800db3e:	b25a      	sxtb	r2, r3
 800db40:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800db44:	43db      	mvns	r3, r3
 800db46:	b25b      	sxtb	r3, r3
 800db48:	4013      	ands	r3, r2
 800db4a:	b25b      	sxtb	r3, r3
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	79fb      	ldrb	r3, [r7, #7]
 800db50:	4611      	mov	r1, r2
 800db52:	4618      	mov	r0, r3
 800db54:	f7ff ff9a 	bl	800da8c <MFRC522_WriteRegister>
}
 800db58:	bf00      	nop
 800db5a:	3708      	adds	r7, #8
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <MFRC522_Request>:

uint8_t MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800db60:	b580      	push	{r7, lr}
 800db62:	b086      	sub	sp, #24
 800db64:	af02      	add	r7, sp, #8
 800db66:	4603      	mov	r3, r0
 800db68:	6039      	str	r1, [r7, #0]
 800db6a:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint16_t backBits;																			// The received data bits

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		// TxLastBists = BitFramingReg[2..0]
 800db6c:	2107      	movs	r1, #7
 800db6e:	200d      	movs	r0, #13
 800db70:	f7ff ff8c 	bl	800da8c <MFRC522_WriteRegister>
	TagType[0] = reqMode;
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	79fa      	ldrb	r2, [r7, #7]
 800db78:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800db7a:	f107 030c 	add.w	r3, r7, #12
 800db7e:	9300      	str	r3, [sp, #0]
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	2201      	movs	r2, #1
 800db84:	6839      	ldr	r1, [r7, #0]
 800db86:	200c      	movs	r0, #12
 800db88:	f000 f80f 	bl	800dbaa <MFRC522_ToCard>
 800db8c:	4603      	mov	r3, r0
 800db8e:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) status = MI_ERR;
 800db90:	7bfb      	ldrb	r3, [r7, #15]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d102      	bne.n	800db9c <MFRC522_Request+0x3c>
 800db96:	89bb      	ldrh	r3, [r7, #12]
 800db98:	2b10      	cmp	r3, #16
 800db9a:	d001      	beq.n	800dba0 <MFRC522_Request+0x40>
 800db9c:	2302      	movs	r3, #2
 800db9e:	73fb      	strb	r3, [r7, #15]
	return status;
 800dba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <MFRC522_ToCard>:

uint8_t MFRC522_ToCard(uint8_t command, uint8_t* sendData, uint8_t sendLen, uint8_t* backData, uint16_t* backLen) {
 800dbaa:	b590      	push	{r4, r7, lr}
 800dbac:	b087      	sub	sp, #28
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607b      	str	r3, [r7, #4]
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	73fb      	strb	r3, [r7, #15]
 800dbb8:	4613      	mov	r3, r2
 800dbba:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 800dbc8:	7bfb      	ldrb	r3, [r7, #15]
 800dbca:	2b0c      	cmp	r3, #12
 800dbcc:	d006      	beq.n	800dbdc <MFRC522_ToCard+0x32>
 800dbce:	2b0e      	cmp	r3, #14
 800dbd0:	d109      	bne.n	800dbe6 <MFRC522_ToCard+0x3c>
		case PCD_AUTHENT: {
			irqEn = 0x12;
 800dbd2:	2312      	movs	r3, #18
 800dbd4:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x10;
 800dbd6:	2310      	movs	r3, #16
 800dbd8:	757b      	strb	r3, [r7, #21]
			break;
 800dbda:	e005      	b.n	800dbe8 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE: {
			irqEn = 0x77;
 800dbdc:	2377      	movs	r3, #119	; 0x77
 800dbde:	75bb      	strb	r3, [r7, #22]
			waitIRq = 0x30;
 800dbe0:	2330      	movs	r3, #48	; 0x30
 800dbe2:	757b      	strb	r3, [r7, #21]
			break;
 800dbe4:	e000      	b.n	800dbe8 <MFRC522_ToCard+0x3e>
		}
		default:
		break;
 800dbe6:	bf00      	nop
	}

	MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800dbe8:	7dbb      	ldrb	r3, [r7, #22]
 800dbea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dbee:	b2db      	uxtb	r3, r3
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	2002      	movs	r0, #2
 800dbf4:	f7ff ff4a 	bl	800da8c <MFRC522_WriteRegister>
	MFRC522_ClearBitMask(MFRC522_REG_COMM_IRQ, 0x80);
 800dbf8:	2180      	movs	r1, #128	; 0x80
 800dbfa:	2004      	movs	r0, #4
 800dbfc:	f7ff ff92 	bl	800db24 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);
 800dc00:	2180      	movs	r1, #128	; 0x80
 800dc02:	200a      	movs	r0, #10
 800dc04:	f7ff ff74 	bl	800daf0 <MFRC522_SetBitMask>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE);
 800dc08:	2100      	movs	r1, #0
 800dc0a:	2001      	movs	r0, #1
 800dc0c:	f7ff ff3e 	bl	800da8c <MFRC522_WriteRegister>

	// Writing data to the FIFO
	for (i = 0; i < sendLen; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800dc10:	2300      	movs	r3, #0
 800dc12:	827b      	strh	r3, [r7, #18]
 800dc14:	e00a      	b.n	800dc2c <MFRC522_ToCard+0x82>
 800dc16:	8a7b      	ldrh	r3, [r7, #18]
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	4413      	add	r3, r2
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	4619      	mov	r1, r3
 800dc20:	2009      	movs	r0, #9
 800dc22:	f7ff ff33 	bl	800da8c <MFRC522_WriteRegister>
 800dc26:	8a7b      	ldrh	r3, [r7, #18]
 800dc28:	3301      	adds	r3, #1
 800dc2a:	827b      	strh	r3, [r7, #18]
 800dc2c:	7bbb      	ldrb	r3, [r7, #14]
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	8a7a      	ldrh	r2, [r7, #18]
 800dc32:	429a      	cmp	r2, r3
 800dc34:	d3ef      	bcc.n	800dc16 <MFRC522_ToCard+0x6c>

	// Execute the command
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	f7ff ff26 	bl	800da8c <MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		// StartSend=1,transmission of data starts 
 800dc40:	7bfb      	ldrb	r3, [r7, #15]
 800dc42:	2b0c      	cmp	r3, #12
 800dc44:	d103      	bne.n	800dc4e <MFRC522_ToCard+0xa4>
 800dc46:	2180      	movs	r1, #128	; 0x80
 800dc48:	200d      	movs	r0, #13
 800dc4a:	f7ff ff51 	bl	800daf0 <MFRC522_SetBitMask>

	// Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800dc4e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800dc52:	827b      	strh	r3, [r7, #18]
	do {
		// CommIrqReg[7..0]
		// Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800dc54:	2004      	movs	r0, #4
 800dc56:	f7ff ff31 	bl	800dabc <MFRC522_ReadRegister>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	753b      	strb	r3, [r7, #20]
		i--;
 800dc5e:	8a7b      	ldrh	r3, [r7, #18]
 800dc60:	3b01      	subs	r3, #1
 800dc62:	827b      	strh	r3, [r7, #18]
	} while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800dc64:	8a7b      	ldrh	r3, [r7, #18]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00a      	beq.n	800dc80 <MFRC522_ToCard+0xd6>
 800dc6a:	7d3b      	ldrb	r3, [r7, #20]
 800dc6c:	f003 0301 	and.w	r3, r3, #1
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d105      	bne.n	800dc80 <MFRC522_ToCard+0xd6>
 800dc74:	7d3a      	ldrb	r2, [r7, #20]
 800dc76:	7d7b      	ldrb	r3, [r7, #21]
 800dc78:	4013      	ands	r3, r2
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d0e9      	beq.n	800dc54 <MFRC522_ToCard+0xaa>

	MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);																// StartSend=0
 800dc80:	2180      	movs	r1, #128	; 0x80
 800dc82:	200d      	movs	r0, #13
 800dc84:	f7ff ff4e 	bl	800db24 <MFRC522_ClearBitMask>

	if (i != 0)  {
 800dc88:	8a7b      	ldrh	r3, [r7, #18]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d057      	beq.n	800dd3e <MFRC522_ToCard+0x194>
		if (!(MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800dc8e:	2006      	movs	r0, #6
 800dc90:	f7ff ff14 	bl	800dabc <MFRC522_ReadRegister>
 800dc94:	4603      	mov	r3, r0
 800dc96:	f003 031b 	and.w	r3, r3, #27
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d14d      	bne.n	800dd3a <MFRC522_ToCard+0x190>
			status = MI_OK;
 800dc9e:	2300      	movs	r3, #0
 800dca0:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) status = MI_NOTAGERR;
 800dca2:	7d3a      	ldrb	r2, [r7, #20]
 800dca4:	7dbb      	ldrb	r3, [r7, #22]
 800dca6:	4013      	ands	r3, r2
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	f003 0301 	and.w	r3, r3, #1
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d001      	beq.n	800dcb6 <MFRC522_ToCard+0x10c>
 800dcb2:	2301      	movs	r3, #1
 800dcb4:	75fb      	strb	r3, [r7, #23]
			if (command == PCD_TRANSCEIVE) {
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	2b0c      	cmp	r3, #12
 800dcba:	d140      	bne.n	800dd3e <MFRC522_ToCard+0x194>
				n = MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800dcbc:	200a      	movs	r0, #10
 800dcbe:	f7ff fefd 	bl	800dabc <MFRC522_ReadRegister>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	753b      	strb	r3, [r7, #20]
				lastBits = MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800dcc6:	200c      	movs	r0, #12
 800dcc8:	f7ff fef8 	bl	800dabc <MFRC522_ReadRegister>
 800dccc:	4603      	mov	r3, r0
 800dcce:	f003 0307 	and.w	r3, r3, #7
 800dcd2:	747b      	strb	r3, [r7, #17]
				if (lastBits) *backLen = (n-1)*8+lastBits; else *backLen = n*8;
 800dcd4:	7c7b      	ldrb	r3, [r7, #17]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00b      	beq.n	800dcf2 <MFRC522_ToCard+0x148>
 800dcda:	7d3b      	ldrb	r3, [r7, #20]
 800dcdc:	3b01      	subs	r3, #1
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	00db      	lsls	r3, r3, #3
 800dce2:	b29a      	uxth	r2, r3
 800dce4:	7c7b      	ldrb	r3, [r7, #17]
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	4413      	add	r3, r2
 800dcea:	b29a      	uxth	r2, r3
 800dcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcee:	801a      	strh	r2, [r3, #0]
 800dcf0:	e005      	b.n	800dcfe <MFRC522_ToCard+0x154>
 800dcf2:	7d3b      	ldrb	r3, [r7, #20]
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	00db      	lsls	r3, r3, #3
 800dcf8:	b29a      	uxth	r2, r3
 800dcfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfc:	801a      	strh	r2, [r3, #0]
				if (n == 0) n = 1;
 800dcfe:	7d3b      	ldrb	r3, [r7, #20]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d101      	bne.n	800dd08 <MFRC522_ToCard+0x15e>
 800dd04:	2301      	movs	r3, #1
 800dd06:	753b      	strb	r3, [r7, #20]
				if (n > MFRC522_MAX_LEN) n = MFRC522_MAX_LEN;
 800dd08:	7d3b      	ldrb	r3, [r7, #20]
 800dd0a:	2b10      	cmp	r3, #16
 800dd0c:	d901      	bls.n	800dd12 <MFRC522_ToCard+0x168>
 800dd0e:	2310      	movs	r3, #16
 800dd10:	753b      	strb	r3, [r7, #20]
				for (i = 0; i < n; i++) backData[i] = MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);		// Reading the received data in FIFO
 800dd12:	2300      	movs	r3, #0
 800dd14:	827b      	strh	r3, [r7, #18]
 800dd16:	e00a      	b.n	800dd2e <MFRC522_ToCard+0x184>
 800dd18:	8a7b      	ldrh	r3, [r7, #18]
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	18d4      	adds	r4, r2, r3
 800dd1e:	2009      	movs	r0, #9
 800dd20:	f7ff fecc 	bl	800dabc <MFRC522_ReadRegister>
 800dd24:	4603      	mov	r3, r0
 800dd26:	7023      	strb	r3, [r4, #0]
 800dd28:	8a7b      	ldrh	r3, [r7, #18]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	827b      	strh	r3, [r7, #18]
 800dd2e:	7d3b      	ldrb	r3, [r7, #20]
 800dd30:	b29b      	uxth	r3, r3
 800dd32:	8a7a      	ldrh	r2, [r7, #18]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d3ef      	bcc.n	800dd18 <MFRC522_ToCard+0x16e>
 800dd38:	e001      	b.n	800dd3e <MFRC522_ToCard+0x194>
			}
		} else status = MI_ERR;
 800dd3a:	2302      	movs	r3, #2
 800dd3c:	75fb      	strb	r3, [r7, #23]
	}
	return status;
 800dd3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	371c      	adds	r7, #28
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd90      	pop	{r4, r7, pc}

0800dd48 <MFRC522_Anticoll>:

uint8_t MFRC522_Anticoll(uint8_t* serNum) {
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af02      	add	r7, sp, #8
 800dd4e:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck = 0;
 800dd50:	2300      	movs	r3, #0
 800dd52:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);												// TxLastBists = BitFramingReg[2..0]
 800dd54:	2100      	movs	r1, #0
 800dd56:	200d      	movs	r0, #13
 800dd58:	f7ff fe98 	bl	800da8c <MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2293      	movs	r2, #147	; 0x93
 800dd60:	701a      	strb	r2, [r3, #0]
	serNum[1] = 0x20;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	3301      	adds	r3, #1
 800dd66:	2220      	movs	r2, #32
 800dd68:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800dd6a:	f107 030a 	add.w	r3, r7, #10
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2202      	movs	r2, #2
 800dd74:	6879      	ldr	r1, [r7, #4]
 800dd76:	200c      	movs	r0, #12
 800dd78:	f7ff ff17 	bl	800dbaa <MFRC522_ToCard>
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	73fb      	strb	r3, [r7, #15]
	if (status == MI_OK) {
 800dd80:	7bfb      	ldrb	r3, [r7, #15]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d118      	bne.n	800ddb8 <MFRC522_Anticoll+0x70>
		// Check card serial number
		for (i = 0; i < 4; i++) serNumCheck ^= serNum[i];
 800dd86:	2300      	movs	r3, #0
 800dd88:	73bb      	strb	r3, [r7, #14]
 800dd8a:	e009      	b.n	800dda0 <MFRC522_Anticoll+0x58>
 800dd8c:	7bbb      	ldrb	r3, [r7, #14]
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	4413      	add	r3, r2
 800dd92:	781a      	ldrb	r2, [r3, #0]
 800dd94:	7b7b      	ldrb	r3, [r7, #13]
 800dd96:	4053      	eors	r3, r2
 800dd98:	737b      	strb	r3, [r7, #13]
 800dd9a:	7bbb      	ldrb	r3, [r7, #14]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	73bb      	strb	r3, [r7, #14]
 800dda0:	7bbb      	ldrb	r3, [r7, #14]
 800dda2:	2b03      	cmp	r3, #3
 800dda4:	d9f2      	bls.n	800dd8c <MFRC522_Anticoll+0x44>
		if (serNumCheck != serNum[i]) status = MI_ERR;
 800dda6:	7bbb      	ldrb	r3, [r7, #14]
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	4413      	add	r3, r2
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	7b7a      	ldrb	r2, [r7, #13]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d001      	beq.n	800ddb8 <MFRC522_Anticoll+0x70>
 800ddb4:	2302      	movs	r3, #2
 800ddb6:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800ddb8:	7bfb      	ldrb	r3, [r7, #15]
} 
 800ddba:	4618      	mov	r0, r3
 800ddbc:	3710      	adds	r7, #16
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}

0800ddc2 <MFRC522_CalculateCRC>:

void MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800ddc2:	b590      	push	{r4, r7, lr}
 800ddc4:	b087      	sub	sp, #28
 800ddc6:	af00      	add	r7, sp, #0
 800ddc8:	60f8      	str	r0, [r7, #12]
 800ddca:	460b      	mov	r3, r1
 800ddcc:	607a      	str	r2, [r7, #4]
 800ddce:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);													// CRCIrq = 0
 800ddd0:	2104      	movs	r1, #4
 800ddd2:	2005      	movs	r0, #5
 800ddd4:	f7ff fea6 	bl	800db24 <MFRC522_ClearBitMask>
	MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);													// Clear the FIFO pointer
 800ddd8:	2180      	movs	r1, #128	; 0x80
 800ddda:	200a      	movs	r0, #10
 800dddc:	f7ff fe88 	bl	800daf0 <MFRC522_SetBitMask>
	// Write_MFRC522(CommandReg, PCD_IDLE);

	// Writing data to the FIFO	
	for (i = 0; i < len; i++) MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800dde0:	2300      	movs	r3, #0
 800dde2:	75fb      	strb	r3, [r7, #23]
 800dde4:	e00a      	b.n	800ddfc <MFRC522_CalculateCRC+0x3a>
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	4413      	add	r3, r2
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	2009      	movs	r0, #9
 800ddf2:	f7ff fe4b 	bl	800da8c <MFRC522_WriteRegister>
 800ddf6:	7dfb      	ldrb	r3, [r7, #23]
 800ddf8:	3301      	adds	r3, #1
 800ddfa:	75fb      	strb	r3, [r7, #23]
 800ddfc:	7dfa      	ldrb	r2, [r7, #23]
 800ddfe:	7afb      	ldrb	r3, [r7, #11]
 800de00:	429a      	cmp	r2, r3
 800de02:	d3f0      	bcc.n	800dde6 <MFRC522_CalculateCRC+0x24>
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800de04:	2103      	movs	r1, #3
 800de06:	2001      	movs	r0, #1
 800de08:	f7ff fe40 	bl	800da8c <MFRC522_WriteRegister>

	// Wait CRC calculation is complete
	i = 0xFF;
 800de0c:	23ff      	movs	r3, #255	; 0xff
 800de0e:	75fb      	strb	r3, [r7, #23]
	do {
		n = MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800de10:	2005      	movs	r0, #5
 800de12:	f7ff fe53 	bl	800dabc <MFRC522_ReadRegister>
 800de16:	4603      	mov	r3, r0
 800de18:	75bb      	strb	r3, [r7, #22]
		i--;
 800de1a:	7dfb      	ldrb	r3, [r7, #23]
 800de1c:	3b01      	subs	r3, #1
 800de1e:	75fb      	strb	r3, [r7, #23]
	} while ((i!=0) && !(n&0x04));																						// CRCIrq = 1
 800de20:	7dfb      	ldrb	r3, [r7, #23]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d004      	beq.n	800de30 <MFRC522_CalculateCRC+0x6e>
 800de26:	7dbb      	ldrb	r3, [r7, #22]
 800de28:	f003 0304 	and.w	r3, r3, #4
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d0ef      	beq.n	800de10 <MFRC522_CalculateCRC+0x4e>

	// Read CRC calculation result
	pOutData[0] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800de30:	2022      	movs	r0, #34	; 0x22
 800de32:	f7ff fe43 	bl	800dabc <MFRC522_ReadRegister>
 800de36:	4603      	mov	r3, r0
 800de38:	461a      	mov	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	701a      	strb	r2, [r3, #0]
	pOutData[1] = MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	1c5c      	adds	r4, r3, #1
 800de42:	2021      	movs	r0, #33	; 0x21
 800de44:	f7ff fe3a 	bl	800dabc <MFRC522_ReadRegister>
 800de48:	4603      	mov	r3, r0
 800de4a:	7023      	strb	r3, [r4, #0]
}
 800de4c:	bf00      	nop
 800de4e:	371c      	adds	r7, #28
 800de50:	46bd      	mov	sp, r7
 800de52:	bd90      	pop	{r4, r7, pc}

0800de54 <MFRC522_SelectTag>:

uint8_t MFRC522_SelectTag(uint8_t* serNum) {
 800de54:	b580      	push	{r7, lr}
 800de56:	b088      	sub	sp, #32
 800de58:	af02      	add	r7, sp, #8
 800de5a:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t size;
	uint16_t recvBits;
	uint8_t buffer[9]; 

	buffer[0] = PICC_SElECTTAG;
 800de5c:	2393      	movs	r3, #147	; 0x93
 800de5e:	723b      	strb	r3, [r7, #8]
	buffer[1] = 0x70;
 800de60:	2370      	movs	r3, #112	; 0x70
 800de62:	727b      	strb	r3, [r7, #9]
	for (i = 0; i < 5; i++) buffer[i+2] = *(serNum+i);
 800de64:	2300      	movs	r3, #0
 800de66:	75fb      	strb	r3, [r7, #23]
 800de68:	e00c      	b.n	800de84 <MFRC522_SelectTag+0x30>
 800de6a:	7dfb      	ldrb	r3, [r7, #23]
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	441a      	add	r2, r3
 800de70:	7dfb      	ldrb	r3, [r7, #23]
 800de72:	3302      	adds	r3, #2
 800de74:	7812      	ldrb	r2, [r2, #0]
 800de76:	3318      	adds	r3, #24
 800de78:	443b      	add	r3, r7
 800de7a:	f803 2c10 	strb.w	r2, [r3, #-16]
 800de7e:	7dfb      	ldrb	r3, [r7, #23]
 800de80:	3301      	adds	r3, #1
 800de82:	75fb      	strb	r3, [r7, #23]
 800de84:	7dfb      	ldrb	r3, [r7, #23]
 800de86:	2b04      	cmp	r3, #4
 800de88:	d9ef      	bls.n	800de6a <MFRC522_SelectTag+0x16>
	MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800de8a:	f107 0308 	add.w	r3, r7, #8
 800de8e:	1dda      	adds	r2, r3, #7
 800de90:	f107 0308 	add.w	r3, r7, #8
 800de94:	2107      	movs	r1, #7
 800de96:	4618      	mov	r0, r3
 800de98:	f7ff ff93 	bl	800ddc2 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 800de9c:	f107 0208 	add.w	r2, r7, #8
 800dea0:	f107 0108 	add.w	r1, r7, #8
 800dea4:	f107 0312 	add.w	r3, r7, #18
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	4613      	mov	r3, r2
 800deac:	2209      	movs	r2, #9
 800deae:	200c      	movs	r0, #12
 800deb0:	f7ff fe7b 	bl	800dbaa <MFRC522_ToCard>
 800deb4:	4603      	mov	r3, r0
 800deb6:	757b      	strb	r3, [r7, #21]
	if ((status == MI_OK) && (recvBits == 0x18)) size = buffer[0]; else size = 0;
 800deb8:	7d7b      	ldrb	r3, [r7, #21]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d105      	bne.n	800deca <MFRC522_SelectTag+0x76>
 800debe:	8a7b      	ldrh	r3, [r7, #18]
 800dec0:	2b18      	cmp	r3, #24
 800dec2:	d102      	bne.n	800deca <MFRC522_SelectTag+0x76>
 800dec4:	7a3b      	ldrb	r3, [r7, #8]
 800dec6:	75bb      	strb	r3, [r7, #22]
 800dec8:	e001      	b.n	800dece <MFRC522_SelectTag+0x7a>
 800deca:	2300      	movs	r3, #0
 800decc:	75bb      	strb	r3, [r7, #22]
	return size;
 800dece:	7dbb      	ldrb	r3, [r7, #22]
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	3718      	adds	r7, #24
 800ded4:	46bd      	mov	sp, r7
 800ded6:	bd80      	pop	{r7, pc}

0800ded8 <MFRC522_Auth>:

uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t* Sectorkey, uint8_t* serNum) {
 800ded8:	b580      	push	{r7, lr}
 800deda:	b08a      	sub	sp, #40	; 0x28
 800dedc:	af02      	add	r7, sp, #8
 800dede:	60ba      	str	r2, [r7, #8]
 800dee0:	607b      	str	r3, [r7, #4]
 800dee2:	4603      	mov	r3, r0
 800dee4:	73fb      	strb	r3, [r7, #15]
 800dee6:	460b      	mov	r3, r1
 800dee8:	73bb      	strb	r3, [r7, #14]
	uint16_t recvBits;
	uint8_t i;
	uint8_t buff[12]; 

	// Verify the command block address + sector + password + card serial number
	buff[0] = authMode;
 800deea:	7bfb      	ldrb	r3, [r7, #15]
 800deec:	743b      	strb	r3, [r7, #16]
	buff[1] = BlockAddr;
 800deee:	7bbb      	ldrb	r3, [r7, #14]
 800def0:	747b      	strb	r3, [r7, #17]
	for (i = 0; i < 6; i++) buff[i+2] = *(Sectorkey+i);
 800def2:	2300      	movs	r3, #0
 800def4:	77bb      	strb	r3, [r7, #30]
 800def6:	e00c      	b.n	800df12 <MFRC522_Auth+0x3a>
 800def8:	7fbb      	ldrb	r3, [r7, #30]
 800defa:	68ba      	ldr	r2, [r7, #8]
 800defc:	441a      	add	r2, r3
 800defe:	7fbb      	ldrb	r3, [r7, #30]
 800df00:	3302      	adds	r3, #2
 800df02:	7812      	ldrb	r2, [r2, #0]
 800df04:	3320      	adds	r3, #32
 800df06:	443b      	add	r3, r7
 800df08:	f803 2c10 	strb.w	r2, [r3, #-16]
 800df0c:	7fbb      	ldrb	r3, [r7, #30]
 800df0e:	3301      	adds	r3, #1
 800df10:	77bb      	strb	r3, [r7, #30]
 800df12:	7fbb      	ldrb	r3, [r7, #30]
 800df14:	2b05      	cmp	r3, #5
 800df16:	d9ef      	bls.n	800def8 <MFRC522_Auth+0x20>
	for (i=0; i<4; i++) buff[i+8] = *(serNum+i);
 800df18:	2300      	movs	r3, #0
 800df1a:	77bb      	strb	r3, [r7, #30]
 800df1c:	e00c      	b.n	800df38 <MFRC522_Auth+0x60>
 800df1e:	7fbb      	ldrb	r3, [r7, #30]
 800df20:	687a      	ldr	r2, [r7, #4]
 800df22:	441a      	add	r2, r3
 800df24:	7fbb      	ldrb	r3, [r7, #30]
 800df26:	3308      	adds	r3, #8
 800df28:	7812      	ldrb	r2, [r2, #0]
 800df2a:	3320      	adds	r3, #32
 800df2c:	443b      	add	r3, r7
 800df2e:	f803 2c10 	strb.w	r2, [r3, #-16]
 800df32:	7fbb      	ldrb	r3, [r7, #30]
 800df34:	3301      	adds	r3, #1
 800df36:	77bb      	strb	r3, [r7, #30]
 800df38:	7fbb      	ldrb	r3, [r7, #30]
 800df3a:	2b03      	cmp	r3, #3
 800df3c:	d9ef      	bls.n	800df1e <MFRC522_Auth+0x46>
	status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 800df3e:	f107 0210 	add.w	r2, r7, #16
 800df42:	f107 0110 	add.w	r1, r7, #16
 800df46:	f107 031c 	add.w	r3, r7, #28
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	4613      	mov	r3, r2
 800df4e:	220c      	movs	r2, #12
 800df50:	200e      	movs	r0, #14
 800df52:	f7ff fe2a 	bl	800dbaa <MFRC522_ToCard>
 800df56:	4603      	mov	r3, r0
 800df58:	77fb      	strb	r3, [r7, #31]
	if ((status != MI_OK) || (!(MFRC522_ReadRegister(MFRC522_REG_STATUS2) & 0x08))) status = MI_ERR;
 800df5a:	7ffb      	ldrb	r3, [r7, #31]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d107      	bne.n	800df70 <MFRC522_Auth+0x98>
 800df60:	2008      	movs	r0, #8
 800df62:	f7ff fdab 	bl	800dabc <MFRC522_ReadRegister>
 800df66:	4603      	mov	r3, r0
 800df68:	f003 0308 	and.w	r3, r3, #8
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d101      	bne.n	800df74 <MFRC522_Auth+0x9c>
 800df70:	2302      	movs	r3, #2
 800df72:	77fb      	strb	r3, [r7, #31]
	return status;
 800df74:	7ffb      	ldrb	r3, [r7, #31]
}
 800df76:	4618      	mov	r0, r3
 800df78:	3720      	adds	r7, #32
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <MFRC522_Read>:

uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t* recvData) {
 800df7e:	b580      	push	{r7, lr}
 800df80:	b086      	sub	sp, #24
 800df82:	af02      	add	r7, sp, #8
 800df84:	4603      	mov	r3, r0
 800df86:	6039      	str	r1, [r7, #0]
 800df88:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t unLen;

	recvData[0] = PICC_READ;
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	2230      	movs	r2, #48	; 0x30
 800df8e:	701a      	strb	r2, [r3, #0]
	recvData[1] = blockAddr;
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	3301      	adds	r3, #1
 800df94:	79fa      	ldrb	r2, [r7, #7]
 800df96:	701a      	strb	r2, [r3, #0]
	MFRC522_CalculateCRC(recvData,2, &recvData[2]);
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	3302      	adds	r3, #2
 800df9c:	461a      	mov	r2, r3
 800df9e:	2102      	movs	r1, #2
 800dfa0:	6838      	ldr	r0, [r7, #0]
 800dfa2:	f7ff ff0e 	bl	800ddc2 <MFRC522_CalculateCRC>
	status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 800dfa6:	f107 030c 	add.w	r3, r7, #12
 800dfaa:	9300      	str	r3, [sp, #0]
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	2204      	movs	r2, #4
 800dfb0:	6839      	ldr	r1, [r7, #0]
 800dfb2:	200c      	movs	r0, #12
 800dfb4:	f7ff fdf9 	bl	800dbaa <MFRC522_ToCard>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (unLen != 0x90)) status = MI_ERR;
 800dfbc:	7bfb      	ldrb	r3, [r7, #15]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d102      	bne.n	800dfc8 <MFRC522_Read+0x4a>
 800dfc2:	89bb      	ldrh	r3, [r7, #12]
 800dfc4:	2b90      	cmp	r3, #144	; 0x90
 800dfc6:	d001      	beq.n	800dfcc <MFRC522_Read+0x4e>
 800dfc8:	2302      	movs	r3, #2
 800dfca:	73fb      	strb	r3, [r7, #15]
	return status;
 800dfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3710      	adds	r7, #16
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}

0800dfd6 <MFRC522_Init>:
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A)) status = MI_ERR;
	}
	return status;
}

void MFRC522_Init(void) {
 800dfd6:	b580      	push	{r7, lr}
 800dfd8:	af00      	add	r7, sp, #0
	MFRC522_Reset();
 800dfda:	f000 f820 	bl	800e01e <MFRC522_Reset>
	MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800dfde:	218d      	movs	r1, #141	; 0x8d
 800dfe0:	202a      	movs	r0, #42	; 0x2a
 800dfe2:	f7ff fd53 	bl	800da8c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800dfe6:	213e      	movs	r1, #62	; 0x3e
 800dfe8:	202b      	movs	r0, #43	; 0x2b
 800dfea:	f7ff fd4f 	bl	800da8c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 30);           
 800dfee:	211e      	movs	r1, #30
 800dff0:	202d      	movs	r0, #45	; 0x2d
 800dff2:	f7ff fd4b 	bl	800da8c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0);
 800dff6:	2100      	movs	r1, #0
 800dff8:	202c      	movs	r0, #44	; 0x2c
 800dffa:	f7ff fd47 	bl	800da8c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);				// 48dB gain	
 800dffe:	2170      	movs	r1, #112	; 0x70
 800e000:	2026      	movs	r0, #38	; 0x26
 800e002:	f7ff fd43 	bl	800da8c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800e006:	2140      	movs	r1, #64	; 0x40
 800e008:	2015      	movs	r0, #21
 800e00a:	f7ff fd3f 	bl	800da8c <MFRC522_WriteRegister>
	MFRC522_WriteRegister(MFRC522_REG_MODE, 0x3D);
 800e00e:	213d      	movs	r1, #61	; 0x3d
 800e010:	2011      	movs	r0, #17
 800e012:	f7ff fd3b 	bl	800da8c <MFRC522_WriteRegister>
	MFRC522_AntennaOn();																		// Open the antenna
 800e016:	f000 f80a 	bl	800e02e <MFRC522_AntennaOn>
}
 800e01a:	bf00      	nop
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <MFRC522_Reset>:

void MFRC522_Reset(void) {
 800e01e:	b580      	push	{r7, lr}
 800e020:	af00      	add	r7, sp, #0
	MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800e022:	210f      	movs	r1, #15
 800e024:	2001      	movs	r0, #1
 800e026:	f7ff fd31 	bl	800da8c <MFRC522_WriteRegister>
}
 800e02a:	bf00      	nop
 800e02c:	bd80      	pop	{r7, pc}

0800e02e <MFRC522_AntennaOn>:

void MFRC522_AntennaOn(void) {
 800e02e:	b580      	push	{r7, lr}
 800e030:	b082      	sub	sp, #8
 800e032:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800e034:	2014      	movs	r0, #20
 800e036:	f7ff fd41 	bl	800dabc <MFRC522_ReadRegister>
 800e03a:	4603      	mov	r3, r0
 800e03c:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	f003 0303 	and.w	r3, r3, #3
 800e044:	2b00      	cmp	r3, #0
 800e046:	d103      	bne.n	800e050 <MFRC522_AntennaOn+0x22>
 800e048:	2103      	movs	r1, #3
 800e04a:	2014      	movs	r0, #20
 800e04c:	f7ff fd50 	bl	800daf0 <MFRC522_SetBitMask>
}
 800e050:	bf00      	nop
 800e052:	3708      	adds	r7, #8
 800e054:	46bd      	mov	sp, r7
 800e056:	bd80      	pop	{r7, pc}

0800e058 <cardOperationWithBlockedSector>:
	buff[1] = 0;
	MFRC522_CalculateCRC(buff, 2, &buff[2]);
	MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}

uint8_t cardOperationWithBlockedSector(uint8_t* finalData){
 800e058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e05a:	b0f1      	sub	sp, #452	; 0x1c4
 800e05c:	af0e      	add	r7, sp, #56	; 0x38
 800e05e:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800e062:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e066:	6018      	str	r0, [r3, #0]

	  uint8_t status;
	  uint8_t sectorKeyB[] = { 0xFA, 0xFB, 0xFC, 0x21, 0x01, 0x2A };
 800e068:	4aae      	ldr	r2, [pc, #696]	; (800e324 <cardOperationWithBlockedSector+0x2cc>)
 800e06a:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800e06e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e072:	6018      	str	r0, [r3, #0]
 800e074:	3304      	adds	r3, #4
 800e076:	8019      	strh	r1, [r3, #0]

	  uint8_t str[MFRC522_MAX_LEN];
	  uint8_t str1[128];
	  uint8_t l;
	  uint8_t cardIDStatus = 0;
 800e078:	2300      	movs	r3, #0
 800e07a:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	  uint8_t cardReadStatus = 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	  uint8_t IDBuff[128];
	  uint8_t ReadDataBuff[64];
	  if (cardIDStatus == 0) {
 800e084:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d13d      	bne.n	800e108 <cardOperationWithBlockedSector+0xb0>
	     MFRC522_Init();
 800e08c:	f7ff ffa3 	bl	800dfd6 <MFRC522_Init>

	     if (!MFRC522_Request(PICC_REQIDL, str)) {
 800e090:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e094:	4619      	mov	r1, r3
 800e096:	2026      	movs	r0, #38	; 0x26
 800e098:	f7ff fd62 	bl	800db60 <MFRC522_Request>
 800e09c:	4603      	mov	r3, r0
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d132      	bne.n	800e108 <cardOperationWithBlockedSector+0xb0>
	       if (!MFRC522_Anticoll(str)) {
 800e0a2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	f7ff fe4e 	bl	800dd48 <MFRC522_Anticoll>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d12a      	bne.n	800e108 <cardOperationWithBlockedSector+0xb0>

	         sprintf((char*) IDBuff, "{\"operationType\":\"payment\",\"content\":{\"terminalID\":\"%s\",\"cardID\":\"%x%x%x%x\",",terminalStr, str[0],str[1], str[2], str[3]);
 800e0b2:	4b9d      	ldr	r3, [pc, #628]	; (800e328 <cardOperationWithBlockedSector+0x2d0>)
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	f897 316c 	ldrb.w	r3, [r7, #364]	; 0x16c
 800e0ba:	461d      	mov	r5, r3
 800e0bc:	f897 316d 	ldrb.w	r3, [r7, #365]	; 0x16d
 800e0c0:	f897 116e 	ldrb.w	r1, [r7, #366]	; 0x16e
 800e0c4:	f897 016f 	ldrb.w	r0, [r7, #367]	; 0x16f
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800e0ce:	9402      	str	r4, [sp, #8]
 800e0d0:	9101      	str	r1, [sp, #4]
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	462b      	mov	r3, r5
 800e0d6:	4995      	ldr	r1, [pc, #596]	; (800e32c <cardOperationWithBlockedSector+0x2d4>)
 800e0d8:	f005 fe74 	bl	8013dc4 <siprintf>

	         l = strlen((char*)IDBuff);
 800e0dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fe f835 	bl	800c150 <strlen>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	         memcpy(finalData, IDBuff, l);
 800e0ec:	f897 2186 	ldrb.w	r2, [r7, #390]	; 0x186
 800e0f0:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800e0f4:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 800e0f8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800e0fc:	6818      	ldr	r0, [r3, #0]
 800e0fe:	f005 fcf5 	bl	8013aec <memcpy>

	         cardIDStatus = 1;
 800e102:	2301      	movs	r3, #1
 800e104:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	     }

	   }


	  HAL_Delay(20);
 800e108:	2014      	movs	r0, #20
 800e10a:	f000 fcbd 	bl	800ea88 <HAL_Delay>
	  MFRC522_Init();
 800e10e:	f7ff ff62 	bl	800dfd6 <MFRC522_Init>
	  if (cardIDStatus == 1 && cardReadStatus == 0) {
 800e112:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e116:	2b01      	cmp	r3, #1
 800e118:	f040 80ed 	bne.w	800e2f6 <cardOperationWithBlockedSector+0x29e>
 800e11c:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800e120:	2b00      	cmp	r3, #0
 800e122:	f040 80e8 	bne.w	800e2f6 <cardOperationWithBlockedSector+0x29e>
	    MFRC522_Init();
 800e126:	f7ff ff56 	bl	800dfd6 <MFRC522_Init>
	    status = MFRC522_Request(PICC_REQIDL, str);
 800e12a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e12e:	4619      	mov	r1, r3
 800e130:	2026      	movs	r0, #38	; 0x26
 800e132:	f7ff fd15 	bl	800db60 <MFRC522_Request>
 800e136:	4603      	mov	r3, r0
 800e138:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	    if (status == MI_OK) {
 800e13c:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e140:	2b00      	cmp	r3, #0
 800e142:	f040 80ce 	bne.w	800e2e2 <cardOperationWithBlockedSector+0x28a>
	      status = MFRC522_Anticoll(str);
 800e146:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7ff fdfc 	bl	800dd48 <MFRC522_Anticoll>
 800e150:	4603      	mov	r3, r0
 800e152:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	      if (status == MI_OK) {
 800e156:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	f040 80b7 	bne.w	800e2ce <cardOperationWithBlockedSector+0x276>
	        status = MFRC522_SelectTag(str);
 800e160:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e164:	4618      	mov	r0, r3
 800e166:	f7ff fe75 	bl	800de54 <MFRC522_SelectTag>
 800e16a:	4603      	mov	r3, r0
 800e16c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	        if (status != 0) {
 800e170:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e174:	2b00      	cmp	r3, #0
 800e176:	f000 80a0 	beq.w	800e2ba <cardOperationWithBlockedSector+0x262>
	          status = MFRC522_Auth(PICC_AUTHENT1B, 2, sectorKeyB,
 800e17a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 800e17e:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 800e182:	2102      	movs	r1, #2
 800e184:	2061      	movs	r0, #97	; 0x61
 800e186:	f7ff fea7 	bl	800ded8 <MFRC522_Auth>
 800e18a:	4603      	mov	r3, r0
 800e18c:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	              str); //authenticate card
	          if (status == MI_OK) {
 800e190:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e194:	2b00      	cmp	r3, #0
 800e196:	f040 8086 	bne.w	800e2a6 <cardOperationWithBlockedSector+0x24e>
	            status = MFRC522_Read(2, str1); //read the 2 sector
 800e19a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800e19e:	4619      	mov	r1, r3
 800e1a0:	2002      	movs	r0, #2
 800e1a2:	f7ff feec 	bl	800df7e <MFRC522_Read>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
	            if (status == MI_OK) {
 800e1ac:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d16e      	bne.n	800e292 <cardOperationWithBlockedSector+0x23a>

	              sprintf((char*) ReadDataBuff, "\"cardData\":\"%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c\"}}", str1[0], str1[1], str1[2], str1[3], str1[4], str1[5], str1[6], str1[7], str1[8], str1[9], str1[10], str1[11],str1[12], str1[13], str1[14], str1[15]);
 800e1b4:	f897 30ec 	ldrb.w	r3, [r7, #236]	; 0xec
 800e1b8:	469c      	mov	ip, r3
 800e1ba:	f897 30ed 	ldrb.w	r3, [r7, #237]	; 0xed
 800e1be:	469e      	mov	lr, r3
 800e1c0:	f897 30ee 	ldrb.w	r3, [r7, #238]	; 0xee
 800e1c4:	461c      	mov	r4, r3
 800e1c6:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
 800e1ca:	461d      	mov	r5, r3
 800e1cc:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 800e1d0:	461e      	mov	r6, r3
 800e1d2:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 800e1d6:	623b      	str	r3, [r7, #32]
 800e1d8:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 800e1dc:	61fb      	str	r3, [r7, #28]
 800e1de:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 800e1e2:	61bb      	str	r3, [r7, #24]
 800e1e4:	f897 30f4 	ldrb.w	r3, [r7, #244]	; 0xf4
 800e1e8:	617b      	str	r3, [r7, #20]
 800e1ea:	f897 30f5 	ldrb.w	r3, [r7, #245]	; 0xf5
 800e1ee:	613b      	str	r3, [r7, #16]
 800e1f0:	f897 30f6 	ldrb.w	r3, [r7, #246]	; 0xf6
 800e1f4:	60fb      	str	r3, [r7, #12]
 800e1f6:	f897 30f7 	ldrb.w	r3, [r7, #247]	; 0xf7
 800e1fa:	60bb      	str	r3, [r7, #8]
 800e1fc:	f897 30f8 	ldrb.w	r3, [r7, #248]	; 0xf8
 800e200:	607b      	str	r3, [r7, #4]
 800e202:	f897 30f9 	ldrb.w	r3, [r7, #249]	; 0xf9
 800e206:	4619      	mov	r1, r3
 800e208:	f897 30fa 	ldrb.w	r3, [r7, #250]	; 0xfa
 800e20c:	461a      	mov	r2, r3
 800e20e:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800e212:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800e216:	930d      	str	r3, [sp, #52]	; 0x34
 800e218:	920c      	str	r2, [sp, #48]	; 0x30
 800e21a:	910b      	str	r1, [sp, #44]	; 0x2c
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	920a      	str	r2, [sp, #40]	; 0x28
 800e220:	68ba      	ldr	r2, [r7, #8]
 800e222:	9209      	str	r2, [sp, #36]	; 0x24
 800e224:	68fa      	ldr	r2, [r7, #12]
 800e226:	9208      	str	r2, [sp, #32]
 800e228:	693a      	ldr	r2, [r7, #16]
 800e22a:	9207      	str	r2, [sp, #28]
 800e22c:	697a      	ldr	r2, [r7, #20]
 800e22e:	9206      	str	r2, [sp, #24]
 800e230:	69ba      	ldr	r2, [r7, #24]
 800e232:	9205      	str	r2, [sp, #20]
 800e234:	69fa      	ldr	r2, [r7, #28]
 800e236:	9204      	str	r2, [sp, #16]
 800e238:	6a3b      	ldr	r3, [r7, #32]
 800e23a:	9303      	str	r3, [sp, #12]
 800e23c:	9602      	str	r6, [sp, #8]
 800e23e:	9501      	str	r5, [sp, #4]
 800e240:	9400      	str	r4, [sp, #0]
 800e242:	4673      	mov	r3, lr
 800e244:	4662      	mov	r2, ip
 800e246:	493a      	ldr	r1, [pc, #232]	; (800e330 <cardOperationWithBlockedSector+0x2d8>)
 800e248:	f005 fdbc 	bl	8013dc4 <siprintf>

	              memcpy(finalData + l, ReadDataBuff, strlen((char*)ReadDataBuff));
 800e24c:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800e250:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 800e254:	f5a2 72b2 	sub.w	r2, r2, #356	; 0x164
 800e258:	6812      	ldr	r2, [r2, #0]
 800e25a:	18d4      	adds	r4, r2, r3
 800e25c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e260:	4618      	mov	r0, r3
 800e262:	f7fd ff75 	bl	800c150 <strlen>
 800e266:	4602      	mov	r2, r0
 800e268:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e26c:	4619      	mov	r1, r3
 800e26e:	4620      	mov	r0, r4
 800e270:	f005 fc3c 	bl	8013aec <memcpy>

	              l = l + strlen((char*)ReadDataBuff);
 800e274:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e278:	4618      	mov	r0, r3
 800e27a:	f7fd ff69 	bl	800c150 <strlen>
 800e27e:	4603      	mov	r3, r0
 800e280:	b2da      	uxtb	r2, r3
 800e282:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800e286:	4413      	add	r3, r2
 800e288:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186

	              cardReadStatus = 1;
 800e28c:	2301      	movs	r3, #1
 800e28e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	            }

	            if (status == MI_ERR) {
 800e292:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e296:	2b02      	cmp	r3, #2
 800e298:	d105      	bne.n	800e2a6 <cardOperationWithBlockedSector+0x24e>
	              led(READ_ERR);
 800e29a:	2005      	movs	r0, #5
 800e29c:	f000 f84a 	bl	800e334 <led>
	              cardIDStatus = 0;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	            }
	          }
	          if (status != MI_OK) {
 800e2a6:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d005      	beq.n	800e2ba <cardOperationWithBlockedSector+0x262>
	            led(AUTH_ERR);
 800e2ae:	2004      	movs	r0, #4
 800e2b0:	f000 f840 	bl	800e334 <led>
	            cardIDStatus = 0;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	          }
	        }
	        if (status != MI_OK) {
 800e2ba:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d005      	beq.n	800e2ce <cardOperationWithBlockedSector+0x276>
	          led(TAG_SELECT_ERR);
 800e2c2:	2003      	movs	r0, #3
 800e2c4:	f000 f836 	bl	800e334 <led>
	          cardIDStatus = 0;
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	        }

	      }
	      if (status != MI_OK) {
 800e2ce:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d005      	beq.n	800e2e2 <cardOperationWithBlockedSector+0x28a>
	        led(ANTICOL_ERR);
 800e2d6:	2002      	movs	r0, #2
 800e2d8:	f000 f82c 	bl	800e334 <led>
	        cardIDStatus = 0;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185

	      }

	    }
	    if (status != MI_OK) {
 800e2e2:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d005      	beq.n	800e2f6 <cardOperationWithBlockedSector+0x29e>
	      led(REQUEST_ERR);
 800e2ea:	2001      	movs	r0, #1
 800e2ec:	f000 f822 	bl	800e334 <led>
	      cardIDStatus = 0;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	    }
	  }
	  if(cardIDStatus == 1 && cardReadStatus == 1){
 800e2f6:	f897 3185 	ldrb.w	r3, [r7, #389]	; 0x185
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d10b      	bne.n	800e316 <cardOperationWithBlockedSector+0x2be>
 800e2fe:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800e302:	2b01      	cmp	r3, #1
 800e304:	d107      	bne.n	800e316 <cardOperationWithBlockedSector+0x2be>

	      cardIDStatus = 0;
 800e306:	2300      	movs	r3, #0
 800e308:	f887 3185 	strb.w	r3, [r7, #389]	; 0x185
	      cardReadStatus = 0;
 800e30c:	2300      	movs	r3, #0
 800e30e:	f887 3184 	strb.w	r3, [r7, #388]	; 0x184
	      return 1;
 800e312:	2301      	movs	r3, #1
 800e314:	e000      	b.n	800e318 <cardOperationWithBlockedSector+0x2c0>
	    }
	  return 0;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	f507 77c6 	add.w	r7, r7, #396	; 0x18c
 800e31e:	46bd      	mov	sp, r7
 800e320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e322:	bf00      	nop
 800e324:	080147d0 	.word	0x080147d0
 800e328:	200003d8 	.word	0x200003d8
 800e32c:	08014750 	.word	0x08014750
 800e330:	080147a0 	.word	0x080147a0

0800e334 <led>:
  }
  else {
	  goto start;
  }
}
void led(uint8_t n) {
 800e334:	b580      	push	{r7, lr}
 800e336:	b084      	sub	sp, #16
 800e338:	af00      	add	r7, sp, #0
 800e33a:	4603      	mov	r3, r0
 800e33c:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < n; i++) {
 800e33e:	2300      	movs	r3, #0
 800e340:	73fb      	strb	r3, [r7, #15]
 800e342:	e014      	b.n	800e36e <led+0x3a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);    // LED1 ON
 800e344:	2200      	movs	r2, #0
 800e346:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e34a:	480d      	ldr	r0, [pc, #52]	; (800e380 <led+0x4c>)
 800e34c:	f000 ff04 	bl	800f158 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e350:	2064      	movs	r0, #100	; 0x64
 800e352:	f000 fb99 	bl	800ea88 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);    // LED1 OFF
 800e356:	2201      	movs	r2, #1
 800e358:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e35c:	4808      	ldr	r0, [pc, #32]	; (800e380 <led+0x4c>)
 800e35e:	f000 fefb 	bl	800f158 <HAL_GPIO_WritePin>
		HAL_Delay(100);
 800e362:	2064      	movs	r0, #100	; 0x64
 800e364:	f000 fb90 	bl	800ea88 <HAL_Delay>
	for (uint8_t i = 0; i < n; i++) {
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	3301      	adds	r3, #1
 800e36c:	73fb      	strb	r3, [r7, #15]
 800e36e:	7bfa      	ldrb	r2, [r7, #15]
 800e370:	79fb      	ldrb	r3, [r7, #7]
 800e372:	429a      	cmp	r2, r3
 800e374:	d3e6      	bcc.n	800e344 <led+0x10>
	}
}
 800e376:	bf00      	nop
 800e378:	bf00      	nop
 800e37a:	3710      	adds	r7, #16
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}
 800e380:	40011000 	.word	0x40011000

0800e384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800e38a:	4b18      	ldr	r3, [pc, #96]	; (800e3ec <HAL_MspInit+0x68>)
 800e38c:	699b      	ldr	r3, [r3, #24]
 800e38e:	4a17      	ldr	r2, [pc, #92]	; (800e3ec <HAL_MspInit+0x68>)
 800e390:	f043 0301 	orr.w	r3, r3, #1
 800e394:	6193      	str	r3, [r2, #24]
 800e396:	4b15      	ldr	r3, [pc, #84]	; (800e3ec <HAL_MspInit+0x68>)
 800e398:	699b      	ldr	r3, [r3, #24]
 800e39a:	f003 0301 	and.w	r3, r3, #1
 800e39e:	60bb      	str	r3, [r7, #8]
 800e3a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800e3a2:	4b12      	ldr	r3, [pc, #72]	; (800e3ec <HAL_MspInit+0x68>)
 800e3a4:	69db      	ldr	r3, [r3, #28]
 800e3a6:	4a11      	ldr	r2, [pc, #68]	; (800e3ec <HAL_MspInit+0x68>)
 800e3a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e3ac:	61d3      	str	r3, [r2, #28]
 800e3ae:	4b0f      	ldr	r3, [pc, #60]	; (800e3ec <HAL_MspInit+0x68>)
 800e3b0:	69db      	ldr	r3, [r3, #28]
 800e3b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3b6:	607b      	str	r3, [r7, #4]
 800e3b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	210f      	movs	r1, #15
 800e3be:	f06f 0001 	mvn.w	r0, #1
 800e3c2:	f000 fc5c 	bl	800ec7e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800e3c6:	4b0a      	ldr	r3, [pc, #40]	; (800e3f0 <HAL_MspInit+0x6c>)
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	60fb      	str	r3, [r7, #12]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800e3d2:	60fb      	str	r3, [r7, #12]
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e3da:	60fb      	str	r3, [r7, #12]
 800e3dc:	4a04      	ldr	r2, [pc, #16]	; (800e3f0 <HAL_MspInit+0x6c>)
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e3e2:	bf00      	nop
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	40021000 	.word	0x40021000
 800e3f0:	40010000 	.word	0x40010000

0800e3f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b088      	sub	sp, #32
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e3fc:	f107 0310 	add.w	r3, r7, #16
 800e400:	2200      	movs	r2, #0
 800e402:	601a      	str	r2, [r3, #0]
 800e404:	605a      	str	r2, [r3, #4]
 800e406:	609a      	str	r2, [r3, #8]
 800e408:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	4a15      	ldr	r2, [pc, #84]	; (800e464 <HAL_I2C_MspInit+0x70>)
 800e410:	4293      	cmp	r3, r2
 800e412:	d123      	bne.n	800e45c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e414:	4b14      	ldr	r3, [pc, #80]	; (800e468 <HAL_I2C_MspInit+0x74>)
 800e416:	699b      	ldr	r3, [r3, #24]
 800e418:	4a13      	ldr	r2, [pc, #76]	; (800e468 <HAL_I2C_MspInit+0x74>)
 800e41a:	f043 0308 	orr.w	r3, r3, #8
 800e41e:	6193      	str	r3, [r2, #24]
 800e420:	4b11      	ldr	r3, [pc, #68]	; (800e468 <HAL_I2C_MspInit+0x74>)
 800e422:	699b      	ldr	r3, [r3, #24]
 800e424:	f003 0308 	and.w	r3, r3, #8
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800e42c:	23c0      	movs	r3, #192	; 0xc0
 800e42e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800e430:	2312      	movs	r3, #18
 800e432:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e434:	2303      	movs	r3, #3
 800e436:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e438:	f107 0310 	add.w	r3, r7, #16
 800e43c:	4619      	mov	r1, r3
 800e43e:	480b      	ldr	r0, [pc, #44]	; (800e46c <HAL_I2C_MspInit+0x78>)
 800e440:	f000 fd06 	bl	800ee50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800e444:	4b08      	ldr	r3, [pc, #32]	; (800e468 <HAL_I2C_MspInit+0x74>)
 800e446:	69db      	ldr	r3, [r3, #28]
 800e448:	4a07      	ldr	r2, [pc, #28]	; (800e468 <HAL_I2C_MspInit+0x74>)
 800e44a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e44e:	61d3      	str	r3, [r2, #28]
 800e450:	4b05      	ldr	r3, [pc, #20]	; (800e468 <HAL_I2C_MspInit+0x74>)
 800e452:	69db      	ldr	r3, [r3, #28]
 800e454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e458:	60bb      	str	r3, [r7, #8]
 800e45a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800e45c:	bf00      	nop
 800e45e:	3720      	adds	r7, #32
 800e460:	46bd      	mov	sp, r7
 800e462:	bd80      	pop	{r7, pc}
 800e464:	40005400 	.word	0x40005400
 800e468:	40021000 	.word	0x40021000
 800e46c:	40010c00 	.word	0x40010c00

0800e470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b088      	sub	sp, #32
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e478:	f107 0310 	add.w	r3, r7, #16
 800e47c:	2200      	movs	r2, #0
 800e47e:	601a      	str	r2, [r3, #0]
 800e480:	605a      	str	r2, [r3, #4]
 800e482:	609a      	str	r2, [r3, #8]
 800e484:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a1b      	ldr	r2, [pc, #108]	; (800e4f8 <HAL_SPI_MspInit+0x88>)
 800e48c:	4293      	cmp	r3, r2
 800e48e:	d12f      	bne.n	800e4f0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800e490:	4b1a      	ldr	r3, [pc, #104]	; (800e4fc <HAL_SPI_MspInit+0x8c>)
 800e492:	699b      	ldr	r3, [r3, #24]
 800e494:	4a19      	ldr	r2, [pc, #100]	; (800e4fc <HAL_SPI_MspInit+0x8c>)
 800e496:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e49a:	6193      	str	r3, [r2, #24]
 800e49c:	4b17      	ldr	r3, [pc, #92]	; (800e4fc <HAL_SPI_MspInit+0x8c>)
 800e49e:	699b      	ldr	r3, [r3, #24]
 800e4a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e4a4:	60fb      	str	r3, [r7, #12]
 800e4a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4a8:	4b14      	ldr	r3, [pc, #80]	; (800e4fc <HAL_SPI_MspInit+0x8c>)
 800e4aa:	699b      	ldr	r3, [r3, #24]
 800e4ac:	4a13      	ldr	r2, [pc, #76]	; (800e4fc <HAL_SPI_MspInit+0x8c>)
 800e4ae:	f043 0304 	orr.w	r3, r3, #4
 800e4b2:	6193      	str	r3, [r2, #24]
 800e4b4:	4b11      	ldr	r3, [pc, #68]	; (800e4fc <HAL_SPI_MspInit+0x8c>)
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	f003 0304 	and.w	r3, r3, #4
 800e4bc:	60bb      	str	r3, [r7, #8]
 800e4be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800e4c0:	23a0      	movs	r3, #160	; 0xa0
 800e4c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e4c8:	2303      	movs	r3, #3
 800e4ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4cc:	f107 0310 	add.w	r3, r7, #16
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	480b      	ldr	r0, [pc, #44]	; (800e500 <HAL_SPI_MspInit+0x90>)
 800e4d4:	f000 fcbc 	bl	800ee50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800e4d8:	2340      	movs	r3, #64	; 0x40
 800e4da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e4e4:	f107 0310 	add.w	r3, r7, #16
 800e4e8:	4619      	mov	r1, r3
 800e4ea:	4805      	ldr	r0, [pc, #20]	; (800e500 <HAL_SPI_MspInit+0x90>)
 800e4ec:	f000 fcb0 	bl	800ee50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800e4f0:	bf00      	nop
 800e4f2:	3720      	adds	r7, #32
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	40013000 	.word	0x40013000
 800e4fc:	40021000 	.word	0x40021000
 800e500:	40010800 	.word	0x40010800

0800e504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08a      	sub	sp, #40	; 0x28
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e50c:	f107 0318 	add.w	r3, r7, #24
 800e510:	2200      	movs	r2, #0
 800e512:	601a      	str	r2, [r3, #0]
 800e514:	605a      	str	r2, [r3, #4]
 800e516:	609a      	str	r2, [r3, #8]
 800e518:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	4a3b      	ldr	r2, [pc, #236]	; (800e60c <HAL_UART_MspInit+0x108>)
 800e520:	4293      	cmp	r3, r2
 800e522:	d13a      	bne.n	800e59a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800e524:	4b3a      	ldr	r3, [pc, #232]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e526:	699b      	ldr	r3, [r3, #24]
 800e528:	4a39      	ldr	r2, [pc, #228]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e52a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e52e:	6193      	str	r3, [r2, #24]
 800e530:	4b37      	ldr	r3, [pc, #220]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e532:	699b      	ldr	r3, [r3, #24]
 800e534:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e538:	617b      	str	r3, [r7, #20]
 800e53a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e53c:	4b34      	ldr	r3, [pc, #208]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e53e:	699b      	ldr	r3, [r3, #24]
 800e540:	4a33      	ldr	r2, [pc, #204]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e542:	f043 0304 	orr.w	r3, r3, #4
 800e546:	6193      	str	r3, [r2, #24]
 800e548:	4b31      	ldr	r3, [pc, #196]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e54a:	699b      	ldr	r3, [r3, #24]
 800e54c:	f003 0304 	and.w	r3, r3, #4
 800e550:	613b      	str	r3, [r7, #16]
 800e552:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800e554:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e558:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e55a:	2302      	movs	r3, #2
 800e55c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e55e:	2303      	movs	r3, #3
 800e560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e562:	f107 0318 	add.w	r3, r7, #24
 800e566:	4619      	mov	r1, r3
 800e568:	482a      	ldr	r0, [pc, #168]	; (800e614 <HAL_UART_MspInit+0x110>)
 800e56a:	f000 fc71 	bl	800ee50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800e56e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e574:	2300      	movs	r3, #0
 800e576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e578:	2300      	movs	r3, #0
 800e57a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e57c:	f107 0318 	add.w	r3, r7, #24
 800e580:	4619      	mov	r1, r3
 800e582:	4824      	ldr	r0, [pc, #144]	; (800e614 <HAL_UART_MspInit+0x110>)
 800e584:	f000 fc64 	bl	800ee50 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800e588:	2200      	movs	r2, #0
 800e58a:	2105      	movs	r1, #5
 800e58c:	2025      	movs	r0, #37	; 0x25
 800e58e:	f000 fb76 	bl	800ec7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800e592:	2025      	movs	r0, #37	; 0x25
 800e594:	f000 fb8f 	bl	800ecb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800e598:	e034      	b.n	800e604 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	4a1e      	ldr	r2, [pc, #120]	; (800e618 <HAL_UART_MspInit+0x114>)
 800e5a0:	4293      	cmp	r3, r2
 800e5a2:	d12f      	bne.n	800e604 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e5a4:	4b1a      	ldr	r3, [pc, #104]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e5a6:	69db      	ldr	r3, [r3, #28]
 800e5a8:	4a19      	ldr	r2, [pc, #100]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e5aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e5ae:	61d3      	str	r3, [r2, #28]
 800e5b0:	4b17      	ldr	r3, [pc, #92]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e5b2:	69db      	ldr	r3, [r3, #28]
 800e5b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5b8:	60fb      	str	r3, [r7, #12]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e5bc:	4b14      	ldr	r3, [pc, #80]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	4a13      	ldr	r2, [pc, #76]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e5c2:	f043 0304 	orr.w	r3, r3, #4
 800e5c6:	6193      	str	r3, [r2, #24]
 800e5c8:	4b11      	ldr	r3, [pc, #68]	; (800e610 <HAL_UART_MspInit+0x10c>)
 800e5ca:	699b      	ldr	r3, [r3, #24]
 800e5cc:	f003 0304 	and.w	r3, r3, #4
 800e5d0:	60bb      	str	r3, [r7, #8]
 800e5d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800e5d4:	2304      	movs	r3, #4
 800e5d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5d8:	2302      	movs	r3, #2
 800e5da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800e5dc:	2303      	movs	r3, #3
 800e5de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5e0:	f107 0318 	add.w	r3, r7, #24
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	480b      	ldr	r0, [pc, #44]	; (800e614 <HAL_UART_MspInit+0x110>)
 800e5e8:	f000 fc32 	bl	800ee50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800e5ec:	2308      	movs	r3, #8
 800e5ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e5f8:	f107 0318 	add.w	r3, r7, #24
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4805      	ldr	r0, [pc, #20]	; (800e614 <HAL_UART_MspInit+0x110>)
 800e600:	f000 fc26 	bl	800ee50 <HAL_GPIO_Init>
}
 800e604:	bf00      	nop
 800e606:	3728      	adds	r7, #40	; 0x28
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	40013800 	.word	0x40013800
 800e610:	40021000 	.word	0x40021000
 800e614:	40010800 	.word	0x40010800
 800e618:	40004400 	.word	0x40004400

0800e61c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e61c:	b480      	push	{r7}
 800e61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e620:	e7fe      	b.n	800e620 <NMI_Handler+0x4>

0800e622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e622:	b480      	push	{r7}
 800e624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e626:	e7fe      	b.n	800e626 <HardFault_Handler+0x4>

0800e628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e628:	b480      	push	{r7}
 800e62a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e62c:	e7fe      	b.n	800e62c <MemManage_Handler+0x4>

0800e62e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e62e:	b480      	push	{r7}
 800e630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e632:	e7fe      	b.n	800e632 <BusFault_Handler+0x4>

0800e634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e634:	b480      	push	{r7}
 800e636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e638:	e7fe      	b.n	800e638 <UsageFault_Handler+0x4>

0800e63a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e63a:	b480      	push	{r7}
 800e63c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e63e:	bf00      	nop
 800e640:	46bd      	mov	sp, r7
 800e642:	bc80      	pop	{r7}
 800e644:	4770      	bx	lr

0800e646 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e646:	b580      	push	{r7, lr}
 800e648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e64a:	f000 fa01 	bl	800ea50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800e64e:	f004 fc0b 	bl	8012e68 <xTaskGetSchedulerState>
 800e652:	4603      	mov	r3, r0
 800e654:	2b01      	cmp	r3, #1
 800e656:	d001      	beq.n	800e65c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800e658:	f004 ffb6 	bl	80135c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e65c:	bf00      	nop
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800e664:	4802      	ldr	r0, [pc, #8]	; (800e670 <USART1_IRQHandler+0x10>)
 800e666:	f002 fac1 	bl	8010bec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800e66a:	bf00      	nop
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	20000630 	.word	0x20000630

0800e674 <AppruveSound>:
#define resetAddress 0x08000000
#define STR_HELPER(x) #x
#define STR(x) STR_HELPER(x)
#define currentTerminal 164522975789130

void AppruveSound() {
 800e674:	b580      	push	{r7, lr}
 800e676:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e678:	2101      	movs	r1, #1
 800e67a:	4815      	ldr	r0, [pc, #84]	; (800e6d0 <AppruveSound+0x5c>)
 800e67c:	f000 fd84 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e680:	2050      	movs	r0, #80	; 0x50
 800e682:	f000 fa01 	bl	800ea88 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e686:	2101      	movs	r1, #1
 800e688:	4811      	ldr	r0, [pc, #68]	; (800e6d0 <AppruveSound+0x5c>)
 800e68a:	f000 fd7d 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e68e:	2050      	movs	r0, #80	; 0x50
 800e690:	f000 f9fa 	bl	800ea88 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e694:	2101      	movs	r1, #1
 800e696:	480e      	ldr	r0, [pc, #56]	; (800e6d0 <AppruveSound+0x5c>)
 800e698:	f000 fd76 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e69c:	2050      	movs	r0, #80	; 0x50
 800e69e:	f000 f9f3 	bl	800ea88 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e6a2:	2101      	movs	r1, #1
 800e6a4:	480a      	ldr	r0, [pc, #40]	; (800e6d0 <AppruveSound+0x5c>)
 800e6a6:	f000 fd6f 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e6aa:	2050      	movs	r0, #80	; 0x50
 800e6ac:	f000 f9ec 	bl	800ea88 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e6b0:	2101      	movs	r1, #1
 800e6b2:	4807      	ldr	r0, [pc, #28]	; (800e6d0 <AppruveSound+0x5c>)
 800e6b4:	f000 fd68 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e6b8:	2050      	movs	r0, #80	; 0x50
 800e6ba:	f000 f9e5 	bl	800ea88 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e6be:	2101      	movs	r1, #1
 800e6c0:	4803      	ldr	r0, [pc, #12]	; (800e6d0 <AppruveSound+0x5c>)
 800e6c2:	f000 fd61 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(80);
 800e6c6:	2050      	movs	r0, #80	; 0x50
 800e6c8:	f000 f9de 	bl	800ea88 <HAL_Delay>
}
 800e6cc:	bf00      	nop
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	40010c00 	.word	0x40010c00

0800e6d4 <ErrorSound>:
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);
	HAL_Delay(1000);
	HAL_GPIO_TogglePin(GPIOB, RELAY_Pin);

}
void ErrorSound() {
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e6d8:	2101      	movs	r1, #1
 800e6da:	480e      	ldr	r0, [pc, #56]	; (800e714 <ErrorSound+0x40>)
 800e6dc:	f000 fd54 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e6e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e6e4:	f000 f9d0 	bl	800ea88 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e6e8:	2101      	movs	r1, #1
 800e6ea:	480a      	ldr	r0, [pc, #40]	; (800e714 <ErrorSound+0x40>)
 800e6ec:	f000 fd4c 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800e6f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e6f4:	f000 f9c8 	bl	800ea88 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e6f8:	2101      	movs	r1, #1
 800e6fa:	4806      	ldr	r0, [pc, #24]	; (800e714 <ErrorSound+0x40>)
 800e6fc:	f000 fd44 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(1000);
 800e700:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e704:	f000 f9c0 	bl	800ea88 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e708:	2101      	movs	r1, #1
 800e70a:	4802      	ldr	r0, [pc, #8]	; (800e714 <ErrorSound+0x40>)
 800e70c:	f000 fd3c 	bl	800f188 <HAL_GPIO_TogglePin>

}
 800e710:	bf00      	nop
 800e712:	bd80      	pop	{r7, pc}
 800e714:	40010c00 	.word	0x40010c00

0800e718 <CardReadSound>:
void CardReadSound() {
 800e718:	b580      	push	{r7, lr}
 800e71a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e71c:	2101      	movs	r1, #1
 800e71e:	4806      	ldr	r0, [pc, #24]	; (800e738 <CardReadSound+0x20>)
 800e720:	f000 fd32 	bl	800f188 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 800e724:	2032      	movs	r0, #50	; 0x32
 800e726:	f000 f9af 	bl	800ea88 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, BUZZER_Pin);
 800e72a:	2101      	movs	r1, #1
 800e72c:	4802      	ldr	r0, [pc, #8]	; (800e738 <CardReadSound+0x20>)
 800e72e:	f000 fd2b 	bl	800f188 <HAL_GPIO_TogglePin>

}
 800e732:	bf00      	nop
 800e734:	bd80      	pop	{r7, pc}
 800e736:	bf00      	nop
 800e738:	40010c00 	.word	0x40010c00

0800e73c <takeData>:

void takeData(uint8_t* data, int length, uint8_t* dataToDisplay){
 800e73c:	b480      	push	{r7}
 800e73e:	b089      	sub	sp, #36	; 0x24
 800e740:	af00      	add	r7, sp, #0
 800e742:	60f8      	str	r0, [r7, #12]
 800e744:	60b9      	str	r1, [r7, #8]
 800e746:	607a      	str	r2, [r7, #4]
	int i,k,j;
	k = 0;
 800e748:	2300      	movs	r3, #0
 800e74a:	61bb      	str	r3, [r7, #24]
	for(i =0; i< length; i++){
 800e74c:	2300      	movs	r3, #0
 800e74e:	61fb      	str	r3, [r7, #28]
 800e750:	e008      	b.n	800e764 <takeData+0x28>
	  if(data[i] == ',')
 800e752:	69fb      	ldr	r3, [r7, #28]
 800e754:	68fa      	ldr	r2, [r7, #12]
 800e756:	4413      	add	r3, r2
 800e758:	781b      	ldrb	r3, [r3, #0]
 800e75a:	2b2c      	cmp	r3, #44	; 0x2c
 800e75c:	d007      	beq.n	800e76e <takeData+0x32>
	for(i =0; i< length; i++){
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	3301      	adds	r3, #1
 800e762:	61fb      	str	r3, [r7, #28]
 800e764:	69fa      	ldr	r2, [r7, #28]
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	429a      	cmp	r2, r3
 800e76a:	dbf2      	blt.n	800e752 <takeData+0x16>
 800e76c:	e000      	b.n	800e770 <takeData+0x34>
	  {
		  break;
 800e76e:	bf00      	nop
	  }
	}
	for(j = i + 1; j<length - 1; j++){
 800e770:	69fb      	ldr	r3, [r7, #28]
 800e772:	3301      	adds	r3, #1
 800e774:	617b      	str	r3, [r7, #20]
 800e776:	e00d      	b.n	800e794 <takeData+0x58>
		dataToDisplay[k++] = data[j];
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	68fa      	ldr	r2, [r7, #12]
 800e77c:	441a      	add	r2, r3
 800e77e:	69bb      	ldr	r3, [r7, #24]
 800e780:	1c59      	adds	r1, r3, #1
 800e782:	61b9      	str	r1, [r7, #24]
 800e784:	4619      	mov	r1, r3
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	440b      	add	r3, r1
 800e78a:	7812      	ldrb	r2, [r2, #0]
 800e78c:	701a      	strb	r2, [r3, #0]
	for(j = i + 1; j<length - 1; j++){
 800e78e:	697b      	ldr	r3, [r7, #20]
 800e790:	3301      	adds	r3, #1
 800e792:	617b      	str	r3, [r7, #20]
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	3b01      	subs	r3, #1
 800e798:	697a      	ldr	r2, [r7, #20]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	dbec      	blt.n	800e778 <takeData+0x3c>
	}

	dataToDisplay[k] = '\0';
 800e79e:	69bb      	ldr	r3, [r7, #24]
 800e7a0:	687a      	ldr	r2, [r7, #4]
 800e7a2:	4413      	add	r3, r2
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	701a      	strb	r2, [r3, #0]

}
 800e7a8:	bf00      	nop
 800e7aa:	3724      	adds	r7, #36	; 0x24
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bc80      	pop	{r7}
 800e7b0:	4770      	bx	lr
	...

0800e7b4 <insert>:

void insert(uint8_t* main){
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b088      	sub	sp, #32
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]

    int lenght = strlen((char*)main);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f7fd fcc7 	bl	800c150 <strlen>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	61bb      	str	r3, [r7, #24]
    char* operationTypePtr = strstr((char*)main, "\"payment");
 800e7c6:	491c      	ldr	r1, [pc, #112]	; (800e838 <insert+0x84>)
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f005 fb28 	bl	8013e1e <strstr>
 800e7ce:	6178      	str	r0, [r7, #20]
    char* value = strchr((char*)operationTypePtr, 'p');
 800e7d0:	2170      	movs	r1, #112	; 0x70
 800e7d2:	6978      	ldr	r0, [r7, #20]
 800e7d4:	f005 fb16 	bl	8013e04 <strchr>
 800e7d8:	6138      	str	r0, [r7, #16]
    int index = value - (char*)main;
 800e7da:	693a      	ldr	r2, [r7, #16]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	1ad3      	subs	r3, r2, r3
 800e7e0:	60fb      	str	r3, [r7, #12]


    for(int i = lenght+4; i>index; i--){
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	3304      	adds	r3, #4
 800e7e6:	61fb      	str	r3, [r7, #28]
 800e7e8:	e00b      	b.n	800e802 <insert+0x4e>
        main[i] = main[i - 4];
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	3b04      	subs	r3, #4
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	441a      	add	r2, r3
 800e7f2:	69fb      	ldr	r3, [r7, #28]
 800e7f4:	6879      	ldr	r1, [r7, #4]
 800e7f6:	440b      	add	r3, r1
 800e7f8:	7812      	ldrb	r2, [r2, #0]
 800e7fa:	701a      	strb	r2, [r3, #0]
    for(int i = lenght+4; i>index; i--){
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	61fb      	str	r3, [r7, #28]
 800e802:	69fa      	ldr	r2, [r7, #28]
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	429a      	cmp	r2, r3
 800e808:	dcef      	bgt.n	800e7ea <insert+0x36>
    }

    char* valueStart = strchr((char*)operationTypePtr, '\"') + 1;
 800e80a:	2122      	movs	r1, #34	; 0x22
 800e80c:	6978      	ldr	r0, [r7, #20]
 800e80e:	f005 faf9 	bl	8013e04 <strchr>
 800e812:	4603      	mov	r3, r0
 800e814:	3301      	adds	r3, #1
 800e816:	60bb      	str	r3, [r7, #8]
    strncpy((char*)valueStart, "makepayment", 11);
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	4908      	ldr	r1, [pc, #32]	; (800e83c <insert+0x88>)
 800e81c:	461a      	mov	r2, r3
 800e81e:	460b      	mov	r3, r1
 800e820:	cb03      	ldmia	r3!, {r0, r1}
 800e822:	6010      	str	r0, [r2, #0]
 800e824:	6051      	str	r1, [r2, #4]
 800e826:	8819      	ldrh	r1, [r3, #0]
 800e828:	789b      	ldrb	r3, [r3, #2]
 800e82a:	8111      	strh	r1, [r2, #8]
 800e82c:	7293      	strb	r3, [r2, #10]

}
 800e82e:	bf00      	nop
 800e830:	3720      	adds	r7, #32
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}
 800e836:	bf00      	nop
 800e838:	08014890 	.word	0x08014890
 800e83c:	0801489c 	.word	0x0801489c

0800e840 <takeStatus>:

int takeStatus(uint8_t* data, int length){
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
	int i;
	uint8_t STATUSSTR[3];
	for(i =0; i< length; i++){
 800e84a:	2300      	movs	r3, #0
 800e84c:	617b      	str	r3, [r7, #20]
 800e84e:	e008      	b.n	800e862 <takeStatus+0x22>
	  if(data[i] == '<')
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	4413      	add	r3, r2
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	2b3c      	cmp	r3, #60	; 0x3c
 800e85a:	d007      	beq.n	800e86c <takeStatus+0x2c>
	for(i =0; i< length; i++){
 800e85c:	697b      	ldr	r3, [r7, #20]
 800e85e:	3301      	adds	r3, #1
 800e860:	617b      	str	r3, [r7, #20]
 800e862:	697a      	ldr	r2, [r7, #20]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	429a      	cmp	r2, r3
 800e868:	dbf2      	blt.n	800e850 <takeStatus+0x10>
 800e86a:	e000      	b.n	800e86e <takeStatus+0x2e>
	  {
		  break;
 800e86c:	bf00      	nop
	  }
	}

	STATUSSTR[0] = data[i+1];
 800e86e:	697b      	ldr	r3, [r7, #20]
 800e870:	3301      	adds	r3, #1
 800e872:	687a      	ldr	r2, [r7, #4]
 800e874:	4413      	add	r3, r2
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	733b      	strb	r3, [r7, #12]
	STATUSSTR[1] = data[i+2];
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	3302      	adds	r3, #2
 800e87e:	687a      	ldr	r2, [r7, #4]
 800e880:	4413      	add	r3, r2
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	737b      	strb	r3, [r7, #13]
	STATUSSTR[2] = data[i+3];
 800e886:	697b      	ldr	r3, [r7, #20]
 800e888:	3303      	adds	r3, #3
 800e88a:	687a      	ldr	r2, [r7, #4]
 800e88c:	4413      	add	r3, r2
 800e88e:	781b      	ldrb	r3, [r3, #0]
 800e890:	73bb      	strb	r3, [r7, #14]
	if(STATUSSTR[0] == 'E' && STATUSSTR[1] == 'R' && STATUSSTR[2] == 'A'){
 800e892:	7b3b      	ldrb	r3, [r7, #12]
 800e894:	2b45      	cmp	r3, #69	; 0x45
 800e896:	d109      	bne.n	800e8ac <takeStatus+0x6c>
 800e898:	7b7b      	ldrb	r3, [r7, #13]
 800e89a:	2b52      	cmp	r3, #82	; 0x52
 800e89c:	d106      	bne.n	800e8ac <takeStatus+0x6c>
 800e89e:	7bbb      	ldrb	r3, [r7, #14]
 800e8a0:	2b41      	cmp	r3, #65	; 0x41
 800e8a2:	d103      	bne.n	800e8ac <takeStatus+0x6c>
		jumpToAddress(resetAddress);
 800e8a4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800e8a8:	f7fd fe39 	bl	800c51e <jumpToAddress>
	}
	int Status = atoi((char*)STATUSSTR);
 800e8ac:	f107 030c 	add.w	r3, r7, #12
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f005 f8e3 	bl	8013a7c <atoi>
 800e8b6:	6138      	str	r0, [r7, #16]
	return Status;
 800e8b8:	693b      	ldr	r3, [r7, #16]

}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3718      	adds	r7, #24
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
	...

0800e8c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800e8cc:	4a14      	ldr	r2, [pc, #80]	; (800e920 <_sbrk+0x5c>)
 800e8ce:	4b15      	ldr	r3, [pc, #84]	; (800e924 <_sbrk+0x60>)
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800e8d4:	697b      	ldr	r3, [r7, #20]
 800e8d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800e8d8:	4b13      	ldr	r3, [pc, #76]	; (800e928 <_sbrk+0x64>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d102      	bne.n	800e8e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800e8e0:	4b11      	ldr	r3, [pc, #68]	; (800e928 <_sbrk+0x64>)
 800e8e2:	4a12      	ldr	r2, [pc, #72]	; (800e92c <_sbrk+0x68>)
 800e8e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800e8e6:	4b10      	ldr	r3, [pc, #64]	; (800e928 <_sbrk+0x64>)
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	693a      	ldr	r2, [r7, #16]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d207      	bcs.n	800e904 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800e8f4:	f005 f8c6 	bl	8013a84 <__errno>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	220c      	movs	r2, #12
 800e8fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800e8fe:	f04f 33ff 	mov.w	r3, #4294967295
 800e902:	e009      	b.n	800e918 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800e904:	4b08      	ldr	r3, [pc, #32]	; (800e928 <_sbrk+0x64>)
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800e90a:	4b07      	ldr	r3, [pc, #28]	; (800e928 <_sbrk+0x64>)
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	4413      	add	r3, r2
 800e912:	4a05      	ldr	r2, [pc, #20]	; (800e928 <_sbrk+0x64>)
 800e914:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800e916:	68fb      	ldr	r3, [r7, #12]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3718      	adds	r7, #24
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}
 800e920:	20005000 	.word	0x20005000
 800e924:	00000400 	.word	0x00000400
 800e928:	20000700 	.word	0x20000700
 800e92c:	200027a8 	.word	0x200027a8

0800e930 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800e930:	b480      	push	{r7}
 800e932:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800e934:	bf00      	nop
 800e936:	46bd      	mov	sp, r7
 800e938:	bc80      	pop	{r7}
 800e93a:	4770      	bx	lr

0800e93c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800e93c:	f7ff fff8 	bl	800e930 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800e940:	480b      	ldr	r0, [pc, #44]	; (800e970 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800e942:	490c      	ldr	r1, [pc, #48]	; (800e974 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800e944:	4a0c      	ldr	r2, [pc, #48]	; (800e978 <LoopFillZerobss+0x16>)
  movs r3, #0
 800e946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e948:	e002      	b.n	800e950 <LoopCopyDataInit>

0800e94a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e94a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e94c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e94e:	3304      	adds	r3, #4

0800e950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e954:	d3f9      	bcc.n	800e94a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e956:	4a09      	ldr	r2, [pc, #36]	; (800e97c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800e958:	4c09      	ldr	r4, [pc, #36]	; (800e980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e95a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e95c:	e001      	b.n	800e962 <LoopFillZerobss>

0800e95e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e95e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e960:	3204      	adds	r2, #4

0800e962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e964:	d3fb      	bcc.n	800e95e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800e966:	f005 f893 	bl	8013a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800e96a:	f7fe fc2b 	bl	800d1c4 <main>
  bx lr
 800e96e:	4770      	bx	lr
  ldr r0, =_sdata
 800e970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e974:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 800e978:	08014a80 	.word	0x08014a80
  ldr r2, =_sbss
 800e97c:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 800e980:	200027a4 	.word	0x200027a4

0800e984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800e984:	e7fe      	b.n	800e984 <ADC1_2_IRQHandler>
	...

0800e988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e98c:	4b08      	ldr	r3, [pc, #32]	; (800e9b0 <HAL_Init+0x28>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a07      	ldr	r2, [pc, #28]	; (800e9b0 <HAL_Init+0x28>)
 800e992:	f043 0310 	orr.w	r3, r3, #16
 800e996:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e998:	2003      	movs	r0, #3
 800e99a:	f000 f965 	bl	800ec68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e99e:	200f      	movs	r0, #15
 800e9a0:	f000 f826 	bl	800e9f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e9a4:	f7ff fcee 	bl	800e384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e9a8:	2300      	movs	r3, #0
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	40022000 	.word	0x40022000

0800e9b4 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 800e9b8:	4b09      	ldr	r3, [pc, #36]	; (800e9e0 <HAL_DeInit+0x2c>)
 800e9ba:	f04f 32ff 	mov.w	r2, #4294967295
 800e9be:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 800e9c0:	4b07      	ldr	r3, [pc, #28]	; (800e9e0 <HAL_DeInit+0x2c>)
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800e9c6:	4b06      	ldr	r3, [pc, #24]	; (800e9e0 <HAL_DeInit+0x2c>)
 800e9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9cc:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800e9ce:	4b04      	ldr	r3, [pc, #16]	; (800e9e0 <HAL_DeInit+0x2c>)
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800e9d4:	f000 f806 	bl	800e9e4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 800e9d8:	2300      	movs	r3, #0
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	bd80      	pop	{r7, pc}
 800e9de:	bf00      	nop
 800e9e0:	40021000 	.word	0x40021000

0800e9e4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 800e9e4:	b480      	push	{r7}
 800e9e6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 800e9e8:	bf00      	nop
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bc80      	pop	{r7}
 800e9ee:	4770      	bx	lr

0800e9f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b082      	sub	sp, #8
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800e9f8:	4b12      	ldr	r3, [pc, #72]	; (800ea44 <HAL_InitTick+0x54>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	4b12      	ldr	r3, [pc, #72]	; (800ea48 <HAL_InitTick+0x58>)
 800e9fe:	781b      	ldrb	r3, [r3, #0]
 800ea00:	4619      	mov	r1, r3
 800ea02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea06:	fbb3 f3f1 	udiv	r3, r3, r1
 800ea0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea0e:	4618      	mov	r0, r3
 800ea10:	f000 f95f 	bl	800ecd2 <HAL_SYSTICK_Config>
 800ea14:	4603      	mov	r3, r0
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d001      	beq.n	800ea1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800ea1a:	2301      	movs	r3, #1
 800ea1c:	e00e      	b.n	800ea3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2b0f      	cmp	r3, #15
 800ea22:	d80a      	bhi.n	800ea3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ea24:	2200      	movs	r2, #0
 800ea26:	6879      	ldr	r1, [r7, #4]
 800ea28:	f04f 30ff 	mov.w	r0, #4294967295
 800ea2c:	f000 f927 	bl	800ec7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ea30:	4a06      	ldr	r2, [pc, #24]	; (800ea4c <HAL_InitTick+0x5c>)
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ea36:	2300      	movs	r3, #0
 800ea38:	e000      	b.n	800ea3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800ea3a:	2301      	movs	r3, #1
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3708      	adds	r7, #8
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	20000078 	.word	0x20000078
 800ea48:	20000080 	.word	0x20000080
 800ea4c:	2000007c 	.word	0x2000007c

0800ea50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ea50:	b480      	push	{r7}
 800ea52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ea54:	4b05      	ldr	r3, [pc, #20]	; (800ea6c <HAL_IncTick+0x1c>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	461a      	mov	r2, r3
 800ea5a:	4b05      	ldr	r3, [pc, #20]	; (800ea70 <HAL_IncTick+0x20>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4413      	add	r3, r2
 800ea60:	4a03      	ldr	r2, [pc, #12]	; (800ea70 <HAL_IncTick+0x20>)
 800ea62:	6013      	str	r3, [r2, #0]
}
 800ea64:	bf00      	nop
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bc80      	pop	{r7}
 800ea6a:	4770      	bx	lr
 800ea6c:	20000080 	.word	0x20000080
 800ea70:	20000704 	.word	0x20000704

0800ea74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ea74:	b480      	push	{r7}
 800ea76:	af00      	add	r7, sp, #0
  return uwTick;
 800ea78:	4b02      	ldr	r3, [pc, #8]	; (800ea84 <HAL_GetTick+0x10>)
 800ea7a:	681b      	ldr	r3, [r3, #0]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bc80      	pop	{r7}
 800ea82:	4770      	bx	lr
 800ea84:	20000704 	.word	0x20000704

0800ea88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800ea90:	f7ff fff0 	bl	800ea74 <HAL_GetTick>
 800ea94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaa0:	d005      	beq.n	800eaae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800eaa2:	4b0a      	ldr	r3, [pc, #40]	; (800eacc <HAL_Delay+0x44>)
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	4413      	add	r3, r2
 800eaac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800eaae:	bf00      	nop
 800eab0:	f7ff ffe0 	bl	800ea74 <HAL_GetTick>
 800eab4:	4602      	mov	r2, r0
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	1ad3      	subs	r3, r2, r3
 800eaba:	68fa      	ldr	r2, [r7, #12]
 800eabc:	429a      	cmp	r2, r3
 800eabe:	d8f7      	bhi.n	800eab0 <HAL_Delay+0x28>
  {
  }
}
 800eac0:	bf00      	nop
 800eac2:	bf00      	nop
 800eac4:	3710      	adds	r7, #16
 800eac6:	46bd      	mov	sp, r7
 800eac8:	bd80      	pop	{r7, pc}
 800eaca:	bf00      	nop
 800eacc:	20000080 	.word	0x20000080

0800ead0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b085      	sub	sp, #20
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	f003 0307 	and.w	r3, r3, #7
 800eade:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800eae0:	4b0c      	ldr	r3, [pc, #48]	; (800eb14 <__NVIC_SetPriorityGrouping+0x44>)
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800eaec:	4013      	ands	r3, r2
 800eaee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800eaf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800eafc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800eb00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800eb02:	4a04      	ldr	r2, [pc, #16]	; (800eb14 <__NVIC_SetPriorityGrouping+0x44>)
 800eb04:	68bb      	ldr	r3, [r7, #8]
 800eb06:	60d3      	str	r3, [r2, #12]
}
 800eb08:	bf00      	nop
 800eb0a:	3714      	adds	r7, #20
 800eb0c:	46bd      	mov	sp, r7
 800eb0e:	bc80      	pop	{r7}
 800eb10:	4770      	bx	lr
 800eb12:	bf00      	nop
 800eb14:	e000ed00 	.word	0xe000ed00

0800eb18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800eb18:	b480      	push	{r7}
 800eb1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800eb1c:	4b04      	ldr	r3, [pc, #16]	; (800eb30 <__NVIC_GetPriorityGrouping+0x18>)
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	0a1b      	lsrs	r3, r3, #8
 800eb22:	f003 0307 	and.w	r3, r3, #7
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	46bd      	mov	sp, r7
 800eb2a:	bc80      	pop	{r7}
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	e000ed00 	.word	0xe000ed00

0800eb34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	db0b      	blt.n	800eb5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800eb46:	79fb      	ldrb	r3, [r7, #7]
 800eb48:	f003 021f 	and.w	r2, r3, #31
 800eb4c:	4906      	ldr	r1, [pc, #24]	; (800eb68 <__NVIC_EnableIRQ+0x34>)
 800eb4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb52:	095b      	lsrs	r3, r3, #5
 800eb54:	2001      	movs	r0, #1
 800eb56:	fa00 f202 	lsl.w	r2, r0, r2
 800eb5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800eb5e:	bf00      	nop
 800eb60:	370c      	adds	r7, #12
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bc80      	pop	{r7}
 800eb66:	4770      	bx	lr
 800eb68:	e000e100 	.word	0xe000e100

0800eb6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	4603      	mov	r3, r0
 800eb74:	6039      	str	r1, [r7, #0]
 800eb76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	db0a      	blt.n	800eb96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	b2da      	uxtb	r2, r3
 800eb84:	490c      	ldr	r1, [pc, #48]	; (800ebb8 <__NVIC_SetPriority+0x4c>)
 800eb86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb8a:	0112      	lsls	r2, r2, #4
 800eb8c:	b2d2      	uxtb	r2, r2
 800eb8e:	440b      	add	r3, r1
 800eb90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800eb94:	e00a      	b.n	800ebac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	b2da      	uxtb	r2, r3
 800eb9a:	4908      	ldr	r1, [pc, #32]	; (800ebbc <__NVIC_SetPriority+0x50>)
 800eb9c:	79fb      	ldrb	r3, [r7, #7]
 800eb9e:	f003 030f 	and.w	r3, r3, #15
 800eba2:	3b04      	subs	r3, #4
 800eba4:	0112      	lsls	r2, r2, #4
 800eba6:	b2d2      	uxtb	r2, r2
 800eba8:	440b      	add	r3, r1
 800ebaa:	761a      	strb	r2, [r3, #24]
}
 800ebac:	bf00      	nop
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	bc80      	pop	{r7}
 800ebb4:	4770      	bx	lr
 800ebb6:	bf00      	nop
 800ebb8:	e000e100 	.word	0xe000e100
 800ebbc:	e000ed00 	.word	0xe000ed00

0800ebc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b089      	sub	sp, #36	; 0x24
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	60f8      	str	r0, [r7, #12]
 800ebc8:	60b9      	str	r1, [r7, #8]
 800ebca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	f003 0307 	and.w	r3, r3, #7
 800ebd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	f1c3 0307 	rsb	r3, r3, #7
 800ebda:	2b04      	cmp	r3, #4
 800ebdc:	bf28      	it	cs
 800ebde:	2304      	movcs	r3, #4
 800ebe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ebe2:	69fb      	ldr	r3, [r7, #28]
 800ebe4:	3304      	adds	r3, #4
 800ebe6:	2b06      	cmp	r3, #6
 800ebe8:	d902      	bls.n	800ebf0 <NVIC_EncodePriority+0x30>
 800ebea:	69fb      	ldr	r3, [r7, #28]
 800ebec:	3b03      	subs	r3, #3
 800ebee:	e000      	b.n	800ebf2 <NVIC_EncodePriority+0x32>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ebf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ebf8:	69bb      	ldr	r3, [r7, #24]
 800ebfa:	fa02 f303 	lsl.w	r3, r2, r3
 800ebfe:	43da      	mvns	r2, r3
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	401a      	ands	r2, r3
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ec08:	f04f 31ff 	mov.w	r1, #4294967295
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ec12:	43d9      	mvns	r1, r3
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ec18:	4313      	orrs	r3, r2
         );
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3724      	adds	r7, #36	; 0x24
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bc80      	pop	{r7}
 800ec22:	4770      	bx	lr

0800ec24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b082      	sub	sp, #8
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	3b01      	subs	r3, #1
 800ec30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ec34:	d301      	bcc.n	800ec3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ec36:	2301      	movs	r3, #1
 800ec38:	e00f      	b.n	800ec5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ec3a:	4a0a      	ldr	r2, [pc, #40]	; (800ec64 <SysTick_Config+0x40>)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ec42:	210f      	movs	r1, #15
 800ec44:	f04f 30ff 	mov.w	r0, #4294967295
 800ec48:	f7ff ff90 	bl	800eb6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ec4c:	4b05      	ldr	r3, [pc, #20]	; (800ec64 <SysTick_Config+0x40>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ec52:	4b04      	ldr	r3, [pc, #16]	; (800ec64 <SysTick_Config+0x40>)
 800ec54:	2207      	movs	r2, #7
 800ec56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3708      	adds	r7, #8
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
 800ec62:	bf00      	nop
 800ec64:	e000e010 	.word	0xe000e010

0800ec68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b082      	sub	sp, #8
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff ff2d 	bl	800ead0 <__NVIC_SetPriorityGrouping>
}
 800ec76:	bf00      	nop
 800ec78:	3708      	adds	r7, #8
 800ec7a:	46bd      	mov	sp, r7
 800ec7c:	bd80      	pop	{r7, pc}

0800ec7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800ec7e:	b580      	push	{r7, lr}
 800ec80:	b086      	sub	sp, #24
 800ec82:	af00      	add	r7, sp, #0
 800ec84:	4603      	mov	r3, r0
 800ec86:	60b9      	str	r1, [r7, #8]
 800ec88:	607a      	str	r2, [r7, #4]
 800ec8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ec8c:	2300      	movs	r3, #0
 800ec8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ec90:	f7ff ff42 	bl	800eb18 <__NVIC_GetPriorityGrouping>
 800ec94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	68b9      	ldr	r1, [r7, #8]
 800ec9a:	6978      	ldr	r0, [r7, #20]
 800ec9c:	f7ff ff90 	bl	800ebc0 <NVIC_EncodePriority>
 800eca0:	4602      	mov	r2, r0
 800eca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eca6:	4611      	mov	r1, r2
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7ff ff5f 	bl	800eb6c <__NVIC_SetPriority>
}
 800ecae:	bf00      	nop
 800ecb0:	3718      	adds	r7, #24
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ecb6:	b580      	push	{r7, lr}
 800ecb8:	b082      	sub	sp, #8
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ecc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7ff ff35 	bl	800eb34 <__NVIC_EnableIRQ>
}
 800ecca:	bf00      	nop
 800eccc:	3708      	adds	r7, #8
 800ecce:	46bd      	mov	sp, r7
 800ecd0:	bd80      	pop	{r7, pc}

0800ecd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ecd2:	b580      	push	{r7, lr}
 800ecd4:	b082      	sub	sp, #8
 800ecd6:	af00      	add	r7, sp, #0
 800ecd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7ff ffa2 	bl	800ec24 <SysTick_Config>
 800ece0:	4603      	mov	r3, r0
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ecea:	b480      	push	{r7}
 800ecec:	b085      	sub	sp, #20
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	2b02      	cmp	r3, #2
 800ed00:	d008      	beq.n	800ed14 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	2204      	movs	r2, #4
 800ed06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800ed10:	2301      	movs	r3, #1
 800ed12:	e020      	b.n	800ed56 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f022 020e 	bic.w	r2, r2, #14
 800ed22:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	681a      	ldr	r2, [r3, #0]
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f022 0201 	bic.w	r2, r2, #1
 800ed32:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed3c:	2101      	movs	r1, #1
 800ed3e:	fa01 f202 	lsl.w	r2, r1, r2
 800ed42:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2201      	movs	r2, #1
 800ed48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3714      	adds	r7, #20
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bc80      	pop	{r7}
 800ed5e:	4770      	bx	lr

0800ed60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b084      	sub	sp, #16
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	2b02      	cmp	r3, #2
 800ed76:	d005      	beq.n	800ed84 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2204      	movs	r2, #4
 800ed7c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800ed7e:	2301      	movs	r3, #1
 800ed80:	73fb      	strb	r3, [r7, #15]
 800ed82:	e051      	b.n	800ee28 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	f022 020e 	bic.w	r2, r2, #14
 800ed92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	681a      	ldr	r2, [r3, #0]
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	f022 0201 	bic.w	r2, r2, #1
 800eda2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	4a22      	ldr	r2, [pc, #136]	; (800ee34 <HAL_DMA_Abort_IT+0xd4>)
 800edaa:	4293      	cmp	r3, r2
 800edac:	d029      	beq.n	800ee02 <HAL_DMA_Abort_IT+0xa2>
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	4a21      	ldr	r2, [pc, #132]	; (800ee38 <HAL_DMA_Abort_IT+0xd8>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d022      	beq.n	800edfe <HAL_DMA_Abort_IT+0x9e>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	4a1f      	ldr	r2, [pc, #124]	; (800ee3c <HAL_DMA_Abort_IT+0xdc>)
 800edbe:	4293      	cmp	r3, r2
 800edc0:	d01a      	beq.n	800edf8 <HAL_DMA_Abort_IT+0x98>
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	4a1e      	ldr	r2, [pc, #120]	; (800ee40 <HAL_DMA_Abort_IT+0xe0>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d012      	beq.n	800edf2 <HAL_DMA_Abort_IT+0x92>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	4a1c      	ldr	r2, [pc, #112]	; (800ee44 <HAL_DMA_Abort_IT+0xe4>)
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d00a      	beq.n	800edec <HAL_DMA_Abort_IT+0x8c>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a1b      	ldr	r2, [pc, #108]	; (800ee48 <HAL_DMA_Abort_IT+0xe8>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d102      	bne.n	800ede6 <HAL_DMA_Abort_IT+0x86>
 800ede0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ede4:	e00e      	b.n	800ee04 <HAL_DMA_Abort_IT+0xa4>
 800ede6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800edea:	e00b      	b.n	800ee04 <HAL_DMA_Abort_IT+0xa4>
 800edec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800edf0:	e008      	b.n	800ee04 <HAL_DMA_Abort_IT+0xa4>
 800edf2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800edf6:	e005      	b.n	800ee04 <HAL_DMA_Abort_IT+0xa4>
 800edf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800edfc:	e002      	b.n	800ee04 <HAL_DMA_Abort_IT+0xa4>
 800edfe:	2310      	movs	r3, #16
 800ee00:	e000      	b.n	800ee04 <HAL_DMA_Abort_IT+0xa4>
 800ee02:	2301      	movs	r3, #1
 800ee04:	4a11      	ldr	r2, [pc, #68]	; (800ee4c <HAL_DMA_Abort_IT+0xec>)
 800ee06:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2201      	movs	r2, #1
 800ee0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2200      	movs	r2, #0
 800ee14:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	4798      	blx	r3
    } 
  }
  return status;
 800ee28:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3710      	adds	r7, #16
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	40020008 	.word	0x40020008
 800ee38:	4002001c 	.word	0x4002001c
 800ee3c:	40020030 	.word	0x40020030
 800ee40:	40020044 	.word	0x40020044
 800ee44:	40020058 	.word	0x40020058
 800ee48:	4002006c 	.word	0x4002006c
 800ee4c:	40020000 	.word	0x40020000

0800ee50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b08b      	sub	sp, #44	; 0x2c
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
 800ee58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ee62:	e169      	b.n	800f138 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800ee64:	2201      	movs	r2, #1
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	fa02 f303 	lsl.w	r3, r2, r3
 800ee6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	69fa      	ldr	r2, [r7, #28]
 800ee74:	4013      	ands	r3, r2
 800ee76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800ee78:	69ba      	ldr	r2, [r7, #24]
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	f040 8158 	bne.w	800f132 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	4a9a      	ldr	r2, [pc, #616]	; (800f0f0 <HAL_GPIO_Init+0x2a0>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d05e      	beq.n	800ef4a <HAL_GPIO_Init+0xfa>
 800ee8c:	4a98      	ldr	r2, [pc, #608]	; (800f0f0 <HAL_GPIO_Init+0x2a0>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d875      	bhi.n	800ef7e <HAL_GPIO_Init+0x12e>
 800ee92:	4a98      	ldr	r2, [pc, #608]	; (800f0f4 <HAL_GPIO_Init+0x2a4>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d058      	beq.n	800ef4a <HAL_GPIO_Init+0xfa>
 800ee98:	4a96      	ldr	r2, [pc, #600]	; (800f0f4 <HAL_GPIO_Init+0x2a4>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d86f      	bhi.n	800ef7e <HAL_GPIO_Init+0x12e>
 800ee9e:	4a96      	ldr	r2, [pc, #600]	; (800f0f8 <HAL_GPIO_Init+0x2a8>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d052      	beq.n	800ef4a <HAL_GPIO_Init+0xfa>
 800eea4:	4a94      	ldr	r2, [pc, #592]	; (800f0f8 <HAL_GPIO_Init+0x2a8>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d869      	bhi.n	800ef7e <HAL_GPIO_Init+0x12e>
 800eeaa:	4a94      	ldr	r2, [pc, #592]	; (800f0fc <HAL_GPIO_Init+0x2ac>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d04c      	beq.n	800ef4a <HAL_GPIO_Init+0xfa>
 800eeb0:	4a92      	ldr	r2, [pc, #584]	; (800f0fc <HAL_GPIO_Init+0x2ac>)
 800eeb2:	4293      	cmp	r3, r2
 800eeb4:	d863      	bhi.n	800ef7e <HAL_GPIO_Init+0x12e>
 800eeb6:	4a92      	ldr	r2, [pc, #584]	; (800f100 <HAL_GPIO_Init+0x2b0>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d046      	beq.n	800ef4a <HAL_GPIO_Init+0xfa>
 800eebc:	4a90      	ldr	r2, [pc, #576]	; (800f100 <HAL_GPIO_Init+0x2b0>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d85d      	bhi.n	800ef7e <HAL_GPIO_Init+0x12e>
 800eec2:	2b12      	cmp	r3, #18
 800eec4:	d82a      	bhi.n	800ef1c <HAL_GPIO_Init+0xcc>
 800eec6:	2b12      	cmp	r3, #18
 800eec8:	d859      	bhi.n	800ef7e <HAL_GPIO_Init+0x12e>
 800eeca:	a201      	add	r2, pc, #4	; (adr r2, 800eed0 <HAL_GPIO_Init+0x80>)
 800eecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eed0:	0800ef4b 	.word	0x0800ef4b
 800eed4:	0800ef25 	.word	0x0800ef25
 800eed8:	0800ef37 	.word	0x0800ef37
 800eedc:	0800ef79 	.word	0x0800ef79
 800eee0:	0800ef7f 	.word	0x0800ef7f
 800eee4:	0800ef7f 	.word	0x0800ef7f
 800eee8:	0800ef7f 	.word	0x0800ef7f
 800eeec:	0800ef7f 	.word	0x0800ef7f
 800eef0:	0800ef7f 	.word	0x0800ef7f
 800eef4:	0800ef7f 	.word	0x0800ef7f
 800eef8:	0800ef7f 	.word	0x0800ef7f
 800eefc:	0800ef7f 	.word	0x0800ef7f
 800ef00:	0800ef7f 	.word	0x0800ef7f
 800ef04:	0800ef7f 	.word	0x0800ef7f
 800ef08:	0800ef7f 	.word	0x0800ef7f
 800ef0c:	0800ef7f 	.word	0x0800ef7f
 800ef10:	0800ef7f 	.word	0x0800ef7f
 800ef14:	0800ef2d 	.word	0x0800ef2d
 800ef18:	0800ef41 	.word	0x0800ef41
 800ef1c:	4a79      	ldr	r2, [pc, #484]	; (800f104 <HAL_GPIO_Init+0x2b4>)
 800ef1e:	4293      	cmp	r3, r2
 800ef20:	d013      	beq.n	800ef4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800ef22:	e02c      	b.n	800ef7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	623b      	str	r3, [r7, #32]
          break;
 800ef2a:	e029      	b.n	800ef80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	68db      	ldr	r3, [r3, #12]
 800ef30:	3304      	adds	r3, #4
 800ef32:	623b      	str	r3, [r7, #32]
          break;
 800ef34:	e024      	b.n	800ef80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	3308      	adds	r3, #8
 800ef3c:	623b      	str	r3, [r7, #32]
          break;
 800ef3e:	e01f      	b.n	800ef80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	330c      	adds	r3, #12
 800ef46:	623b      	str	r3, [r7, #32]
          break;
 800ef48:	e01a      	b.n	800ef80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d102      	bne.n	800ef58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800ef52:	2304      	movs	r3, #4
 800ef54:	623b      	str	r3, [r7, #32]
          break;
 800ef56:	e013      	b.n	800ef80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	689b      	ldr	r3, [r3, #8]
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d105      	bne.n	800ef6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ef60:	2308      	movs	r3, #8
 800ef62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	69fa      	ldr	r2, [r7, #28]
 800ef68:	611a      	str	r2, [r3, #16]
          break;
 800ef6a:	e009      	b.n	800ef80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ef6c:	2308      	movs	r3, #8
 800ef6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	69fa      	ldr	r2, [r7, #28]
 800ef74:	615a      	str	r2, [r3, #20]
          break;
 800ef76:	e003      	b.n	800ef80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800ef78:	2300      	movs	r3, #0
 800ef7a:	623b      	str	r3, [r7, #32]
          break;
 800ef7c:	e000      	b.n	800ef80 <HAL_GPIO_Init+0x130>
          break;
 800ef7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	2bff      	cmp	r3, #255	; 0xff
 800ef84:	d801      	bhi.n	800ef8a <HAL_GPIO_Init+0x13a>
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	e001      	b.n	800ef8e <HAL_GPIO_Init+0x13e>
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	3304      	adds	r3, #4
 800ef8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	2bff      	cmp	r3, #255	; 0xff
 800ef94:	d802      	bhi.n	800ef9c <HAL_GPIO_Init+0x14c>
 800ef96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	e002      	b.n	800efa2 <HAL_GPIO_Init+0x152>
 800ef9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9e:	3b08      	subs	r3, #8
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	681a      	ldr	r2, [r3, #0]
 800efa8:	210f      	movs	r1, #15
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	fa01 f303 	lsl.w	r3, r1, r3
 800efb0:	43db      	mvns	r3, r3
 800efb2:	401a      	ands	r2, r3
 800efb4:	6a39      	ldr	r1, [r7, #32]
 800efb6:	693b      	ldr	r3, [r7, #16]
 800efb8:	fa01 f303 	lsl.w	r3, r1, r3
 800efbc:	431a      	orrs	r2, r3
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	685b      	ldr	r3, [r3, #4]
 800efc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f000 80b1 	beq.w	800f132 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800efd0:	4b4d      	ldr	r3, [pc, #308]	; (800f108 <HAL_GPIO_Init+0x2b8>)
 800efd2:	699b      	ldr	r3, [r3, #24]
 800efd4:	4a4c      	ldr	r2, [pc, #304]	; (800f108 <HAL_GPIO_Init+0x2b8>)
 800efd6:	f043 0301 	orr.w	r3, r3, #1
 800efda:	6193      	str	r3, [r2, #24]
 800efdc:	4b4a      	ldr	r3, [pc, #296]	; (800f108 <HAL_GPIO_Init+0x2b8>)
 800efde:	699b      	ldr	r3, [r3, #24]
 800efe0:	f003 0301 	and.w	r3, r3, #1
 800efe4:	60bb      	str	r3, [r7, #8]
 800efe6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800efe8:	4a48      	ldr	r2, [pc, #288]	; (800f10c <HAL_GPIO_Init+0x2bc>)
 800efea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efec:	089b      	lsrs	r3, r3, #2
 800efee:	3302      	adds	r3, #2
 800eff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eff4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff8:	f003 0303 	and.w	r3, r3, #3
 800effc:	009b      	lsls	r3, r3, #2
 800effe:	220f      	movs	r2, #15
 800f000:	fa02 f303 	lsl.w	r3, r2, r3
 800f004:	43db      	mvns	r3, r3
 800f006:	68fa      	ldr	r2, [r7, #12]
 800f008:	4013      	ands	r3, r2
 800f00a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4a40      	ldr	r2, [pc, #256]	; (800f110 <HAL_GPIO_Init+0x2c0>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d013      	beq.n	800f03c <HAL_GPIO_Init+0x1ec>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	4a3f      	ldr	r2, [pc, #252]	; (800f114 <HAL_GPIO_Init+0x2c4>)
 800f018:	4293      	cmp	r3, r2
 800f01a:	d00d      	beq.n	800f038 <HAL_GPIO_Init+0x1e8>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4a3e      	ldr	r2, [pc, #248]	; (800f118 <HAL_GPIO_Init+0x2c8>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d007      	beq.n	800f034 <HAL_GPIO_Init+0x1e4>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4a3d      	ldr	r2, [pc, #244]	; (800f11c <HAL_GPIO_Init+0x2cc>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d101      	bne.n	800f030 <HAL_GPIO_Init+0x1e0>
 800f02c:	2303      	movs	r3, #3
 800f02e:	e006      	b.n	800f03e <HAL_GPIO_Init+0x1ee>
 800f030:	2304      	movs	r3, #4
 800f032:	e004      	b.n	800f03e <HAL_GPIO_Init+0x1ee>
 800f034:	2302      	movs	r3, #2
 800f036:	e002      	b.n	800f03e <HAL_GPIO_Init+0x1ee>
 800f038:	2301      	movs	r3, #1
 800f03a:	e000      	b.n	800f03e <HAL_GPIO_Init+0x1ee>
 800f03c:	2300      	movs	r3, #0
 800f03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f040:	f002 0203 	and.w	r2, r2, #3
 800f044:	0092      	lsls	r2, r2, #2
 800f046:	4093      	lsls	r3, r2
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	4313      	orrs	r3, r2
 800f04c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800f04e:	492f      	ldr	r1, [pc, #188]	; (800f10c <HAL_GPIO_Init+0x2bc>)
 800f050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f052:	089b      	lsrs	r3, r3, #2
 800f054:	3302      	adds	r3, #2
 800f056:	68fa      	ldr	r2, [r7, #12]
 800f058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	685b      	ldr	r3, [r3, #4]
 800f060:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f064:	2b00      	cmp	r3, #0
 800f066:	d006      	beq.n	800f076 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800f068:	4b2d      	ldr	r3, [pc, #180]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f06a:	689a      	ldr	r2, [r3, #8]
 800f06c:	492c      	ldr	r1, [pc, #176]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	4313      	orrs	r3, r2
 800f072:	608b      	str	r3, [r1, #8]
 800f074:	e006      	b.n	800f084 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800f076:	4b2a      	ldr	r3, [pc, #168]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f078:	689a      	ldr	r2, [r3, #8]
 800f07a:	69bb      	ldr	r3, [r7, #24]
 800f07c:	43db      	mvns	r3, r3
 800f07e:	4928      	ldr	r1, [pc, #160]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f080:	4013      	ands	r3, r2
 800f082:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800f084:	683b      	ldr	r3, [r7, #0]
 800f086:	685b      	ldr	r3, [r3, #4]
 800f088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d006      	beq.n	800f09e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800f090:	4b23      	ldr	r3, [pc, #140]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f092:	68da      	ldr	r2, [r3, #12]
 800f094:	4922      	ldr	r1, [pc, #136]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f096:	69bb      	ldr	r3, [r7, #24]
 800f098:	4313      	orrs	r3, r2
 800f09a:	60cb      	str	r3, [r1, #12]
 800f09c:	e006      	b.n	800f0ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800f09e:	4b20      	ldr	r3, [pc, #128]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f0a0:	68da      	ldr	r2, [r3, #12]
 800f0a2:	69bb      	ldr	r3, [r7, #24]
 800f0a4:	43db      	mvns	r3, r3
 800f0a6:	491e      	ldr	r1, [pc, #120]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f0a8:	4013      	ands	r3, r2
 800f0aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	685b      	ldr	r3, [r3, #4]
 800f0b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d006      	beq.n	800f0c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800f0b8:	4b19      	ldr	r3, [pc, #100]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f0ba:	685a      	ldr	r2, [r3, #4]
 800f0bc:	4918      	ldr	r1, [pc, #96]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	604b      	str	r3, [r1, #4]
 800f0c4:	e006      	b.n	800f0d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800f0c6:	4b16      	ldr	r3, [pc, #88]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f0c8:	685a      	ldr	r2, [r3, #4]
 800f0ca:	69bb      	ldr	r3, [r7, #24]
 800f0cc:	43db      	mvns	r3, r3
 800f0ce:	4914      	ldr	r1, [pc, #80]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f0d0:	4013      	ands	r3, r2
 800f0d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d021      	beq.n	800f124 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800f0e0:	4b0f      	ldr	r3, [pc, #60]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f0e2:	681a      	ldr	r2, [r3, #0]
 800f0e4:	490e      	ldr	r1, [pc, #56]	; (800f120 <HAL_GPIO_Init+0x2d0>)
 800f0e6:	69bb      	ldr	r3, [r7, #24]
 800f0e8:	4313      	orrs	r3, r2
 800f0ea:	600b      	str	r3, [r1, #0]
 800f0ec:	e021      	b.n	800f132 <HAL_GPIO_Init+0x2e2>
 800f0ee:	bf00      	nop
 800f0f0:	10320000 	.word	0x10320000
 800f0f4:	10310000 	.word	0x10310000
 800f0f8:	10220000 	.word	0x10220000
 800f0fc:	10210000 	.word	0x10210000
 800f100:	10120000 	.word	0x10120000
 800f104:	10110000 	.word	0x10110000
 800f108:	40021000 	.word	0x40021000
 800f10c:	40010000 	.word	0x40010000
 800f110:	40010800 	.word	0x40010800
 800f114:	40010c00 	.word	0x40010c00
 800f118:	40011000 	.word	0x40011000
 800f11c:	40011400 	.word	0x40011400
 800f120:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800f124:	4b0b      	ldr	r3, [pc, #44]	; (800f154 <HAL_GPIO_Init+0x304>)
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	69bb      	ldr	r3, [r7, #24]
 800f12a:	43db      	mvns	r3, r3
 800f12c:	4909      	ldr	r1, [pc, #36]	; (800f154 <HAL_GPIO_Init+0x304>)
 800f12e:	4013      	ands	r3, r2
 800f130:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800f132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f134:	3301      	adds	r3, #1
 800f136:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681a      	ldr	r2, [r3, #0]
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	fa22 f303 	lsr.w	r3, r2, r3
 800f142:	2b00      	cmp	r3, #0
 800f144:	f47f ae8e 	bne.w	800ee64 <HAL_GPIO_Init+0x14>
  }
}
 800f148:	bf00      	nop
 800f14a:	bf00      	nop
 800f14c:	372c      	adds	r7, #44	; 0x2c
 800f14e:	46bd      	mov	sp, r7
 800f150:	bc80      	pop	{r7}
 800f152:	4770      	bx	lr
 800f154:	40010400 	.word	0x40010400

0800f158 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
 800f160:	460b      	mov	r3, r1
 800f162:	807b      	strh	r3, [r7, #2]
 800f164:	4613      	mov	r3, r2
 800f166:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800f168:	787b      	ldrb	r3, [r7, #1]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d003      	beq.n	800f176 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f16e:	887a      	ldrh	r2, [r7, #2]
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800f174:	e003      	b.n	800f17e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800f176:	887b      	ldrh	r3, [r7, #2]
 800f178:	041a      	lsls	r2, r3, #16
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	611a      	str	r2, [r3, #16]
}
 800f17e:	bf00      	nop
 800f180:	370c      	adds	r7, #12
 800f182:	46bd      	mov	sp, r7
 800f184:	bc80      	pop	{r7}
 800f186:	4770      	bx	lr

0800f188 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	460b      	mov	r3, r1
 800f192:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800f19a:	887a      	ldrh	r2, [r7, #2]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	4013      	ands	r3, r2
 800f1a0:	041a      	lsls	r2, r3, #16
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	43d9      	mvns	r1, r3
 800f1a6:	887b      	ldrh	r3, [r7, #2]
 800f1a8:	400b      	ands	r3, r1
 800f1aa:	431a      	orrs	r2, r3
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	611a      	str	r2, [r3, #16]
}
 800f1b0:	bf00      	nop
 800f1b2:	3714      	adds	r7, #20
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bc80      	pop	{r7}
 800f1b8:	4770      	bx	lr
	...

0800f1bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800f1bc:	b580      	push	{r7, lr}
 800f1be:	b084      	sub	sp, #16
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d101      	bne.n	800f1ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	e12b      	b.n	800f426 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d106      	bne.n	800f1e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f7ff f906 	bl	800e3f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2224      	movs	r2, #36	; 0x24
 800f1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	681a      	ldr	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	f022 0201 	bic.w	r2, r2, #1
 800f1fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	681a      	ldr	r2, [r3, #0]
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f20e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f21e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800f220:	f001 f8cc 	bl	80103bc <HAL_RCC_GetPCLK1Freq>
 800f224:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	4a81      	ldr	r2, [pc, #516]	; (800f430 <HAL_I2C_Init+0x274>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d807      	bhi.n	800f240 <HAL_I2C_Init+0x84>
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	4a80      	ldr	r2, [pc, #512]	; (800f434 <HAL_I2C_Init+0x278>)
 800f234:	4293      	cmp	r3, r2
 800f236:	bf94      	ite	ls
 800f238:	2301      	movls	r3, #1
 800f23a:	2300      	movhi	r3, #0
 800f23c:	b2db      	uxtb	r3, r3
 800f23e:	e006      	b.n	800f24e <HAL_I2C_Init+0x92>
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	4a7d      	ldr	r2, [pc, #500]	; (800f438 <HAL_I2C_Init+0x27c>)
 800f244:	4293      	cmp	r3, r2
 800f246:	bf94      	ite	ls
 800f248:	2301      	movls	r3, #1
 800f24a:	2300      	movhi	r3, #0
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800f252:	2301      	movs	r3, #1
 800f254:	e0e7      	b.n	800f426 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	4a78      	ldr	r2, [pc, #480]	; (800f43c <HAL_I2C_Init+0x280>)
 800f25a:	fba2 2303 	umull	r2, r3, r2, r3
 800f25e:	0c9b      	lsrs	r3, r3, #18
 800f260:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	685b      	ldr	r3, [r3, #4]
 800f268:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	68ba      	ldr	r2, [r7, #8]
 800f272:	430a      	orrs	r2, r1
 800f274:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	6a1b      	ldr	r3, [r3, #32]
 800f27c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	4a6a      	ldr	r2, [pc, #424]	; (800f430 <HAL_I2C_Init+0x274>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d802      	bhi.n	800f290 <HAL_I2C_Init+0xd4>
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	3301      	adds	r3, #1
 800f28e:	e009      	b.n	800f2a4 <HAL_I2C_Init+0xe8>
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800f296:	fb02 f303 	mul.w	r3, r2, r3
 800f29a:	4a69      	ldr	r2, [pc, #420]	; (800f440 <HAL_I2C_Init+0x284>)
 800f29c:	fba2 2303 	umull	r2, r3, r2, r3
 800f2a0:	099b      	lsrs	r3, r3, #6
 800f2a2:	3301      	adds	r3, #1
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	6812      	ldr	r2, [r2, #0]
 800f2a8:	430b      	orrs	r3, r1
 800f2aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	69db      	ldr	r3, [r3, #28]
 800f2b2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800f2b6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	685b      	ldr	r3, [r3, #4]
 800f2be:	495c      	ldr	r1, [pc, #368]	; (800f430 <HAL_I2C_Init+0x274>)
 800f2c0:	428b      	cmp	r3, r1
 800f2c2:	d819      	bhi.n	800f2f8 <HAL_I2C_Init+0x13c>
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	1e59      	subs	r1, r3, #1
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	685b      	ldr	r3, [r3, #4]
 800f2cc:	005b      	lsls	r3, r3, #1
 800f2ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800f2d2:	1c59      	adds	r1, r3, #1
 800f2d4:	f640 73fc 	movw	r3, #4092	; 0xffc
 800f2d8:	400b      	ands	r3, r1
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d00a      	beq.n	800f2f4 <HAL_I2C_Init+0x138>
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	1e59      	subs	r1, r3, #1
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	005b      	lsls	r3, r3, #1
 800f2e8:	fbb1 f3f3 	udiv	r3, r1, r3
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f2f2:	e051      	b.n	800f398 <HAL_I2C_Init+0x1dc>
 800f2f4:	2304      	movs	r3, #4
 800f2f6:	e04f      	b.n	800f398 <HAL_I2C_Init+0x1dc>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	689b      	ldr	r3, [r3, #8]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d111      	bne.n	800f324 <HAL_I2C_Init+0x168>
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	1e58      	subs	r0, r3, #1
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	6859      	ldr	r1, [r3, #4]
 800f308:	460b      	mov	r3, r1
 800f30a:	005b      	lsls	r3, r3, #1
 800f30c:	440b      	add	r3, r1
 800f30e:	fbb0 f3f3 	udiv	r3, r0, r3
 800f312:	3301      	adds	r3, #1
 800f314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f318:	2b00      	cmp	r3, #0
 800f31a:	bf0c      	ite	eq
 800f31c:	2301      	moveq	r3, #1
 800f31e:	2300      	movne	r3, #0
 800f320:	b2db      	uxtb	r3, r3
 800f322:	e012      	b.n	800f34a <HAL_I2C_Init+0x18e>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	1e58      	subs	r0, r3, #1
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6859      	ldr	r1, [r3, #4]
 800f32c:	460b      	mov	r3, r1
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	440b      	add	r3, r1
 800f332:	0099      	lsls	r1, r3, #2
 800f334:	440b      	add	r3, r1
 800f336:	fbb0 f3f3 	udiv	r3, r0, r3
 800f33a:	3301      	adds	r3, #1
 800f33c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f340:	2b00      	cmp	r3, #0
 800f342:	bf0c      	ite	eq
 800f344:	2301      	moveq	r3, #1
 800f346:	2300      	movne	r3, #0
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d001      	beq.n	800f352 <HAL_I2C_Init+0x196>
 800f34e:	2301      	movs	r3, #1
 800f350:	e022      	b.n	800f398 <HAL_I2C_Init+0x1dc>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d10e      	bne.n	800f378 <HAL_I2C_Init+0x1bc>
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	1e58      	subs	r0, r3, #1
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	6859      	ldr	r1, [r3, #4]
 800f362:	460b      	mov	r3, r1
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	440b      	add	r3, r1
 800f368:	fbb0 f3f3 	udiv	r3, r0, r3
 800f36c:	3301      	adds	r3, #1
 800f36e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f372:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f376:	e00f      	b.n	800f398 <HAL_I2C_Init+0x1dc>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	1e58      	subs	r0, r3, #1
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6859      	ldr	r1, [r3, #4]
 800f380:	460b      	mov	r3, r1
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	440b      	add	r3, r1
 800f386:	0099      	lsls	r1, r3, #2
 800f388:	440b      	add	r3, r1
 800f38a:	fbb0 f3f3 	udiv	r3, r0, r3
 800f38e:	3301      	adds	r3, #1
 800f390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f394:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f398:	6879      	ldr	r1, [r7, #4]
 800f39a:	6809      	ldr	r1, [r1, #0]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	69da      	ldr	r2, [r3, #28]
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	6a1b      	ldr	r3, [r3, #32]
 800f3b2:	431a      	orrs	r2, r3
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	430a      	orrs	r2, r1
 800f3ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	689b      	ldr	r3, [r3, #8]
 800f3c2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800f3c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	6911      	ldr	r1, [r2, #16]
 800f3ce:	687a      	ldr	r2, [r7, #4]
 800f3d0:	68d2      	ldr	r2, [r2, #12]
 800f3d2:	4311      	orrs	r1, r2
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	6812      	ldr	r2, [r2, #0]
 800f3d8:	430b      	orrs	r3, r1
 800f3da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	68db      	ldr	r3, [r3, #12]
 800f3e2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	695a      	ldr	r2, [r3, #20]
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	699b      	ldr	r3, [r3, #24]
 800f3ee:	431a      	orrs	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	430a      	orrs	r2, r1
 800f3f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f042 0201 	orr.w	r2, r2, #1
 800f406:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2200      	movs	r2, #0
 800f40c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	2220      	movs	r2, #32
 800f412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2200      	movs	r2, #0
 800f41a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	2200      	movs	r2, #0
 800f420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800f424:	2300      	movs	r3, #0
}
 800f426:	4618      	mov	r0, r3
 800f428:	3710      	adds	r7, #16
 800f42a:	46bd      	mov	sp, r7
 800f42c:	bd80      	pop	{r7, pc}
 800f42e:	bf00      	nop
 800f430:	000186a0 	.word	0x000186a0
 800f434:	001e847f 	.word	0x001e847f
 800f438:	003d08ff 	.word	0x003d08ff
 800f43c:	431bde83 	.word	0x431bde83
 800f440:	10624dd3 	.word	0x10624dd3

0800f444 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b088      	sub	sp, #32
 800f448:	af02      	add	r7, sp, #8
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	607a      	str	r2, [r7, #4]
 800f44e:	461a      	mov	r2, r3
 800f450:	460b      	mov	r3, r1
 800f452:	817b      	strh	r3, [r7, #10]
 800f454:	4613      	mov	r3, r2
 800f456:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800f458:	f7ff fb0c 	bl	800ea74 <HAL_GetTick>
 800f45c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f464:	b2db      	uxtb	r3, r3
 800f466:	2b20      	cmp	r3, #32
 800f468:	f040 80e0 	bne.w	800f62c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800f46c:	697b      	ldr	r3, [r7, #20]
 800f46e:	9300      	str	r3, [sp, #0]
 800f470:	2319      	movs	r3, #25
 800f472:	2201      	movs	r2, #1
 800f474:	4970      	ldr	r1, [pc, #448]	; (800f638 <HAL_I2C_Master_Transmit+0x1f4>)
 800f476:	68f8      	ldr	r0, [r7, #12]
 800f478:	f000 f964 	bl	800f744 <I2C_WaitOnFlagUntilTimeout>
 800f47c:	4603      	mov	r3, r0
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d001      	beq.n	800f486 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800f482:	2302      	movs	r3, #2
 800f484:	e0d3      	b.n	800f62e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d101      	bne.n	800f494 <HAL_I2C_Master_Transmit+0x50>
 800f490:	2302      	movs	r3, #2
 800f492:	e0cc      	b.n	800f62e <HAL_I2C_Master_Transmit+0x1ea>
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	2201      	movs	r2, #1
 800f498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	f003 0301 	and.w	r3, r3, #1
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	d007      	beq.n	800f4ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	681a      	ldr	r2, [r3, #0]
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	f042 0201 	orr.w	r2, r2, #1
 800f4b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f4c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2221      	movs	r2, #33	; 0x21
 800f4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	2210      	movs	r2, #16
 800f4d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	687a      	ldr	r2, [r7, #4]
 800f4e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	893a      	ldrh	r2, [r7, #8]
 800f4ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	4a50      	ldr	r2, [pc, #320]	; (800f63c <HAL_I2C_Master_Transmit+0x1f8>)
 800f4fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800f4fc:	8979      	ldrh	r1, [r7, #10]
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	6a3a      	ldr	r2, [r7, #32]
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f000 f89c 	bl	800f640 <I2C_MasterRequestWrite>
 800f508:	4603      	mov	r3, r0
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800f50e:	2301      	movs	r3, #1
 800f510:	e08d      	b.n	800f62e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800f512:	2300      	movs	r3, #0
 800f514:	613b      	str	r3, [r7, #16]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	695b      	ldr	r3, [r3, #20]
 800f51c:	613b      	str	r3, [r7, #16]
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	699b      	ldr	r3, [r3, #24]
 800f524:	613b      	str	r3, [r7, #16]
 800f526:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800f528:	e066      	b.n	800f5f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f52a:	697a      	ldr	r2, [r7, #20]
 800f52c:	6a39      	ldr	r1, [r7, #32]
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f000 fa22 	bl	800f978 <I2C_WaitOnTXEFlagUntilTimeout>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00d      	beq.n	800f556 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f53e:	2b04      	cmp	r3, #4
 800f540:	d107      	bne.n	800f552 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f550:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f552:	2301      	movs	r3, #1
 800f554:	e06b      	b.n	800f62e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f55a:	781a      	ldrb	r2, [r3, #0]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f566:	1c5a      	adds	r2, r3, #1
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f570:	b29b      	uxth	r3, r3
 800f572:	3b01      	subs	r3, #1
 800f574:	b29a      	uxth	r2, r3
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f57e:	3b01      	subs	r3, #1
 800f580:	b29a      	uxth	r2, r3
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	695b      	ldr	r3, [r3, #20]
 800f58c:	f003 0304 	and.w	r3, r3, #4
 800f590:	2b04      	cmp	r3, #4
 800f592:	d11b      	bne.n	800f5cc <HAL_I2C_Master_Transmit+0x188>
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d017      	beq.n	800f5cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5a0:	781a      	ldrb	r2, [r3, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5ac:	1c5a      	adds	r2, r3, #1
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	3b01      	subs	r3, #1
 800f5ba:	b29a      	uxth	r2, r3
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5c4:	3b01      	subs	r3, #1
 800f5c6:	b29a      	uxth	r2, r3
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800f5cc:	697a      	ldr	r2, [r7, #20]
 800f5ce:	6a39      	ldr	r1, [r7, #32]
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f000 fa19 	bl	800fa08 <I2C_WaitOnBTFFlagUntilTimeout>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d00d      	beq.n	800f5f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5e0:	2b04      	cmp	r3, #4
 800f5e2:	d107      	bne.n	800f5f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f5f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800f5f4:	2301      	movs	r3, #1
 800f5f6:	e01a      	b.n	800f62e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d194      	bne.n	800f52a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	681a      	ldr	r2, [r3, #0]
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f60e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	2220      	movs	r2, #32
 800f614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2200      	movs	r2, #0
 800f624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800f628:	2300      	movs	r3, #0
 800f62a:	e000      	b.n	800f62e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800f62c:	2302      	movs	r3, #2
  }
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3718      	adds	r7, #24
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
 800f636:	bf00      	nop
 800f638:	00100002 	.word	0x00100002
 800f63c:	ffff0000 	.word	0xffff0000

0800f640 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b088      	sub	sp, #32
 800f644:	af02      	add	r7, sp, #8
 800f646:	60f8      	str	r0, [r7, #12]
 800f648:	607a      	str	r2, [r7, #4]
 800f64a:	603b      	str	r3, [r7, #0]
 800f64c:	460b      	mov	r3, r1
 800f64e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f654:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	2b08      	cmp	r3, #8
 800f65a:	d006      	beq.n	800f66a <I2C_MasterRequestWrite+0x2a>
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d003      	beq.n	800f66a <I2C_MasterRequestWrite+0x2a>
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800f668:	d108      	bne.n	800f67c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	681b      	ldr	r3, [r3, #0]
 800f66e:	681a      	ldr	r2, [r3, #0]
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f678:	601a      	str	r2, [r3, #0]
 800f67a:	e00b      	b.n	800f694 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f680:	2b12      	cmp	r3, #18
 800f682:	d107      	bne.n	800f694 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f692:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800f694:	683b      	ldr	r3, [r7, #0]
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	2200      	movs	r2, #0
 800f69c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f000 f84f 	bl	800f744 <I2C_WaitOnFlagUntilTimeout>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d00d      	beq.n	800f6c8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f6ba:	d103      	bne.n	800f6c4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800f6c4:	2303      	movs	r3, #3
 800f6c6:	e035      	b.n	800f734 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	691b      	ldr	r3, [r3, #16]
 800f6cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f6d0:	d108      	bne.n	800f6e4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800f6d2:	897b      	ldrh	r3, [r7, #10]
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800f6e0:	611a      	str	r2, [r3, #16]
 800f6e2:	e01b      	b.n	800f71c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800f6e4:	897b      	ldrh	r3, [r7, #10]
 800f6e6:	11db      	asrs	r3, r3, #7
 800f6e8:	b2db      	uxtb	r3, r3
 800f6ea:	f003 0306 	and.w	r3, r3, #6
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	f063 030f 	orn	r3, r3, #15
 800f6f4:	b2da      	uxtb	r2, r3
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	490e      	ldr	r1, [pc, #56]	; (800f73c <I2C_MasterRequestWrite+0xfc>)
 800f702:	68f8      	ldr	r0, [r7, #12]
 800f704:	f000 f898 	bl	800f838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f708:	4603      	mov	r3, r0
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d001      	beq.n	800f712 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800f70e:	2301      	movs	r3, #1
 800f710:	e010      	b.n	800f734 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800f712:	897b      	ldrh	r3, [r7, #10]
 800f714:	b2da      	uxtb	r2, r3
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	687a      	ldr	r2, [r7, #4]
 800f720:	4907      	ldr	r1, [pc, #28]	; (800f740 <I2C_MasterRequestWrite+0x100>)
 800f722:	68f8      	ldr	r0, [r7, #12]
 800f724:	f000 f888 	bl	800f838 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d001      	beq.n	800f732 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	e000      	b.n	800f734 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800f732:	2300      	movs	r3, #0
}
 800f734:	4618      	mov	r0, r3
 800f736:	3718      	adds	r7, #24
 800f738:	46bd      	mov	sp, r7
 800f73a:	bd80      	pop	{r7, pc}
 800f73c:	00010008 	.word	0x00010008
 800f740:	00010002 	.word	0x00010002

0800f744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b084      	sub	sp, #16
 800f748:	af00      	add	r7, sp, #0
 800f74a:	60f8      	str	r0, [r7, #12]
 800f74c:	60b9      	str	r1, [r7, #8]
 800f74e:	603b      	str	r3, [r7, #0]
 800f750:	4613      	mov	r3, r2
 800f752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f754:	e048      	b.n	800f7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f756:	683b      	ldr	r3, [r7, #0]
 800f758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f75c:	d044      	beq.n	800f7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f75e:	f7ff f989 	bl	800ea74 <HAL_GetTick>
 800f762:	4602      	mov	r2, r0
 800f764:	69bb      	ldr	r3, [r7, #24]
 800f766:	1ad3      	subs	r3, r2, r3
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	429a      	cmp	r2, r3
 800f76c:	d302      	bcc.n	800f774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800f76e:	683b      	ldr	r3, [r7, #0]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d139      	bne.n	800f7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	0c1b      	lsrs	r3, r3, #16
 800f778:	b2db      	uxtb	r3, r3
 800f77a:	2b01      	cmp	r3, #1
 800f77c:	d10d      	bne.n	800f79a <I2C_WaitOnFlagUntilTimeout+0x56>
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	695b      	ldr	r3, [r3, #20]
 800f784:	43da      	mvns	r2, r3
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	4013      	ands	r3, r2
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	bf0c      	ite	eq
 800f790:	2301      	moveq	r3, #1
 800f792:	2300      	movne	r3, #0
 800f794:	b2db      	uxtb	r3, r3
 800f796:	461a      	mov	r2, r3
 800f798:	e00c      	b.n	800f7b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	699b      	ldr	r3, [r3, #24]
 800f7a0:	43da      	mvns	r2, r3
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	4013      	ands	r3, r2
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	bf0c      	ite	eq
 800f7ac:	2301      	moveq	r3, #1
 800f7ae:	2300      	movne	r3, #0
 800f7b0:	b2db      	uxtb	r3, r3
 800f7b2:	461a      	mov	r2, r3
 800f7b4:	79fb      	ldrb	r3, [r7, #7]
 800f7b6:	429a      	cmp	r2, r3
 800f7b8:	d116      	bne.n	800f7e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	2220      	movs	r2, #32
 800f7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7d4:	f043 0220 	orr.w	r2, r3, #32
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2200      	movs	r2, #0
 800f7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	e023      	b.n	800f830 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	0c1b      	lsrs	r3, r3, #16
 800f7ec:	b2db      	uxtb	r3, r3
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	d10d      	bne.n	800f80e <I2C_WaitOnFlagUntilTimeout+0xca>
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	695b      	ldr	r3, [r3, #20]
 800f7f8:	43da      	mvns	r2, r3
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	4013      	ands	r3, r2
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	2b00      	cmp	r3, #0
 800f802:	bf0c      	ite	eq
 800f804:	2301      	moveq	r3, #1
 800f806:	2300      	movne	r3, #0
 800f808:	b2db      	uxtb	r3, r3
 800f80a:	461a      	mov	r2, r3
 800f80c:	e00c      	b.n	800f828 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	699b      	ldr	r3, [r3, #24]
 800f814:	43da      	mvns	r2, r3
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	4013      	ands	r3, r2
 800f81a:	b29b      	uxth	r3, r3
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	bf0c      	ite	eq
 800f820:	2301      	moveq	r3, #1
 800f822:	2300      	movne	r3, #0
 800f824:	b2db      	uxtb	r3, r3
 800f826:	461a      	mov	r2, r3
 800f828:	79fb      	ldrb	r3, [r7, #7]
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d093      	beq.n	800f756 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f82e:	2300      	movs	r3, #0
}
 800f830:	4618      	mov	r0, r3
 800f832:	3710      	adds	r7, #16
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	60f8      	str	r0, [r7, #12]
 800f840:	60b9      	str	r1, [r7, #8]
 800f842:	607a      	str	r2, [r7, #4]
 800f844:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f846:	e071      	b.n	800f92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f856:	d123      	bne.n	800f8a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f866:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800f870:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2200      	movs	r2, #0
 800f876:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	2220      	movs	r2, #32
 800f87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2200      	movs	r2, #0
 800f884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f88c:	f043 0204 	orr.w	r2, r3, #4
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2200      	movs	r2, #0
 800f898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800f89c:	2301      	movs	r3, #1
 800f89e:	e067      	b.n	800f970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8a6:	d041      	beq.n	800f92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f8a8:	f7ff f8e4 	bl	800ea74 <HAL_GetTick>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	687a      	ldr	r2, [r7, #4]
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d302      	bcc.n	800f8be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d136      	bne.n	800f92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800f8be:	68bb      	ldr	r3, [r7, #8]
 800f8c0:	0c1b      	lsrs	r3, r3, #16
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	2b01      	cmp	r3, #1
 800f8c6:	d10c      	bne.n	800f8e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	695b      	ldr	r3, [r3, #20]
 800f8ce:	43da      	mvns	r2, r3
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	4013      	ands	r3, r2
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	bf14      	ite	ne
 800f8da:	2301      	movne	r3, #1
 800f8dc:	2300      	moveq	r3, #0
 800f8de:	b2db      	uxtb	r3, r3
 800f8e0:	e00b      	b.n	800f8fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	699b      	ldr	r3, [r3, #24]
 800f8e8:	43da      	mvns	r2, r3
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	4013      	ands	r3, r2
 800f8ee:	b29b      	uxth	r3, r3
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	bf14      	ite	ne
 800f8f4:	2301      	movne	r3, #1
 800f8f6:	2300      	moveq	r3, #0
 800f8f8:	b2db      	uxtb	r3, r3
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d016      	beq.n	800f92c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2200      	movs	r2, #0
 800f902:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	2220      	movs	r2, #32
 800f908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	2200      	movs	r2, #0
 800f910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f918:	f043 0220 	orr.w	r2, r3, #32
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	2200      	movs	r2, #0
 800f924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f928:	2301      	movs	r3, #1
 800f92a:	e021      	b.n	800f970 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	0c1b      	lsrs	r3, r3, #16
 800f930:	b2db      	uxtb	r3, r3
 800f932:	2b01      	cmp	r3, #1
 800f934:	d10c      	bne.n	800f950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	695b      	ldr	r3, [r3, #20]
 800f93c:	43da      	mvns	r2, r3
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	4013      	ands	r3, r2
 800f942:	b29b      	uxth	r3, r3
 800f944:	2b00      	cmp	r3, #0
 800f946:	bf14      	ite	ne
 800f948:	2301      	movne	r3, #1
 800f94a:	2300      	moveq	r3, #0
 800f94c:	b2db      	uxtb	r3, r3
 800f94e:	e00b      	b.n	800f968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	699b      	ldr	r3, [r3, #24]
 800f956:	43da      	mvns	r2, r3
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	4013      	ands	r3, r2
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	2b00      	cmp	r3, #0
 800f960:	bf14      	ite	ne
 800f962:	2301      	movne	r3, #1
 800f964:	2300      	moveq	r3, #0
 800f966:	b2db      	uxtb	r3, r3
 800f968:	2b00      	cmp	r3, #0
 800f96a:	f47f af6d 	bne.w	800f848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800f96e:	2300      	movs	r3, #0
}
 800f970:	4618      	mov	r0, r3
 800f972:	3710      	adds	r7, #16
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f984:	e034      	b.n	800f9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800f986:	68f8      	ldr	r0, [r7, #12]
 800f988:	f000 f886 	bl	800fa98 <I2C_IsAcknowledgeFailed>
 800f98c:	4603      	mov	r3, r0
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d001      	beq.n	800f996 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800f992:	2301      	movs	r3, #1
 800f994:	e034      	b.n	800fa00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f996:	68bb      	ldr	r3, [r7, #8]
 800f998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f99c:	d028      	beq.n	800f9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f99e:	f7ff f869 	bl	800ea74 <HAL_GetTick>
 800f9a2:	4602      	mov	r2, r0
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	1ad3      	subs	r3, r2, r3
 800f9a8:	68ba      	ldr	r2, [r7, #8]
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d302      	bcc.n	800f9b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d11d      	bne.n	800f9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	695b      	ldr	r3, [r3, #20]
 800f9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9be:	2b80      	cmp	r3, #128	; 0x80
 800f9c0:	d016      	beq.n	800f9f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2220      	movs	r2, #32
 800f9cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9dc:	f043 0220 	orr.w	r2, r3, #32
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800f9ec:	2301      	movs	r3, #1
 800f9ee:	e007      	b.n	800fa00 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	695b      	ldr	r3, [r3, #20]
 800f9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f9fa:	2b80      	cmp	r3, #128	; 0x80
 800f9fc:	d1c3      	bne.n	800f986 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800f9fe:	2300      	movs	r3, #0
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	3710      	adds	r7, #16
 800fa04:	46bd      	mov	sp, r7
 800fa06:	bd80      	pop	{r7, pc}

0800fa08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	60f8      	str	r0, [r7, #12]
 800fa10:	60b9      	str	r1, [r7, #8]
 800fa12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800fa14:	e034      	b.n	800fa80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f000 f83e 	bl	800fa98 <I2C_IsAcknowledgeFailed>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d001      	beq.n	800fa26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800fa22:	2301      	movs	r3, #1
 800fa24:	e034      	b.n	800fa90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fa26:	68bb      	ldr	r3, [r7, #8]
 800fa28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa2c:	d028      	beq.n	800fa80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fa2e:	f7ff f821 	bl	800ea74 <HAL_GetTick>
 800fa32:	4602      	mov	r2, r0
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	68ba      	ldr	r2, [r7, #8]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d302      	bcc.n	800fa44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d11d      	bne.n	800fa80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	695b      	ldr	r3, [r3, #20]
 800fa4a:	f003 0304 	and.w	r3, r3, #4
 800fa4e:	2b04      	cmp	r3, #4
 800fa50:	d016      	beq.n	800fa80 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	2200      	movs	r2, #0
 800fa56:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2220      	movs	r2, #32
 800fa5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	2200      	movs	r2, #0
 800fa64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa6c:	f043 0220 	orr.w	r2, r3, #32
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	2200      	movs	r2, #0
 800fa78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800fa7c:	2301      	movs	r3, #1
 800fa7e:	e007      	b.n	800fa90 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	695b      	ldr	r3, [r3, #20]
 800fa86:	f003 0304 	and.w	r3, r3, #4
 800fa8a:	2b04      	cmp	r3, #4
 800fa8c:	d1c3      	bne.n	800fa16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800fa8e:	2300      	movs	r3, #0
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	3710      	adds	r7, #16
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b083      	sub	sp, #12
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	695b      	ldr	r3, [r3, #20]
 800faa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800faaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800faae:	d11b      	bne.n	800fae8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800fab8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2220      	movs	r2, #32
 800fac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fad4:	f043 0204 	orr.w	r2, r3, #4
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800fae4:	2301      	movs	r3, #1
 800fae6:	e000      	b.n	800faea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800fae8:	2300      	movs	r3, #0
}
 800faea:	4618      	mov	r0, r3
 800faec:	370c      	adds	r7, #12
 800faee:	46bd      	mov	sp, r7
 800faf0:	bc80      	pop	{r7}
 800faf2:	4770      	bx	lr

0800faf4 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800faf4:	b580      	push	{r7, lr}
 800faf6:	b082      	sub	sp, #8
 800faf8:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800fafa:	f7fe ffbb 	bl	800ea74 <HAL_GetTick>
 800fafe:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800fb00:	4b45      	ldr	r3, [pc, #276]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a44      	ldr	r2, [pc, #272]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fb06:	f043 0301 	orr.w	r3, r3, #1
 800fb0a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800fb0c:	e008      	b.n	800fb20 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fb0e:	f7fe ffb1 	bl	800ea74 <HAL_GetTick>
 800fb12:	4602      	mov	r2, r0
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	1ad3      	subs	r3, r2, r3
 800fb18:	2b02      	cmp	r3, #2
 800fb1a:	d901      	bls.n	800fb20 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800fb1c:	2303      	movs	r3, #3
 800fb1e:	e077      	b.n	800fc10 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800fb20:	4b3d      	ldr	r3, [pc, #244]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	f003 0302 	and.w	r3, r3, #2
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d0f0      	beq.n	800fb0e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 800fb2c:	4b3a      	ldr	r3, [pc, #232]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800fb34:	4a38      	ldr	r2, [pc, #224]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fb36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb3a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800fb3c:	f7fe ff9a 	bl	800ea74 <HAL_GetTick>
 800fb40:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800fb42:	4b35      	ldr	r3, [pc, #212]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fb44:	2200      	movs	r2, #0
 800fb46:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800fb48:	e00a      	b.n	800fb60 <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fb4a:	f7fe ff93 	bl	800ea74 <HAL_GetTick>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d901      	bls.n	800fb60 <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 800fb5c:	2303      	movs	r3, #3
 800fb5e:	e057      	b.n	800fc10 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800fb60:	4b2d      	ldr	r3, [pc, #180]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	f003 030c 	and.w	r3, r3, #12
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d1ee      	bne.n	800fb4a <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800fb6c:	4b2b      	ldr	r3, [pc, #172]	; (800fc1c <HAL_RCC_DeInit+0x128>)
 800fb6e:	4a2c      	ldr	r2, [pc, #176]	; (800fc20 <HAL_RCC_DeInit+0x12c>)
 800fb70:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800fb72:	4b2c      	ldr	r3, [pc, #176]	; (800fc24 <HAL_RCC_DeInit+0x130>)
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fe ff3a 	bl	800e9f0 <HAL_InitTick>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d001      	beq.n	800fb86 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800fb82:	2301      	movs	r3, #1
 800fb84:	e044      	b.n	800fc10 <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800fb86:	f7fe ff75 	bl	800ea74 <HAL_GetTick>
 800fb8a:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800fb8c:	4b22      	ldr	r3, [pc, #136]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	4a21      	ldr	r2, [pc, #132]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fb92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fb96:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800fb98:	e008      	b.n	800fbac <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fb9a:	f7fe ff6b 	bl	800ea74 <HAL_GetTick>
 800fb9e:	4602      	mov	r2, r0
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	1ad3      	subs	r3, r2, r3
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	d901      	bls.n	800fbac <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800fba8:	2303      	movs	r3, #3
 800fbaa:	e031      	b.n	800fc10 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 800fbac:	4b1a      	ldr	r3, [pc, #104]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d1f0      	bne.n	800fb9a <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 800fbb8:	4b17      	ldr	r3, [pc, #92]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fbba:	2200      	movs	r2, #0
 800fbbc:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800fbbe:	f7fe ff59 	bl	800ea74 <HAL_GetTick>
 800fbc2:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 800fbc4:	4b14      	ldr	r3, [pc, #80]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4a13      	ldr	r2, [pc, #76]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fbca:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800fbce:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800fbd0:	e008      	b.n	800fbe4 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fbd2:	f7fe ff4f 	bl	800ea74 <HAL_GetTick>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	1ad3      	subs	r3, r2, r3
 800fbdc:	2b64      	cmp	r3, #100	; 0x64
 800fbde:	d901      	bls.n	800fbe4 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 800fbe0:	2303      	movs	r3, #3
 800fbe2:	e015      	b.n	800fc10 <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800fbe4:	4b0c      	ldr	r3, [pc, #48]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1f0      	bne.n	800fbd2 <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800fbf0:	4b09      	ldr	r3, [pc, #36]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a08      	ldr	r2, [pc, #32]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fbf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fbfa:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800fbfc:	4b06      	ldr	r3, [pc, #24]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fbfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc00:	4a05      	ldr	r2, [pc, #20]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fc02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fc06:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 800fc08:	4b03      	ldr	r3, [pc, #12]	; (800fc18 <HAL_RCC_DeInit+0x124>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 800fc0e:	2300      	movs	r3, #0
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	3708      	adds	r7, #8
 800fc14:	46bd      	mov	sp, r7
 800fc16:	bd80      	pop	{r7, pc}
 800fc18:	40021000 	.word	0x40021000
 800fc1c:	20000078 	.word	0x20000078
 800fc20:	007a1200 	.word	0x007a1200
 800fc24:	2000007c 	.word	0x2000007c

0800fc28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b086      	sub	sp, #24
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d101      	bne.n	800fc3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fc36:	2301      	movs	r3, #1
 800fc38:	e272      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	f000 8087 	beq.w	800fd56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800fc48:	4b92      	ldr	r3, [pc, #584]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fc4a:	685b      	ldr	r3, [r3, #4]
 800fc4c:	f003 030c 	and.w	r3, r3, #12
 800fc50:	2b04      	cmp	r3, #4
 800fc52:	d00c      	beq.n	800fc6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800fc54:	4b8f      	ldr	r3, [pc, #572]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	f003 030c 	and.w	r3, r3, #12
 800fc5c:	2b08      	cmp	r3, #8
 800fc5e:	d112      	bne.n	800fc86 <HAL_RCC_OscConfig+0x5e>
 800fc60:	4b8c      	ldr	r3, [pc, #560]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fc62:	685b      	ldr	r3, [r3, #4]
 800fc64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fc68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc6c:	d10b      	bne.n	800fc86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fc6e:	4b89      	ldr	r3, [pc, #548]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fc70:	681b      	ldr	r3, [r3, #0]
 800fc72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d06c      	beq.n	800fd54 <HAL_RCC_OscConfig+0x12c>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d168      	bne.n	800fd54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800fc82:	2301      	movs	r3, #1
 800fc84:	e24c      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	685b      	ldr	r3, [r3, #4]
 800fc8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc8e:	d106      	bne.n	800fc9e <HAL_RCC_OscConfig+0x76>
 800fc90:	4b80      	ldr	r3, [pc, #512]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4a7f      	ldr	r2, [pc, #508]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fc96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fc9a:	6013      	str	r3, [r2, #0]
 800fc9c:	e02e      	b.n	800fcfc <HAL_RCC_OscConfig+0xd4>
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d10c      	bne.n	800fcc0 <HAL_RCC_OscConfig+0x98>
 800fca6:	4b7b      	ldr	r3, [pc, #492]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	4a7a      	ldr	r2, [pc, #488]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fcac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fcb0:	6013      	str	r3, [r2, #0]
 800fcb2:	4b78      	ldr	r3, [pc, #480]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	4a77      	ldr	r2, [pc, #476]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fcb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fcbc:	6013      	str	r3, [r2, #0]
 800fcbe:	e01d      	b.n	800fcfc <HAL_RCC_OscConfig+0xd4>
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	685b      	ldr	r3, [r3, #4]
 800fcc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fcc8:	d10c      	bne.n	800fce4 <HAL_RCC_OscConfig+0xbc>
 800fcca:	4b72      	ldr	r3, [pc, #456]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	4a71      	ldr	r2, [pc, #452]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fcd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fcd4:	6013      	str	r3, [r2, #0]
 800fcd6:	4b6f      	ldr	r3, [pc, #444]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	4a6e      	ldr	r2, [pc, #440]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fcdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fce0:	6013      	str	r3, [r2, #0]
 800fce2:	e00b      	b.n	800fcfc <HAL_RCC_OscConfig+0xd4>
 800fce4:	4b6b      	ldr	r3, [pc, #428]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	4a6a      	ldr	r2, [pc, #424]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fcea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fcee:	6013      	str	r3, [r2, #0]
 800fcf0:	4b68      	ldr	r3, [pc, #416]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4a67      	ldr	r2, [pc, #412]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fcf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fcfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d013      	beq.n	800fd2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd04:	f7fe feb6 	bl	800ea74 <HAL_GetTick>
 800fd08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fd0a:	e008      	b.n	800fd1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fd0c:	f7fe feb2 	bl	800ea74 <HAL_GetTick>
 800fd10:	4602      	mov	r2, r0
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	1ad3      	subs	r3, r2, r3
 800fd16:	2b64      	cmp	r3, #100	; 0x64
 800fd18:	d901      	bls.n	800fd1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800fd1a:	2303      	movs	r3, #3
 800fd1c:	e200      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800fd1e:	4b5d      	ldr	r3, [pc, #372]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d0f0      	beq.n	800fd0c <HAL_RCC_OscConfig+0xe4>
 800fd2a:	e014      	b.n	800fd56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fd2c:	f7fe fea2 	bl	800ea74 <HAL_GetTick>
 800fd30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fd32:	e008      	b.n	800fd46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fd34:	f7fe fe9e 	bl	800ea74 <HAL_GetTick>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	1ad3      	subs	r3, r2, r3
 800fd3e:	2b64      	cmp	r3, #100	; 0x64
 800fd40:	d901      	bls.n	800fd46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800fd42:	2303      	movs	r3, #3
 800fd44:	e1ec      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800fd46:	4b53      	ldr	r3, [pc, #332]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1f0      	bne.n	800fd34 <HAL_RCC_OscConfig+0x10c>
 800fd52:	e000      	b.n	800fd56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fd54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f003 0302 	and.w	r3, r3, #2
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d063      	beq.n	800fe2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800fd62:	4b4c      	ldr	r3, [pc, #304]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	f003 030c 	and.w	r3, r3, #12
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00b      	beq.n	800fd86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800fd6e:	4b49      	ldr	r3, [pc, #292]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fd70:	685b      	ldr	r3, [r3, #4]
 800fd72:	f003 030c 	and.w	r3, r3, #12
 800fd76:	2b08      	cmp	r3, #8
 800fd78:	d11c      	bne.n	800fdb4 <HAL_RCC_OscConfig+0x18c>
 800fd7a:	4b46      	ldr	r3, [pc, #280]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fd7c:	685b      	ldr	r3, [r3, #4]
 800fd7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d116      	bne.n	800fdb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fd86:	4b43      	ldr	r3, [pc, #268]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	f003 0302 	and.w	r3, r3, #2
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d005      	beq.n	800fd9e <HAL_RCC_OscConfig+0x176>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	691b      	ldr	r3, [r3, #16]
 800fd96:	2b01      	cmp	r3, #1
 800fd98:	d001      	beq.n	800fd9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	e1c0      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fd9e:	4b3d      	ldr	r3, [pc, #244]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	695b      	ldr	r3, [r3, #20]
 800fdaa:	00db      	lsls	r3, r3, #3
 800fdac:	4939      	ldr	r1, [pc, #228]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800fdb2:	e03a      	b.n	800fe2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	691b      	ldr	r3, [r3, #16]
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d020      	beq.n	800fdfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800fdbc:	4b36      	ldr	r3, [pc, #216]	; (800fe98 <HAL_RCC_OscConfig+0x270>)
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fdc2:	f7fe fe57 	bl	800ea74 <HAL_GetTick>
 800fdc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fdc8:	e008      	b.n	800fddc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fdca:	f7fe fe53 	bl	800ea74 <HAL_GetTick>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	693b      	ldr	r3, [r7, #16]
 800fdd2:	1ad3      	subs	r3, r2, r3
 800fdd4:	2b02      	cmp	r3, #2
 800fdd6:	d901      	bls.n	800fddc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800fdd8:	2303      	movs	r3, #3
 800fdda:	e1a1      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800fddc:	4b2d      	ldr	r3, [pc, #180]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	f003 0302 	and.w	r3, r3, #2
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d0f0      	beq.n	800fdca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fde8:	4b2a      	ldr	r3, [pc, #168]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fdea:	681b      	ldr	r3, [r3, #0]
 800fdec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	695b      	ldr	r3, [r3, #20]
 800fdf4:	00db      	lsls	r3, r3, #3
 800fdf6:	4927      	ldr	r1, [pc, #156]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	600b      	str	r3, [r1, #0]
 800fdfc:	e015      	b.n	800fe2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fdfe:	4b26      	ldr	r3, [pc, #152]	; (800fe98 <HAL_RCC_OscConfig+0x270>)
 800fe00:	2200      	movs	r2, #0
 800fe02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800fe04:	f7fe fe36 	bl	800ea74 <HAL_GetTick>
 800fe08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fe0a:	e008      	b.n	800fe1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fe0c:	f7fe fe32 	bl	800ea74 <HAL_GetTick>
 800fe10:	4602      	mov	r2, r0
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	1ad3      	subs	r3, r2, r3
 800fe16:	2b02      	cmp	r3, #2
 800fe18:	d901      	bls.n	800fe1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800fe1a:	2303      	movs	r3, #3
 800fe1c:	e180      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800fe1e:	4b1d      	ldr	r3, [pc, #116]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f003 0302 	and.w	r3, r3, #2
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d1f0      	bne.n	800fe0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	f003 0308 	and.w	r3, r3, #8
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d03a      	beq.n	800feac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	699b      	ldr	r3, [r3, #24]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d019      	beq.n	800fe72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fe3e:	4b17      	ldr	r3, [pc, #92]	; (800fe9c <HAL_RCC_OscConfig+0x274>)
 800fe40:	2201      	movs	r2, #1
 800fe42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fe44:	f7fe fe16 	bl	800ea74 <HAL_GetTick>
 800fe48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fe4a:	e008      	b.n	800fe5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fe4c:	f7fe fe12 	bl	800ea74 <HAL_GetTick>
 800fe50:	4602      	mov	r2, r0
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	1ad3      	subs	r3, r2, r3
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	d901      	bls.n	800fe5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800fe5a:	2303      	movs	r3, #3
 800fe5c:	e160      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800fe5e:	4b0d      	ldr	r3, [pc, #52]	; (800fe94 <HAL_RCC_OscConfig+0x26c>)
 800fe60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe62:	f003 0302 	and.w	r3, r3, #2
 800fe66:	2b00      	cmp	r3, #0
 800fe68:	d0f0      	beq.n	800fe4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800fe6a:	2001      	movs	r0, #1
 800fe6c:	f000 face 	bl	801040c <RCC_Delay>
 800fe70:	e01c      	b.n	800feac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fe72:	4b0a      	ldr	r3, [pc, #40]	; (800fe9c <HAL_RCC_OscConfig+0x274>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800fe78:	f7fe fdfc 	bl	800ea74 <HAL_GetTick>
 800fe7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fe7e:	e00f      	b.n	800fea0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fe80:	f7fe fdf8 	bl	800ea74 <HAL_GetTick>
 800fe84:	4602      	mov	r2, r0
 800fe86:	693b      	ldr	r3, [r7, #16]
 800fe88:	1ad3      	subs	r3, r2, r3
 800fe8a:	2b02      	cmp	r3, #2
 800fe8c:	d908      	bls.n	800fea0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800fe8e:	2303      	movs	r3, #3
 800fe90:	e146      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
 800fe92:	bf00      	nop
 800fe94:	40021000 	.word	0x40021000
 800fe98:	42420000 	.word	0x42420000
 800fe9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800fea0:	4b92      	ldr	r3, [pc, #584]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800fea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea4:	f003 0302 	and.w	r3, r3, #2
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1e9      	bne.n	800fe80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	f003 0304 	and.w	r3, r3, #4
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	f000 80a6 	beq.w	8010006 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800feba:	2300      	movs	r3, #0
 800febc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800febe:	4b8b      	ldr	r3, [pc, #556]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800fec0:	69db      	ldr	r3, [r3, #28]
 800fec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d10d      	bne.n	800fee6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800feca:	4b88      	ldr	r3, [pc, #544]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800fecc:	69db      	ldr	r3, [r3, #28]
 800fece:	4a87      	ldr	r2, [pc, #540]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800fed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fed4:	61d3      	str	r3, [r2, #28]
 800fed6:	4b85      	ldr	r3, [pc, #532]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800fed8:	69db      	ldr	r3, [r3, #28]
 800feda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fede:	60bb      	str	r3, [r7, #8]
 800fee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fee2:	2301      	movs	r3, #1
 800fee4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800fee6:	4b82      	ldr	r3, [pc, #520]	; (80100f0 <HAL_RCC_OscConfig+0x4c8>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d118      	bne.n	800ff24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800fef2:	4b7f      	ldr	r3, [pc, #508]	; (80100f0 <HAL_RCC_OscConfig+0x4c8>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4a7e      	ldr	r2, [pc, #504]	; (80100f0 <HAL_RCC_OscConfig+0x4c8>)
 800fef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fefc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fefe:	f7fe fdb9 	bl	800ea74 <HAL_GetTick>
 800ff02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ff04:	e008      	b.n	800ff18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ff06:	f7fe fdb5 	bl	800ea74 <HAL_GetTick>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	1ad3      	subs	r3, r2, r3
 800ff10:	2b64      	cmp	r3, #100	; 0x64
 800ff12:	d901      	bls.n	800ff18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800ff14:	2303      	movs	r3, #3
 800ff16:	e103      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ff18:	4b75      	ldr	r3, [pc, #468]	; (80100f0 <HAL_RCC_OscConfig+0x4c8>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d0f0      	beq.n	800ff06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d106      	bne.n	800ff3a <HAL_RCC_OscConfig+0x312>
 800ff2c:	4b6f      	ldr	r3, [pc, #444]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff2e:	6a1b      	ldr	r3, [r3, #32]
 800ff30:	4a6e      	ldr	r2, [pc, #440]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff32:	f043 0301 	orr.w	r3, r3, #1
 800ff36:	6213      	str	r3, [r2, #32]
 800ff38:	e02d      	b.n	800ff96 <HAL_RCC_OscConfig+0x36e>
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d10c      	bne.n	800ff5c <HAL_RCC_OscConfig+0x334>
 800ff42:	4b6a      	ldr	r3, [pc, #424]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff44:	6a1b      	ldr	r3, [r3, #32]
 800ff46:	4a69      	ldr	r2, [pc, #420]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff48:	f023 0301 	bic.w	r3, r3, #1
 800ff4c:	6213      	str	r3, [r2, #32]
 800ff4e:	4b67      	ldr	r3, [pc, #412]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff50:	6a1b      	ldr	r3, [r3, #32]
 800ff52:	4a66      	ldr	r2, [pc, #408]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff54:	f023 0304 	bic.w	r3, r3, #4
 800ff58:	6213      	str	r3, [r2, #32]
 800ff5a:	e01c      	b.n	800ff96 <HAL_RCC_OscConfig+0x36e>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	2b05      	cmp	r3, #5
 800ff62:	d10c      	bne.n	800ff7e <HAL_RCC_OscConfig+0x356>
 800ff64:	4b61      	ldr	r3, [pc, #388]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff66:	6a1b      	ldr	r3, [r3, #32]
 800ff68:	4a60      	ldr	r2, [pc, #384]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff6a:	f043 0304 	orr.w	r3, r3, #4
 800ff6e:	6213      	str	r3, [r2, #32]
 800ff70:	4b5e      	ldr	r3, [pc, #376]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff72:	6a1b      	ldr	r3, [r3, #32]
 800ff74:	4a5d      	ldr	r2, [pc, #372]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff76:	f043 0301 	orr.w	r3, r3, #1
 800ff7a:	6213      	str	r3, [r2, #32]
 800ff7c:	e00b      	b.n	800ff96 <HAL_RCC_OscConfig+0x36e>
 800ff7e:	4b5b      	ldr	r3, [pc, #364]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff80:	6a1b      	ldr	r3, [r3, #32]
 800ff82:	4a5a      	ldr	r2, [pc, #360]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff84:	f023 0301 	bic.w	r3, r3, #1
 800ff88:	6213      	str	r3, [r2, #32]
 800ff8a:	4b58      	ldr	r3, [pc, #352]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff8c:	6a1b      	ldr	r3, [r3, #32]
 800ff8e:	4a57      	ldr	r2, [pc, #348]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ff90:	f023 0304 	bic.w	r3, r3, #4
 800ff94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d015      	beq.n	800ffca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ff9e:	f7fe fd69 	bl	800ea74 <HAL_GetTick>
 800ffa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ffa4:	e00a      	b.n	800ffbc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ffa6:	f7fe fd65 	bl	800ea74 <HAL_GetTick>
 800ffaa:	4602      	mov	r2, r0
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d901      	bls.n	800ffbc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800ffb8:	2303      	movs	r3, #3
 800ffba:	e0b1      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ffbc:	4b4b      	ldr	r3, [pc, #300]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ffbe:	6a1b      	ldr	r3, [r3, #32]
 800ffc0:	f003 0302 	and.w	r3, r3, #2
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d0ee      	beq.n	800ffa6 <HAL_RCC_OscConfig+0x37e>
 800ffc8:	e014      	b.n	800fff4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ffca:	f7fe fd53 	bl	800ea74 <HAL_GetTick>
 800ffce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ffd0:	e00a      	b.n	800ffe8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ffd2:	f7fe fd4f 	bl	800ea74 <HAL_GetTick>
 800ffd6:	4602      	mov	r2, r0
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	1ad3      	subs	r3, r2, r3
 800ffdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d901      	bls.n	800ffe8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800ffe4:	2303      	movs	r3, #3
 800ffe6:	e09b      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ffe8:	4b40      	ldr	r3, [pc, #256]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800ffea:	6a1b      	ldr	r3, [r3, #32]
 800ffec:	f003 0302 	and.w	r3, r3, #2
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d1ee      	bne.n	800ffd2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800fff4:	7dfb      	ldrb	r3, [r7, #23]
 800fff6:	2b01      	cmp	r3, #1
 800fff8:	d105      	bne.n	8010006 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fffa:	4b3c      	ldr	r3, [pc, #240]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 800fffc:	69db      	ldr	r3, [r3, #28]
 800fffe:	4a3b      	ldr	r2, [pc, #236]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 8010000:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010004:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	69db      	ldr	r3, [r3, #28]
 801000a:	2b00      	cmp	r3, #0
 801000c:	f000 8087 	beq.w	801011e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8010010:	4b36      	ldr	r3, [pc, #216]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	f003 030c 	and.w	r3, r3, #12
 8010018:	2b08      	cmp	r3, #8
 801001a:	d061      	beq.n	80100e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	69db      	ldr	r3, [r3, #28]
 8010020:	2b02      	cmp	r3, #2
 8010022:	d146      	bne.n	80100b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010024:	4b33      	ldr	r3, [pc, #204]	; (80100f4 <HAL_RCC_OscConfig+0x4cc>)
 8010026:	2200      	movs	r2, #0
 8010028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801002a:	f7fe fd23 	bl	800ea74 <HAL_GetTick>
 801002e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010030:	e008      	b.n	8010044 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010032:	f7fe fd1f 	bl	800ea74 <HAL_GetTick>
 8010036:	4602      	mov	r2, r0
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	2b02      	cmp	r3, #2
 801003e:	d901      	bls.n	8010044 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8010040:	2303      	movs	r3, #3
 8010042:	e06d      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8010044:	4b29      	ldr	r3, [pc, #164]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801004c:	2b00      	cmp	r3, #0
 801004e:	d1f0      	bne.n	8010032 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	6a1b      	ldr	r3, [r3, #32]
 8010054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010058:	d108      	bne.n	801006c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 801005a:	4b24      	ldr	r3, [pc, #144]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 801005c:	685b      	ldr	r3, [r3, #4]
 801005e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	689b      	ldr	r3, [r3, #8]
 8010066:	4921      	ldr	r1, [pc, #132]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 8010068:	4313      	orrs	r3, r2
 801006a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801006c:	4b1f      	ldr	r3, [pc, #124]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 801006e:	685b      	ldr	r3, [r3, #4]
 8010070:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	6a19      	ldr	r1, [r3, #32]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801007c:	430b      	orrs	r3, r1
 801007e:	491b      	ldr	r1, [pc, #108]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 8010080:	4313      	orrs	r3, r2
 8010082:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010084:	4b1b      	ldr	r3, [pc, #108]	; (80100f4 <HAL_RCC_OscConfig+0x4cc>)
 8010086:	2201      	movs	r2, #1
 8010088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801008a:	f7fe fcf3 	bl	800ea74 <HAL_GetTick>
 801008e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8010090:	e008      	b.n	80100a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010092:	f7fe fcef 	bl	800ea74 <HAL_GetTick>
 8010096:	4602      	mov	r2, r0
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	2b02      	cmp	r3, #2
 801009e:	d901      	bls.n	80100a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80100a0:	2303      	movs	r3, #3
 80100a2:	e03d      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80100a4:	4b11      	ldr	r3, [pc, #68]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d0f0      	beq.n	8010092 <HAL_RCC_OscConfig+0x46a>
 80100b0:	e035      	b.n	801011e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80100b2:	4b10      	ldr	r3, [pc, #64]	; (80100f4 <HAL_RCC_OscConfig+0x4cc>)
 80100b4:	2200      	movs	r2, #0
 80100b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80100b8:	f7fe fcdc 	bl	800ea74 <HAL_GetTick>
 80100bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80100be:	e008      	b.n	80100d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80100c0:	f7fe fcd8 	bl	800ea74 <HAL_GetTick>
 80100c4:	4602      	mov	r2, r0
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	1ad3      	subs	r3, r2, r3
 80100ca:	2b02      	cmp	r3, #2
 80100cc:	d901      	bls.n	80100d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80100ce:	2303      	movs	r3, #3
 80100d0:	e026      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80100d2:	4b06      	ldr	r3, [pc, #24]	; (80100ec <HAL_RCC_OscConfig+0x4c4>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d1f0      	bne.n	80100c0 <HAL_RCC_OscConfig+0x498>
 80100de:	e01e      	b.n	801011e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	69db      	ldr	r3, [r3, #28]
 80100e4:	2b01      	cmp	r3, #1
 80100e6:	d107      	bne.n	80100f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80100e8:	2301      	movs	r3, #1
 80100ea:	e019      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
 80100ec:	40021000 	.word	0x40021000
 80100f0:	40007000 	.word	0x40007000
 80100f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80100f8:	4b0b      	ldr	r3, [pc, #44]	; (8010128 <HAL_RCC_OscConfig+0x500>)
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6a1b      	ldr	r3, [r3, #32]
 8010108:	429a      	cmp	r2, r3
 801010a:	d106      	bne.n	801011a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010116:	429a      	cmp	r2, r3
 8010118:	d001      	beq.n	801011e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 801011a:	2301      	movs	r3, #1
 801011c:	e000      	b.n	8010120 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 801011e:	2300      	movs	r3, #0
}
 8010120:	4618      	mov	r0, r3
 8010122:	3718      	adds	r7, #24
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}
 8010128:	40021000 	.word	0x40021000

0801012c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b084      	sub	sp, #16
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d101      	bne.n	8010140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801013c:	2301      	movs	r3, #1
 801013e:	e0d0      	b.n	80102e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010140:	4b6a      	ldr	r3, [pc, #424]	; (80102ec <HAL_RCC_ClockConfig+0x1c0>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	f003 0307 	and.w	r3, r3, #7
 8010148:	683a      	ldr	r2, [r7, #0]
 801014a:	429a      	cmp	r2, r3
 801014c:	d910      	bls.n	8010170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801014e:	4b67      	ldr	r3, [pc, #412]	; (80102ec <HAL_RCC_ClockConfig+0x1c0>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f023 0207 	bic.w	r2, r3, #7
 8010156:	4965      	ldr	r1, [pc, #404]	; (80102ec <HAL_RCC_ClockConfig+0x1c0>)
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	4313      	orrs	r3, r2
 801015c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801015e:	4b63      	ldr	r3, [pc, #396]	; (80102ec <HAL_RCC_ClockConfig+0x1c0>)
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	f003 0307 	and.w	r3, r3, #7
 8010166:	683a      	ldr	r2, [r7, #0]
 8010168:	429a      	cmp	r2, r3
 801016a:	d001      	beq.n	8010170 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 801016c:	2301      	movs	r3, #1
 801016e:	e0b8      	b.n	80102e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	f003 0302 	and.w	r3, r3, #2
 8010178:	2b00      	cmp	r3, #0
 801017a:	d020      	beq.n	80101be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	f003 0304 	and.w	r3, r3, #4
 8010184:	2b00      	cmp	r3, #0
 8010186:	d005      	beq.n	8010194 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010188:	4b59      	ldr	r3, [pc, #356]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 801018a:	685b      	ldr	r3, [r3, #4]
 801018c:	4a58      	ldr	r2, [pc, #352]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 801018e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8010192:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f003 0308 	and.w	r3, r3, #8
 801019c:	2b00      	cmp	r3, #0
 801019e:	d005      	beq.n	80101ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80101a0:	4b53      	ldr	r3, [pc, #332]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	4a52      	ldr	r2, [pc, #328]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80101a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80101aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80101ac:	4b50      	ldr	r3, [pc, #320]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80101ae:	685b      	ldr	r3, [r3, #4]
 80101b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	494d      	ldr	r1, [pc, #308]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80101ba:	4313      	orrs	r3, r2
 80101bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f003 0301 	and.w	r3, r3, #1
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d040      	beq.n	801024c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	685b      	ldr	r3, [r3, #4]
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d107      	bne.n	80101e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80101d2:	4b47      	ldr	r3, [pc, #284]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d115      	bne.n	801020a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80101de:	2301      	movs	r3, #1
 80101e0:	e07f      	b.n	80102e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	2b02      	cmp	r3, #2
 80101e8:	d107      	bne.n	80101fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80101ea:	4b41      	ldr	r3, [pc, #260]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d109      	bne.n	801020a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80101f6:	2301      	movs	r3, #1
 80101f8:	e073      	b.n	80102e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80101fa:	4b3d      	ldr	r3, [pc, #244]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f003 0302 	and.w	r3, r3, #2
 8010202:	2b00      	cmp	r3, #0
 8010204:	d101      	bne.n	801020a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	e06b      	b.n	80102e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801020a:	4b39      	ldr	r3, [pc, #228]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	f023 0203 	bic.w	r2, r3, #3
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	685b      	ldr	r3, [r3, #4]
 8010216:	4936      	ldr	r1, [pc, #216]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 8010218:	4313      	orrs	r3, r2
 801021a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801021c:	f7fe fc2a 	bl	800ea74 <HAL_GetTick>
 8010220:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010222:	e00a      	b.n	801023a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010224:	f7fe fc26 	bl	800ea74 <HAL_GetTick>
 8010228:	4602      	mov	r2, r0
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	1ad3      	subs	r3, r2, r3
 801022e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010232:	4293      	cmp	r3, r2
 8010234:	d901      	bls.n	801023a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010236:	2303      	movs	r3, #3
 8010238:	e053      	b.n	80102e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801023a:	4b2d      	ldr	r3, [pc, #180]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 801023c:	685b      	ldr	r3, [r3, #4]
 801023e:	f003 020c 	and.w	r2, r3, #12
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	009b      	lsls	r3, r3, #2
 8010248:	429a      	cmp	r2, r3
 801024a:	d1eb      	bne.n	8010224 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801024c:	4b27      	ldr	r3, [pc, #156]	; (80102ec <HAL_RCC_ClockConfig+0x1c0>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f003 0307 	and.w	r3, r3, #7
 8010254:	683a      	ldr	r2, [r7, #0]
 8010256:	429a      	cmp	r2, r3
 8010258:	d210      	bcs.n	801027c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801025a:	4b24      	ldr	r3, [pc, #144]	; (80102ec <HAL_RCC_ClockConfig+0x1c0>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	f023 0207 	bic.w	r2, r3, #7
 8010262:	4922      	ldr	r1, [pc, #136]	; (80102ec <HAL_RCC_ClockConfig+0x1c0>)
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	4313      	orrs	r3, r2
 8010268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801026a:	4b20      	ldr	r3, [pc, #128]	; (80102ec <HAL_RCC_ClockConfig+0x1c0>)
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f003 0307 	and.w	r3, r3, #7
 8010272:	683a      	ldr	r2, [r7, #0]
 8010274:	429a      	cmp	r2, r3
 8010276:	d001      	beq.n	801027c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8010278:	2301      	movs	r3, #1
 801027a:	e032      	b.n	80102e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	f003 0304 	and.w	r3, r3, #4
 8010284:	2b00      	cmp	r3, #0
 8010286:	d008      	beq.n	801029a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010288:	4b19      	ldr	r3, [pc, #100]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 801028a:	685b      	ldr	r3, [r3, #4]
 801028c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	4916      	ldr	r1, [pc, #88]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 8010296:	4313      	orrs	r3, r2
 8010298:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	f003 0308 	and.w	r3, r3, #8
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d009      	beq.n	80102ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80102a6:	4b12      	ldr	r3, [pc, #72]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80102a8:	685b      	ldr	r3, [r3, #4]
 80102aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	691b      	ldr	r3, [r3, #16]
 80102b2:	00db      	lsls	r3, r3, #3
 80102b4:	490e      	ldr	r1, [pc, #56]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80102b6:	4313      	orrs	r3, r2
 80102b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80102ba:	f000 f821 	bl	8010300 <HAL_RCC_GetSysClockFreq>
 80102be:	4602      	mov	r2, r0
 80102c0:	4b0b      	ldr	r3, [pc, #44]	; (80102f0 <HAL_RCC_ClockConfig+0x1c4>)
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	091b      	lsrs	r3, r3, #4
 80102c6:	f003 030f 	and.w	r3, r3, #15
 80102ca:	490a      	ldr	r1, [pc, #40]	; (80102f4 <HAL_RCC_ClockConfig+0x1c8>)
 80102cc:	5ccb      	ldrb	r3, [r1, r3]
 80102ce:	fa22 f303 	lsr.w	r3, r2, r3
 80102d2:	4a09      	ldr	r2, [pc, #36]	; (80102f8 <HAL_RCC_ClockConfig+0x1cc>)
 80102d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80102d6:	4b09      	ldr	r3, [pc, #36]	; (80102fc <HAL_RCC_ClockConfig+0x1d0>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	4618      	mov	r0, r3
 80102dc:	f7fe fb88 	bl	800e9f0 <HAL_InitTick>

  return HAL_OK;
 80102e0:	2300      	movs	r3, #0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3710      	adds	r7, #16
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	40022000 	.word	0x40022000
 80102f0:	40021000 	.word	0x40021000
 80102f4:	080148b0 	.word	0x080148b0
 80102f8:	20000078 	.word	0x20000078
 80102fc:	2000007c 	.word	0x2000007c

08010300 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010300:	b480      	push	{r7}
 8010302:	b087      	sub	sp, #28
 8010304:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8010306:	2300      	movs	r3, #0
 8010308:	60fb      	str	r3, [r7, #12]
 801030a:	2300      	movs	r3, #0
 801030c:	60bb      	str	r3, [r7, #8]
 801030e:	2300      	movs	r3, #0
 8010310:	617b      	str	r3, [r7, #20]
 8010312:	2300      	movs	r3, #0
 8010314:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8010316:	2300      	movs	r3, #0
 8010318:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 801031a:	4b1e      	ldr	r3, [pc, #120]	; (8010394 <HAL_RCC_GetSysClockFreq+0x94>)
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	f003 030c 	and.w	r3, r3, #12
 8010326:	2b04      	cmp	r3, #4
 8010328:	d002      	beq.n	8010330 <HAL_RCC_GetSysClockFreq+0x30>
 801032a:	2b08      	cmp	r3, #8
 801032c:	d003      	beq.n	8010336 <HAL_RCC_GetSysClockFreq+0x36>
 801032e:	e027      	b.n	8010380 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8010330:	4b19      	ldr	r3, [pc, #100]	; (8010398 <HAL_RCC_GetSysClockFreq+0x98>)
 8010332:	613b      	str	r3, [r7, #16]
      break;
 8010334:	e027      	b.n	8010386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	0c9b      	lsrs	r3, r3, #18
 801033a:	f003 030f 	and.w	r3, r3, #15
 801033e:	4a17      	ldr	r2, [pc, #92]	; (801039c <HAL_RCC_GetSysClockFreq+0x9c>)
 8010340:	5cd3      	ldrb	r3, [r2, r3]
 8010342:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801034a:	2b00      	cmp	r3, #0
 801034c:	d010      	beq.n	8010370 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 801034e:	4b11      	ldr	r3, [pc, #68]	; (8010394 <HAL_RCC_GetSysClockFreq+0x94>)
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	0c5b      	lsrs	r3, r3, #17
 8010354:	f003 0301 	and.w	r3, r3, #1
 8010358:	4a11      	ldr	r2, [pc, #68]	; (80103a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 801035a:	5cd3      	ldrb	r3, [r2, r3]
 801035c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	4a0d      	ldr	r2, [pc, #52]	; (8010398 <HAL_RCC_GetSysClockFreq+0x98>)
 8010362:	fb03 f202 	mul.w	r2, r3, r2
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	fbb2 f3f3 	udiv	r3, r2, r3
 801036c:	617b      	str	r3, [r7, #20]
 801036e:	e004      	b.n	801037a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	4a0c      	ldr	r2, [pc, #48]	; (80103a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8010374:	fb02 f303 	mul.w	r3, r2, r3
 8010378:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	613b      	str	r3, [r7, #16]
      break;
 801037e:	e002      	b.n	8010386 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8010380:	4b05      	ldr	r3, [pc, #20]	; (8010398 <HAL_RCC_GetSysClockFreq+0x98>)
 8010382:	613b      	str	r3, [r7, #16]
      break;
 8010384:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010386:	693b      	ldr	r3, [r7, #16]
}
 8010388:	4618      	mov	r0, r3
 801038a:	371c      	adds	r7, #28
 801038c:	46bd      	mov	sp, r7
 801038e:	bc80      	pop	{r7}
 8010390:	4770      	bx	lr
 8010392:	bf00      	nop
 8010394:	40021000 	.word	0x40021000
 8010398:	007a1200 	.word	0x007a1200
 801039c:	080148c8 	.word	0x080148c8
 80103a0:	080148d8 	.word	0x080148d8
 80103a4:	003d0900 	.word	0x003d0900

080103a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80103a8:	b480      	push	{r7}
 80103aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80103ac:	4b02      	ldr	r3, [pc, #8]	; (80103b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80103ae:	681b      	ldr	r3, [r3, #0]
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bc80      	pop	{r7}
 80103b6:	4770      	bx	lr
 80103b8:	20000078 	.word	0x20000078

080103bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80103bc:	b580      	push	{r7, lr}
 80103be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80103c0:	f7ff fff2 	bl	80103a8 <HAL_RCC_GetHCLKFreq>
 80103c4:	4602      	mov	r2, r0
 80103c6:	4b05      	ldr	r3, [pc, #20]	; (80103dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80103c8:	685b      	ldr	r3, [r3, #4]
 80103ca:	0a1b      	lsrs	r3, r3, #8
 80103cc:	f003 0307 	and.w	r3, r3, #7
 80103d0:	4903      	ldr	r1, [pc, #12]	; (80103e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80103d2:	5ccb      	ldrb	r3, [r1, r3]
 80103d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80103d8:	4618      	mov	r0, r3
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	40021000 	.word	0x40021000
 80103e0:	080148c0 	.word	0x080148c0

080103e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80103e8:	f7ff ffde 	bl	80103a8 <HAL_RCC_GetHCLKFreq>
 80103ec:	4602      	mov	r2, r0
 80103ee:	4b05      	ldr	r3, [pc, #20]	; (8010404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	0adb      	lsrs	r3, r3, #11
 80103f4:	f003 0307 	and.w	r3, r3, #7
 80103f8:	4903      	ldr	r1, [pc, #12]	; (8010408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80103fa:	5ccb      	ldrb	r3, [r1, r3]
 80103fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010400:	4618      	mov	r0, r3
 8010402:	bd80      	pop	{r7, pc}
 8010404:	40021000 	.word	0x40021000
 8010408:	080148c0 	.word	0x080148c0

0801040c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8010414:	4b0a      	ldr	r3, [pc, #40]	; (8010440 <RCC_Delay+0x34>)
 8010416:	681b      	ldr	r3, [r3, #0]
 8010418:	4a0a      	ldr	r2, [pc, #40]	; (8010444 <RCC_Delay+0x38>)
 801041a:	fba2 2303 	umull	r2, r3, r2, r3
 801041e:	0a5b      	lsrs	r3, r3, #9
 8010420:	687a      	ldr	r2, [r7, #4]
 8010422:	fb02 f303 	mul.w	r3, r2, r3
 8010426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8010428:	bf00      	nop
  }
  while (Delay --);
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	1e5a      	subs	r2, r3, #1
 801042e:	60fa      	str	r2, [r7, #12]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d1f9      	bne.n	8010428 <RCC_Delay+0x1c>
}
 8010434:	bf00      	nop
 8010436:	bf00      	nop
 8010438:	3714      	adds	r7, #20
 801043a:	46bd      	mov	sp, r7
 801043c:	bc80      	pop	{r7}
 801043e:	4770      	bx	lr
 8010440:	20000078 	.word	0x20000078
 8010444:	10624dd3 	.word	0x10624dd3

08010448 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d101      	bne.n	801045a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8010456:	2301      	movs	r3, #1
 8010458:	e076      	b.n	8010548 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801045e:	2b00      	cmp	r3, #0
 8010460:	d108      	bne.n	8010474 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	685b      	ldr	r3, [r3, #4]
 8010466:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801046a:	d009      	beq.n	8010480 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	2200      	movs	r2, #0
 8010470:	61da      	str	r2, [r3, #28]
 8010472:	e005      	b.n	8010480 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	2200      	movs	r2, #0
 8010478:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	2200      	movs	r2, #0
 801047e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	2200      	movs	r2, #0
 8010484:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801048c:	b2db      	uxtb	r3, r3
 801048e:	2b00      	cmp	r3, #0
 8010490:	d106      	bne.n	80104a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	2200      	movs	r2, #0
 8010496:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7fd ffe8 	bl	800e470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2202      	movs	r2, #2
 80104a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	681a      	ldr	r2, [r3, #0]
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80104b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	685b      	ldr	r3, [r3, #4]
 80104bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	689b      	ldr	r3, [r3, #8]
 80104c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80104c8:	431a      	orrs	r2, r3
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	68db      	ldr	r3, [r3, #12]
 80104ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80104d2:	431a      	orrs	r2, r3
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	691b      	ldr	r3, [r3, #16]
 80104d8:	f003 0302 	and.w	r3, r3, #2
 80104dc:	431a      	orrs	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	695b      	ldr	r3, [r3, #20]
 80104e2:	f003 0301 	and.w	r3, r3, #1
 80104e6:	431a      	orrs	r2, r3
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	699b      	ldr	r3, [r3, #24]
 80104ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80104f0:	431a      	orrs	r2, r3
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	69db      	ldr	r3, [r3, #28]
 80104f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80104fa:	431a      	orrs	r2, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6a1b      	ldr	r3, [r3, #32]
 8010500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010504:	ea42 0103 	orr.w	r1, r2, r3
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801050c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	430a      	orrs	r2, r1
 8010516:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	699b      	ldr	r3, [r3, #24]
 801051c:	0c1a      	lsrs	r2, r3, #16
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	681b      	ldr	r3, [r3, #0]
 8010522:	f002 0204 	and.w	r2, r2, #4
 8010526:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	69da      	ldr	r2, [r3, #28]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010536:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2200      	movs	r2, #0
 801053c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2201      	movs	r2, #1
 8010542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8010546:	2300      	movs	r3, #0
}
 8010548:	4618      	mov	r0, r3
 801054a:	3708      	adds	r7, #8
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b08c      	sub	sp, #48	; 0x30
 8010554:	af00      	add	r7, sp, #0
 8010556:	60f8      	str	r0, [r7, #12]
 8010558:	60b9      	str	r1, [r7, #8]
 801055a:	607a      	str	r2, [r7, #4]
 801055c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801055e:	2301      	movs	r3, #1
 8010560:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8010562:	2300      	movs	r3, #0
 8010564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801056e:	2b01      	cmp	r3, #1
 8010570:	d101      	bne.n	8010576 <HAL_SPI_TransmitReceive+0x26>
 8010572:	2302      	movs	r3, #2
 8010574:	e198      	b.n	80108a8 <HAL_SPI_TransmitReceive+0x358>
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	2201      	movs	r2, #1
 801057a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801057e:	f7fe fa79 	bl	800ea74 <HAL_GetTick>
 8010582:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801058a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	685b      	ldr	r3, [r3, #4]
 8010592:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8010594:	887b      	ldrh	r3, [r7, #2]
 8010596:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8010598:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801059c:	2b01      	cmp	r3, #1
 801059e:	d00f      	beq.n	80105c0 <HAL_SPI_TransmitReceive+0x70>
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80105a6:	d107      	bne.n	80105b8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	689b      	ldr	r3, [r3, #8]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d103      	bne.n	80105b8 <HAL_SPI_TransmitReceive+0x68>
 80105b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80105b4:	2b04      	cmp	r3, #4
 80105b6:	d003      	beq.n	80105c0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80105b8:	2302      	movs	r3, #2
 80105ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80105be:	e16d      	b.n	801089c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d005      	beq.n	80105d2 <HAL_SPI_TransmitReceive+0x82>
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d002      	beq.n	80105d2 <HAL_SPI_TransmitReceive+0x82>
 80105cc:	887b      	ldrh	r3, [r7, #2]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d103      	bne.n	80105da <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80105d2:	2301      	movs	r3, #1
 80105d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80105d8:	e160      	b.n	801089c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	2b04      	cmp	r3, #4
 80105e4:	d003      	beq.n	80105ee <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	2205      	movs	r2, #5
 80105ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	2200      	movs	r2, #0
 80105f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	887a      	ldrh	r2, [r7, #2]
 80105fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	887a      	ldrh	r2, [r7, #2]
 8010604:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	68ba      	ldr	r2, [r7, #8]
 801060a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	887a      	ldrh	r2, [r7, #2]
 8010610:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	887a      	ldrh	r2, [r7, #2]
 8010616:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2200      	movs	r2, #0
 801061c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	2200      	movs	r2, #0
 8010622:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801062e:	2b40      	cmp	r3, #64	; 0x40
 8010630:	d007      	beq.n	8010642 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010640:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801064a:	d17c      	bne.n	8010746 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	685b      	ldr	r3, [r3, #4]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d002      	beq.n	801065a <HAL_SPI_TransmitReceive+0x10a>
 8010654:	8b7b      	ldrh	r3, [r7, #26]
 8010656:	2b01      	cmp	r3, #1
 8010658:	d16a      	bne.n	8010730 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801065e:	881a      	ldrh	r2, [r3, #0]
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801066a:	1c9a      	adds	r2, r3, #2
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010674:	b29b      	uxth	r3, r3
 8010676:	3b01      	subs	r3, #1
 8010678:	b29a      	uxth	r2, r3
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801067e:	e057      	b.n	8010730 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	689b      	ldr	r3, [r3, #8]
 8010686:	f003 0302 	and.w	r3, r3, #2
 801068a:	2b02      	cmp	r3, #2
 801068c:	d11b      	bne.n	80106c6 <HAL_SPI_TransmitReceive+0x176>
 801068e:	68fb      	ldr	r3, [r7, #12]
 8010690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010692:	b29b      	uxth	r3, r3
 8010694:	2b00      	cmp	r3, #0
 8010696:	d016      	beq.n	80106c6 <HAL_SPI_TransmitReceive+0x176>
 8010698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069a:	2b01      	cmp	r3, #1
 801069c:	d113      	bne.n	80106c6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a2:	881a      	ldrh	r2, [r3, #0]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106ae:	1c9a      	adds	r2, r3, #2
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80106b8:	b29b      	uxth	r3, r3
 80106ba:	3b01      	subs	r3, #1
 80106bc:	b29a      	uxth	r2, r3
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80106c2:	2300      	movs	r3, #0
 80106c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	689b      	ldr	r3, [r3, #8]
 80106cc:	f003 0301 	and.w	r3, r3, #1
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	d119      	bne.n	8010708 <HAL_SPI_TransmitReceive+0x1b8>
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106d8:	b29b      	uxth	r3, r3
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d014      	beq.n	8010708 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80106de:	68fb      	ldr	r3, [r7, #12]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	68da      	ldr	r2, [r3, #12]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106e8:	b292      	uxth	r2, r2
 80106ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106f0:	1c9a      	adds	r2, r3, #2
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80106f6:	68fb      	ldr	r3, [r7, #12]
 80106f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	3b01      	subs	r3, #1
 80106fe:	b29a      	uxth	r2, r3
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010704:	2301      	movs	r3, #1
 8010706:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8010708:	f7fe f9b4 	bl	800ea74 <HAL_GetTick>
 801070c:	4602      	mov	r2, r0
 801070e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010710:	1ad3      	subs	r3, r2, r3
 8010712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010714:	429a      	cmp	r2, r3
 8010716:	d80b      	bhi.n	8010730 <HAL_SPI_TransmitReceive+0x1e0>
 8010718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801071e:	d007      	beq.n	8010730 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8010720:	2303      	movs	r3, #3
 8010722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	2201      	movs	r2, #1
 801072a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 801072e:	e0b5      	b.n	801089c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010734:	b29b      	uxth	r3, r3
 8010736:	2b00      	cmp	r3, #0
 8010738:	d1a2      	bne.n	8010680 <HAL_SPI_TransmitReceive+0x130>
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801073e:	b29b      	uxth	r3, r3
 8010740:	2b00      	cmp	r3, #0
 8010742:	d19d      	bne.n	8010680 <HAL_SPI_TransmitReceive+0x130>
 8010744:	e080      	b.n	8010848 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	2b00      	cmp	r3, #0
 801074c:	d002      	beq.n	8010754 <HAL_SPI_TransmitReceive+0x204>
 801074e:	8b7b      	ldrh	r3, [r7, #26]
 8010750:	2b01      	cmp	r3, #1
 8010752:	d16f      	bne.n	8010834 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	330c      	adds	r3, #12
 801075e:	7812      	ldrb	r2, [r2, #0]
 8010760:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010766:	1c5a      	adds	r2, r3, #1
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010770:	b29b      	uxth	r3, r3
 8010772:	3b01      	subs	r3, #1
 8010774:	b29a      	uxth	r2, r3
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801077a:	e05b      	b.n	8010834 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	681b      	ldr	r3, [r3, #0]
 8010780:	689b      	ldr	r3, [r3, #8]
 8010782:	f003 0302 	and.w	r3, r3, #2
 8010786:	2b02      	cmp	r3, #2
 8010788:	d11c      	bne.n	80107c4 <HAL_SPI_TransmitReceive+0x274>
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801078e:	b29b      	uxth	r3, r3
 8010790:	2b00      	cmp	r3, #0
 8010792:	d017      	beq.n	80107c4 <HAL_SPI_TransmitReceive+0x274>
 8010794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010796:	2b01      	cmp	r3, #1
 8010798:	d114      	bne.n	80107c4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	330c      	adds	r3, #12
 80107a4:	7812      	ldrb	r2, [r2, #0]
 80107a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ac:	1c5a      	adds	r2, r3, #1
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80107b6:	b29b      	uxth	r3, r3
 80107b8:	3b01      	subs	r3, #1
 80107ba:	b29a      	uxth	r2, r3
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80107c0:	2300      	movs	r3, #0
 80107c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	689b      	ldr	r3, [r3, #8]
 80107ca:	f003 0301 	and.w	r3, r3, #1
 80107ce:	2b01      	cmp	r3, #1
 80107d0:	d119      	bne.n	8010806 <HAL_SPI_TransmitReceive+0x2b6>
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107d6:	b29b      	uxth	r3, r3
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d014      	beq.n	8010806 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	68da      	ldr	r2, [r3, #12]
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107e6:	b2d2      	uxtb	r2, r2
 80107e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ee:	1c5a      	adds	r2, r3, #1
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	3b01      	subs	r3, #1
 80107fc:	b29a      	uxth	r2, r3
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8010802:	2301      	movs	r3, #1
 8010804:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8010806:	f7fe f935 	bl	800ea74 <HAL_GetTick>
 801080a:	4602      	mov	r2, r0
 801080c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010812:	429a      	cmp	r2, r3
 8010814:	d803      	bhi.n	801081e <HAL_SPI_TransmitReceive+0x2ce>
 8010816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010818:	f1b3 3fff 	cmp.w	r3, #4294967295
 801081c:	d102      	bne.n	8010824 <HAL_SPI_TransmitReceive+0x2d4>
 801081e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010820:	2b00      	cmp	r3, #0
 8010822:	d107      	bne.n	8010834 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8010824:	2303      	movs	r3, #3
 8010826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2201      	movs	r2, #1
 801082e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8010832:	e033      	b.n	801089c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8010838:	b29b      	uxth	r3, r3
 801083a:	2b00      	cmp	r3, #0
 801083c:	d19e      	bne.n	801077c <HAL_SPI_TransmitReceive+0x22c>
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8010842:	b29b      	uxth	r3, r3
 8010844:	2b00      	cmp	r3, #0
 8010846:	d199      	bne.n	801077c <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8010848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801084a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801084c:	68f8      	ldr	r0, [r7, #12]
 801084e:	f000 f8b7 	bl	80109c0 <SPI_EndRxTxTransaction>
 8010852:	4603      	mov	r3, r0
 8010854:	2b00      	cmp	r3, #0
 8010856:	d006      	beq.n	8010866 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8010858:	2301      	movs	r3, #1
 801085a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2220      	movs	r2, #32
 8010862:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8010864:	e01a      	b.n	801089c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	689b      	ldr	r3, [r3, #8]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d10a      	bne.n	8010884 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801086e:	2300      	movs	r3, #0
 8010870:	617b      	str	r3, [r7, #20]
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	68db      	ldr	r3, [r3, #12]
 8010878:	617b      	str	r3, [r7, #20]
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	689b      	ldr	r3, [r3, #8]
 8010880:	617b      	str	r3, [r7, #20]
 8010882:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010888:	2b00      	cmp	r3, #0
 801088a:	d003      	beq.n	8010894 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 801088c:	2301      	movs	r3, #1
 801088e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8010892:	e003      	b.n	801089c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	2201      	movs	r2, #1
 8010898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	2200      	movs	r2, #0
 80108a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80108a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	3730      	adds	r7, #48	; 0x30
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bd80      	pop	{r7, pc}

080108b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b088      	sub	sp, #32
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	60f8      	str	r0, [r7, #12]
 80108b8:	60b9      	str	r1, [r7, #8]
 80108ba:	603b      	str	r3, [r7, #0]
 80108bc:	4613      	mov	r3, r2
 80108be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80108c0:	f7fe f8d8 	bl	800ea74 <HAL_GetTick>
 80108c4:	4602      	mov	r2, r0
 80108c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c8:	1a9b      	subs	r3, r3, r2
 80108ca:	683a      	ldr	r2, [r7, #0]
 80108cc:	4413      	add	r3, r2
 80108ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80108d0:	f7fe f8d0 	bl	800ea74 <HAL_GetTick>
 80108d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80108d6:	4b39      	ldr	r3, [pc, #228]	; (80109bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	015b      	lsls	r3, r3, #5
 80108dc:	0d1b      	lsrs	r3, r3, #20
 80108de:	69fa      	ldr	r2, [r7, #28]
 80108e0:	fb02 f303 	mul.w	r3, r2, r3
 80108e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80108e6:	e054      	b.n	8010992 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108ee:	d050      	beq.n	8010992 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80108f0:	f7fe f8c0 	bl	800ea74 <HAL_GetTick>
 80108f4:	4602      	mov	r2, r0
 80108f6:	69bb      	ldr	r3, [r7, #24]
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	69fa      	ldr	r2, [r7, #28]
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d902      	bls.n	8010906 <SPI_WaitFlagStateUntilTimeout+0x56>
 8010900:	69fb      	ldr	r3, [r7, #28]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d13d      	bne.n	8010982 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	685a      	ldr	r2, [r3, #4]
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8010914:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	685b      	ldr	r3, [r3, #4]
 801091a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801091e:	d111      	bne.n	8010944 <SPI_WaitFlagStateUntilTimeout+0x94>
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	689b      	ldr	r3, [r3, #8]
 8010924:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010928:	d004      	beq.n	8010934 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	689b      	ldr	r3, [r3, #8]
 801092e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010932:	d107      	bne.n	8010944 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010942:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801094c:	d10f      	bne.n	801096e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	681a      	ldr	r2, [r3, #0]
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801095c:	601a      	str	r2, [r3, #0]
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801096c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	2201      	movs	r2, #1
 8010972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	2200      	movs	r2, #0
 801097a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 801097e:	2303      	movs	r3, #3
 8010980:	e017      	b.n	80109b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8010982:	697b      	ldr	r3, [r7, #20]
 8010984:	2b00      	cmp	r3, #0
 8010986:	d101      	bne.n	801098c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8010988:	2300      	movs	r3, #0
 801098a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	3b01      	subs	r3, #1
 8010990:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	689a      	ldr	r2, [r3, #8]
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	4013      	ands	r3, r2
 801099c:	68ba      	ldr	r2, [r7, #8]
 801099e:	429a      	cmp	r2, r3
 80109a0:	bf0c      	ite	eq
 80109a2:	2301      	moveq	r3, #1
 80109a4:	2300      	movne	r3, #0
 80109a6:	b2db      	uxtb	r3, r3
 80109a8:	461a      	mov	r2, r3
 80109aa:	79fb      	ldrb	r3, [r7, #7]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	d19b      	bne.n	80108e8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80109b0:	2300      	movs	r3, #0
}
 80109b2:	4618      	mov	r0, r3
 80109b4:	3720      	adds	r7, #32
 80109b6:	46bd      	mov	sp, r7
 80109b8:	bd80      	pop	{r7, pc}
 80109ba:	bf00      	nop
 80109bc:	20000078 	.word	0x20000078

080109c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b086      	sub	sp, #24
 80109c4:	af02      	add	r7, sp, #8
 80109c6:	60f8      	str	r0, [r7, #12]
 80109c8:	60b9      	str	r1, [r7, #8]
 80109ca:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	9300      	str	r3, [sp, #0]
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	2200      	movs	r2, #0
 80109d4:	2180      	movs	r1, #128	; 0x80
 80109d6:	68f8      	ldr	r0, [r7, #12]
 80109d8:	f7ff ff6a 	bl	80108b0 <SPI_WaitFlagStateUntilTimeout>
 80109dc:	4603      	mov	r3, r0
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d007      	beq.n	80109f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109e6:	f043 0220 	orr.w	r2, r3, #32
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80109ee:	2303      	movs	r3, #3
 80109f0:	e000      	b.n	80109f4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80109f2:	2300      	movs	r3, #0
}
 80109f4:	4618      	mov	r0, r3
 80109f6:	3710      	adds	r7, #16
 80109f8:	46bd      	mov	sp, r7
 80109fa:	bd80      	pop	{r7, pc}

080109fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d101      	bne.n	8010a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010a0a:	2301      	movs	r3, #1
 8010a0c:	e042      	b.n	8010a94 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010a14:	b2db      	uxtb	r3, r3
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d106      	bne.n	8010a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f7fd fd6e 	bl	800e504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	2224      	movs	r2, #36	; 0x24
 8010a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	68da      	ldr	r2, [r3, #12]
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 fdc5 	bl	80115d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	691a      	ldr	r2, [r3, #16]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	695a      	ldr	r2, [r3, #20]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68da      	ldr	r2, [r3, #12]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8010a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2220      	movs	r2, #32
 8010a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2220      	movs	r2, #32
 8010a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8010a92:	2300      	movs	r3, #0
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3708      	adds	r7, #8
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}

08010a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	b08a      	sub	sp, #40	; 0x28
 8010aa0:	af02      	add	r7, sp, #8
 8010aa2:	60f8      	str	r0, [r7, #12]
 8010aa4:	60b9      	str	r1, [r7, #8]
 8010aa6:	603b      	str	r3, [r7, #0]
 8010aa8:	4613      	mov	r3, r2
 8010aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8010aac:	2300      	movs	r3, #0
 8010aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	2b20      	cmp	r3, #32
 8010aba:	d16d      	bne.n	8010b98 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8010abc:	68bb      	ldr	r3, [r7, #8]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d002      	beq.n	8010ac8 <HAL_UART_Transmit+0x2c>
 8010ac2:	88fb      	ldrh	r3, [r7, #6]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d101      	bne.n	8010acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8010ac8:	2301      	movs	r3, #1
 8010aca:	e066      	b.n	8010b9a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	2221      	movs	r2, #33	; 0x21
 8010ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8010ada:	f7fd ffcb 	bl	800ea74 <HAL_GetTick>
 8010ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	88fa      	ldrh	r2, [r7, #6]
 8010ae4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	88fa      	ldrh	r2, [r7, #6]
 8010aea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	689b      	ldr	r3, [r3, #8]
 8010af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010af4:	d108      	bne.n	8010b08 <HAL_UART_Transmit+0x6c>
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	691b      	ldr	r3, [r3, #16]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d104      	bne.n	8010b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8010afe:	2300      	movs	r3, #0
 8010b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	61bb      	str	r3, [r7, #24]
 8010b06:	e003      	b.n	8010b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8010b10:	e02a      	b.n	8010b68 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	9300      	str	r3, [sp, #0]
 8010b16:	697b      	ldr	r3, [r7, #20]
 8010b18:	2200      	movs	r2, #0
 8010b1a:	2180      	movs	r1, #128	; 0x80
 8010b1c:	68f8      	ldr	r0, [r7, #12]
 8010b1e:	f000 fb14 	bl	801114a <UART_WaitOnFlagUntilTimeout>
 8010b22:	4603      	mov	r3, r0
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d001      	beq.n	8010b2c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8010b28:	2303      	movs	r3, #3
 8010b2a:	e036      	b.n	8010b9a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8010b2c:	69fb      	ldr	r3, [r7, #28]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d10b      	bne.n	8010b4a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8010b32:	69bb      	ldr	r3, [r7, #24]
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	461a      	mov	r2, r3
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010b40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8010b42:	69bb      	ldr	r3, [r7, #24]
 8010b44:	3302      	adds	r3, #2
 8010b46:	61bb      	str	r3, [r7, #24]
 8010b48:	e007      	b.n	8010b5a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	781a      	ldrb	r2, [r3, #0]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8010b54:	69fb      	ldr	r3, [r7, #28]
 8010b56:	3301      	adds	r3, #1
 8010b58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b5e:	b29b      	uxth	r3, r3
 8010b60:	3b01      	subs	r3, #1
 8010b62:	b29a      	uxth	r2, r3
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8010b6c:	b29b      	uxth	r3, r3
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d1cf      	bne.n	8010b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	9300      	str	r3, [sp, #0]
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	2140      	movs	r1, #64	; 0x40
 8010b7c:	68f8      	ldr	r0, [r7, #12]
 8010b7e:	f000 fae4 	bl	801114a <UART_WaitOnFlagUntilTimeout>
 8010b82:	4603      	mov	r3, r0
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d001      	beq.n	8010b8c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8010b88:	2303      	movs	r3, #3
 8010b8a:	e006      	b.n	8010b9a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2220      	movs	r2, #32
 8010b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8010b94:	2300      	movs	r3, #0
 8010b96:	e000      	b.n	8010b9a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8010b98:	2302      	movs	r3, #2
  }
}
 8010b9a:	4618      	mov	r0, r3
 8010b9c:	3720      	adds	r7, #32
 8010b9e:	46bd      	mov	sp, r7
 8010ba0:	bd80      	pop	{r7, pc}

08010ba2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010ba2:	b580      	push	{r7, lr}
 8010ba4:	b084      	sub	sp, #16
 8010ba6:	af00      	add	r7, sp, #0
 8010ba8:	60f8      	str	r0, [r7, #12]
 8010baa:	60b9      	str	r1, [r7, #8]
 8010bac:	4613      	mov	r3, r2
 8010bae:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010bb6:	b2db      	uxtb	r3, r3
 8010bb8:	2b20      	cmp	r3, #32
 8010bba:	d112      	bne.n	8010be2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d002      	beq.n	8010bc8 <HAL_UART_Receive_IT+0x26>
 8010bc2:	88fb      	ldrh	r3, [r7, #6]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d101      	bne.n	8010bcc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	e00b      	b.n	8010be4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2200      	movs	r2, #0
 8010bd0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8010bd2:	88fb      	ldrh	r3, [r7, #6]
 8010bd4:	461a      	mov	r2, r3
 8010bd6:	68b9      	ldr	r1, [r7, #8]
 8010bd8:	68f8      	ldr	r0, [r7, #12]
 8010bda:	f000 fb24 	bl	8011226 <UART_Start_Receive_IT>
 8010bde:	4603      	mov	r3, r0
 8010be0:	e000      	b.n	8010be4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8010be2:	2302      	movs	r3, #2
  }
}
 8010be4:	4618      	mov	r0, r3
 8010be6:	3710      	adds	r7, #16
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}

08010bec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b0ba      	sub	sp, #232	; 0xe8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	695b      	ldr	r3, [r3, #20]
 8010c0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8010c12:	2300      	movs	r3, #0
 8010c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8010c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c22:	f003 030f 	and.w	r3, r3, #15
 8010c26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8010c2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d10f      	bne.n	8010c52 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c36:	f003 0320 	and.w	r3, r3, #32
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d009      	beq.n	8010c52 <HAL_UART_IRQHandler+0x66>
 8010c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c42:	f003 0320 	and.w	r3, r3, #32
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d003      	beq.n	8010c52 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 fc01 	bl	8011452 <UART_Receive_IT>
      return;
 8010c50:	e25b      	b.n	801110a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8010c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	f000 80de 	beq.w	8010e18 <HAL_UART_IRQHandler+0x22c>
 8010c5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010c60:	f003 0301 	and.w	r3, r3, #1
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d106      	bne.n	8010c76 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8010c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	f000 80d1 	beq.w	8010e18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8010c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c7a:	f003 0301 	and.w	r3, r3, #1
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d00b      	beq.n	8010c9a <HAL_UART_IRQHandler+0xae>
 8010c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d005      	beq.n	8010c9a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c92:	f043 0201 	orr.w	r2, r3, #1
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010c9e:	f003 0304 	and.w	r3, r3, #4
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00b      	beq.n	8010cbe <HAL_UART_IRQHandler+0xd2>
 8010ca6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010caa:	f003 0301 	and.w	r3, r3, #1
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d005      	beq.n	8010cbe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cb6:	f043 0202 	orr.w	r2, r3, #2
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8010cbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010cc2:	f003 0302 	and.w	r3, r3, #2
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d00b      	beq.n	8010ce2 <HAL_UART_IRQHandler+0xf6>
 8010cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cce:	f003 0301 	and.w	r3, r3, #1
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d005      	beq.n	8010ce2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cda:	f043 0204 	orr.w	r2, r3, #4
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8010ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010ce6:	f003 0308 	and.w	r3, r3, #8
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d011      	beq.n	8010d12 <HAL_UART_IRQHandler+0x126>
 8010cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010cf2:	f003 0320 	and.w	r3, r3, #32
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d105      	bne.n	8010d06 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8010cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cfe:	f003 0301 	and.w	r3, r3, #1
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d005      	beq.n	8010d12 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d0a:	f043 0208 	orr.w	r2, r3, #8
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	f000 81f2 	beq.w	8011100 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8010d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010d20:	f003 0320 	and.w	r3, r3, #32
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d008      	beq.n	8010d3a <HAL_UART_IRQHandler+0x14e>
 8010d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010d2c:	f003 0320 	and.w	r3, r3, #32
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d002      	beq.n	8010d3a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f000 fb8c 	bl	8011452 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	695b      	ldr	r3, [r3, #20]
 8010d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	bf14      	ite	ne
 8010d48:	2301      	movne	r3, #1
 8010d4a:	2300      	moveq	r3, #0
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d56:	f003 0308 	and.w	r3, r3, #8
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d103      	bne.n	8010d66 <HAL_UART_IRQHandler+0x17a>
 8010d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d04f      	beq.n	8010e06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f000 fa96 	bl	8011298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	695b      	ldr	r3, [r3, #20]
 8010d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d041      	beq.n	8010dfe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	3314      	adds	r3, #20
 8010d80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d84:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010d88:	e853 3f00 	ldrex	r3, [r3]
 8010d8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010d90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	3314      	adds	r3, #20
 8010da2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010da6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8010daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8010db2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8010db6:	e841 2300 	strex	r3, r2, [r1]
 8010dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d1d9      	bne.n	8010d7a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d013      	beq.n	8010df6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dd2:	4a7e      	ldr	r2, [pc, #504]	; (8010fcc <HAL_UART_IRQHandler+0x3e0>)
 8010dd4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dda:	4618      	mov	r0, r3
 8010ddc:	f7fd ffc0 	bl	800ed60 <HAL_DMA_Abort_IT>
 8010de0:	4603      	mov	r3, r0
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d016      	beq.n	8010e14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8010df0:	4610      	mov	r0, r2
 8010df2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010df4:	e00e      	b.n	8010e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f000 f993 	bl	8011122 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010dfc:	e00a      	b.n	8010e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f000 f98f 	bl	8011122 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e04:	e006      	b.n	8010e14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 f98b 	bl	8011122 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8010e12:	e175      	b.n	8011100 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e14:	bf00      	nop
    return;
 8010e16:	e173      	b.n	8011100 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e1c:	2b01      	cmp	r3, #1
 8010e1e:	f040 814f 	bne.w	80110c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8010e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010e26:	f003 0310 	and.w	r3, r3, #16
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	f000 8148 	beq.w	80110c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8010e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010e34:	f003 0310 	and.w	r3, r3, #16
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	f000 8141 	beq.w	80110c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010e3e:	2300      	movs	r3, #0
 8010e40:	60bb      	str	r3, [r7, #8]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	60bb      	str	r3, [r7, #8]
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	60bb      	str	r3, [r7, #8]
 8010e52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	695b      	ldr	r3, [r3, #20]
 8010e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	f000 80b6 	beq.w	8010fd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	685b      	ldr	r3, [r3, #4]
 8010e6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010e70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	f000 8145 	beq.w	8011104 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010e82:	429a      	cmp	r2, r3
 8010e84:	f080 813e 	bcs.w	8011104 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010e8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e94:	699b      	ldr	r3, [r3, #24]
 8010e96:	2b20      	cmp	r3, #32
 8010e98:	f000 8088 	beq.w	8010fac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	330c      	adds	r3, #12
 8010ea2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ea6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8010eaa:	e853 3f00 	ldrex	r3, [r3]
 8010eae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8010eb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010eba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	330c      	adds	r3, #12
 8010ec4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010ec8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8010ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ed0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010ed4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010ed8:	e841 2300 	strex	r3, r2, [r1]
 8010edc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d1d9      	bne.n	8010e9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	3314      	adds	r3, #20
 8010eee:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010ef2:	e853 3f00 	ldrex	r3, [r3]
 8010ef6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8010ef8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010efa:	f023 0301 	bic.w	r3, r3, #1
 8010efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	3314      	adds	r3, #20
 8010f08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010f0c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010f10:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f12:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010f14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8010f18:	e841 2300 	strex	r3, r2, [r1]
 8010f1c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010f1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d1e1      	bne.n	8010ee8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	3314      	adds	r3, #20
 8010f2a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010f2e:	e853 3f00 	ldrex	r3, [r3]
 8010f32:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010f36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	3314      	adds	r3, #20
 8010f44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010f48:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010f4a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f4c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010f4e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010f50:	e841 2300 	strex	r3, r2, [r1]
 8010f54:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d1e3      	bne.n	8010f24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2220      	movs	r2, #32
 8010f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2200      	movs	r2, #0
 8010f68:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	330c      	adds	r3, #12
 8010f70:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f74:	e853 3f00 	ldrex	r3, [r3]
 8010f78:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f7c:	f023 0310 	bic.w	r3, r3, #16
 8010f80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	330c      	adds	r3, #12
 8010f8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010f8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8010f90:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f92:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010f96:	e841 2300 	strex	r3, r2, [r1]
 8010f9a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d1e3      	bne.n	8010f6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fd fe9f 	bl	800ecea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2202      	movs	r2, #2
 8010fb0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	1ad3      	subs	r3, r2, r3
 8010fbe:	b29b      	uxth	r3, r3
 8010fc0:	4619      	mov	r1, r3
 8010fc2:	6878      	ldr	r0, [r7, #4]
 8010fc4:	f000 f8b6 	bl	8011134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8010fc8:	e09c      	b.n	8011104 <HAL_UART_IRQHandler+0x518>
 8010fca:	bf00      	nop
 8010fcc:	0801135d 	.word	0x0801135d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	1ad3      	subs	r3, r2, r3
 8010fdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	f000 808e 	beq.w	8011108 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8010fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	f000 8089 	beq.w	8011108 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	330c      	adds	r3, #12
 8010ffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011000:	e853 3f00 	ldrex	r3, [r3]
 8011004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011008:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801100c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	330c      	adds	r3, #12
 8011016:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801101a:	647a      	str	r2, [r7, #68]	; 0x44
 801101c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801101e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011020:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011022:	e841 2300 	strex	r3, r2, [r1]
 8011026:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801102a:	2b00      	cmp	r3, #0
 801102c:	d1e3      	bne.n	8010ff6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	3314      	adds	r3, #20
 8011034:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011038:	e853 3f00 	ldrex	r3, [r3]
 801103c:	623b      	str	r3, [r7, #32]
   return(result);
 801103e:	6a3b      	ldr	r3, [r7, #32]
 8011040:	f023 0301 	bic.w	r3, r3, #1
 8011044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	3314      	adds	r3, #20
 801104e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011052:	633a      	str	r2, [r7, #48]	; 0x30
 8011054:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011056:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011058:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801105a:	e841 2300 	strex	r3, r2, [r1]
 801105e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1e3      	bne.n	801102e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	2220      	movs	r2, #32
 801106a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2200      	movs	r2, #0
 8011072:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	330c      	adds	r3, #12
 801107a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801107c:	693b      	ldr	r3, [r7, #16]
 801107e:	e853 3f00 	ldrex	r3, [r3]
 8011082:	60fb      	str	r3, [r7, #12]
   return(result);
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f023 0310 	bic.w	r3, r3, #16
 801108a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	330c      	adds	r3, #12
 8011094:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8011098:	61fa      	str	r2, [r7, #28]
 801109a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801109c:	69b9      	ldr	r1, [r7, #24]
 801109e:	69fa      	ldr	r2, [r7, #28]
 80110a0:	e841 2300 	strex	r3, r2, [r1]
 80110a4:	617b      	str	r3, [r7, #20]
   return(result);
 80110a6:	697b      	ldr	r3, [r7, #20]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d1e3      	bne.n	8011074 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2202      	movs	r2, #2
 80110b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80110b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80110b6:	4619      	mov	r1, r3
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 f83b 	bl	8011134 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80110be:	e023      	b.n	8011108 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80110c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d009      	beq.n	80110e0 <HAL_UART_IRQHandler+0x4f4>
 80110cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80110d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d003      	beq.n	80110e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 f953 	bl	8011384 <UART_Transmit_IT>
    return;
 80110de:	e014      	b.n	801110a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80110e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80110e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00e      	beq.n	801110a <HAL_UART_IRQHandler+0x51e>
 80110ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80110f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d008      	beq.n	801110a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80110f8:	6878      	ldr	r0, [r7, #4]
 80110fa:	f000 f992 	bl	8011422 <UART_EndTransmit_IT>
    return;
 80110fe:	e004      	b.n	801110a <HAL_UART_IRQHandler+0x51e>
    return;
 8011100:	bf00      	nop
 8011102:	e002      	b.n	801110a <HAL_UART_IRQHandler+0x51e>
      return;
 8011104:	bf00      	nop
 8011106:	e000      	b.n	801110a <HAL_UART_IRQHandler+0x51e>
      return;
 8011108:	bf00      	nop
  }
}
 801110a:	37e8      	adds	r7, #232	; 0xe8
 801110c:	46bd      	mov	sp, r7
 801110e:	bd80      	pop	{r7, pc}

08011110 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011110:	b480      	push	{r7}
 8011112:	b083      	sub	sp, #12
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8011118:	bf00      	nop
 801111a:	370c      	adds	r7, #12
 801111c:	46bd      	mov	sp, r7
 801111e:	bc80      	pop	{r7}
 8011120:	4770      	bx	lr

08011122 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011122:	b480      	push	{r7}
 8011124:	b083      	sub	sp, #12
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 801112a:	bf00      	nop
 801112c:	370c      	adds	r7, #12
 801112e:	46bd      	mov	sp, r7
 8011130:	bc80      	pop	{r7}
 8011132:	4770      	bx	lr

08011134 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011134:	b480      	push	{r7}
 8011136:	b083      	sub	sp, #12
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
 801113c:	460b      	mov	r3, r1
 801113e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011140:	bf00      	nop
 8011142:	370c      	adds	r7, #12
 8011144:	46bd      	mov	sp, r7
 8011146:	bc80      	pop	{r7}
 8011148:	4770      	bx	lr

0801114a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 801114a:	b580      	push	{r7, lr}
 801114c:	b090      	sub	sp, #64	; 0x40
 801114e:	af00      	add	r7, sp, #0
 8011150:	60f8      	str	r0, [r7, #12]
 8011152:	60b9      	str	r1, [r7, #8]
 8011154:	603b      	str	r3, [r7, #0]
 8011156:	4613      	mov	r3, r2
 8011158:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801115a:	e050      	b.n	80111fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801115c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801115e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011162:	d04c      	beq.n	80111fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8011164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011166:	2b00      	cmp	r3, #0
 8011168:	d007      	beq.n	801117a <UART_WaitOnFlagUntilTimeout+0x30>
 801116a:	f7fd fc83 	bl	800ea74 <HAL_GetTick>
 801116e:	4602      	mov	r2, r0
 8011170:	683b      	ldr	r3, [r7, #0]
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011176:	429a      	cmp	r2, r3
 8011178:	d241      	bcs.n	80111fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	330c      	adds	r3, #12
 8011180:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011184:	e853 3f00 	ldrex	r3, [r3]
 8011188:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801118a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801118c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	330c      	adds	r3, #12
 8011198:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801119a:	637a      	str	r2, [r7, #52]	; 0x34
 801119c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801119e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80111a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80111a2:	e841 2300 	strex	r3, r2, [r1]
 80111a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80111a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d1e5      	bne.n	801117a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	3314      	adds	r3, #20
 80111b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	e853 3f00 	ldrex	r3, [r3]
 80111bc:	613b      	str	r3, [r7, #16]
   return(result);
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	f023 0301 	bic.w	r3, r3, #1
 80111c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	3314      	adds	r3, #20
 80111cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111ce:	623a      	str	r2, [r7, #32]
 80111d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111d2:	69f9      	ldr	r1, [r7, #28]
 80111d4:	6a3a      	ldr	r2, [r7, #32]
 80111d6:	e841 2300 	strex	r3, r2, [r1]
 80111da:	61bb      	str	r3, [r7, #24]
   return(result);
 80111dc:	69bb      	ldr	r3, [r7, #24]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d1e5      	bne.n	80111ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2220      	movs	r2, #32
 80111e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	2220      	movs	r2, #32
 80111ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2200      	movs	r2, #0
 80111f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80111fa:	2303      	movs	r3, #3
 80111fc:	e00f      	b.n	801121e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	4013      	ands	r3, r2
 8011208:	68ba      	ldr	r2, [r7, #8]
 801120a:	429a      	cmp	r2, r3
 801120c:	bf0c      	ite	eq
 801120e:	2301      	moveq	r3, #1
 8011210:	2300      	movne	r3, #0
 8011212:	b2db      	uxtb	r3, r3
 8011214:	461a      	mov	r2, r3
 8011216:	79fb      	ldrb	r3, [r7, #7]
 8011218:	429a      	cmp	r2, r3
 801121a:	d09f      	beq.n	801115c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801121c:	2300      	movs	r3, #0
}
 801121e:	4618      	mov	r0, r3
 8011220:	3740      	adds	r7, #64	; 0x40
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011226:	b480      	push	{r7}
 8011228:	b085      	sub	sp, #20
 801122a:	af00      	add	r7, sp, #0
 801122c:	60f8      	str	r0, [r7, #12]
 801122e:	60b9      	str	r1, [r7, #8]
 8011230:	4613      	mov	r3, r2
 8011232:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	68ba      	ldr	r2, [r7, #8]
 8011238:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	88fa      	ldrh	r2, [r7, #6]
 801123e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	88fa      	ldrh	r2, [r7, #6]
 8011244:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	2200      	movs	r2, #0
 801124a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	2222      	movs	r2, #34	; 0x22
 8011250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	691b      	ldr	r3, [r3, #16]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d007      	beq.n	801126c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	68da      	ldr	r2, [r3, #12]
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801126a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	695a      	ldr	r2, [r3, #20]
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	f042 0201 	orr.w	r2, r2, #1
 801127a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	68da      	ldr	r2, [r3, #12]
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f042 0220 	orr.w	r2, r2, #32
 801128a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801128c:	2300      	movs	r3, #0
}
 801128e:	4618      	mov	r0, r3
 8011290:	3714      	adds	r7, #20
 8011292:	46bd      	mov	sp, r7
 8011294:	bc80      	pop	{r7}
 8011296:	4770      	bx	lr

08011298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011298:	b480      	push	{r7}
 801129a:	b095      	sub	sp, #84	; 0x54
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	330c      	adds	r3, #12
 80112a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112aa:	e853 3f00 	ldrex	r3, [r3]
 80112ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80112b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80112b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	330c      	adds	r3, #12
 80112be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112c0:	643a      	str	r2, [r7, #64]	; 0x40
 80112c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80112c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80112c8:	e841 2300 	strex	r3, r2, [r1]
 80112cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80112ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1e5      	bne.n	80112a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	3314      	adds	r3, #20
 80112da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112dc:	6a3b      	ldr	r3, [r7, #32]
 80112de:	e853 3f00 	ldrex	r3, [r3]
 80112e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80112e4:	69fb      	ldr	r3, [r7, #28]
 80112e6:	f023 0301 	bic.w	r3, r3, #1
 80112ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	3314      	adds	r3, #20
 80112f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80112f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80112f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80112fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112fc:	e841 2300 	strex	r3, r2, [r1]
 8011300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011304:	2b00      	cmp	r3, #0
 8011306:	d1e5      	bne.n	80112d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801130c:	2b01      	cmp	r3, #1
 801130e:	d119      	bne.n	8011344 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	330c      	adds	r3, #12
 8011316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	e853 3f00 	ldrex	r3, [r3]
 801131e:	60bb      	str	r3, [r7, #8]
   return(result);
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	f023 0310 	bic.w	r3, r3, #16
 8011326:	647b      	str	r3, [r7, #68]	; 0x44
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	330c      	adds	r3, #12
 801132e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011330:	61ba      	str	r2, [r7, #24]
 8011332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011334:	6979      	ldr	r1, [r7, #20]
 8011336:	69ba      	ldr	r2, [r7, #24]
 8011338:	e841 2300 	strex	r3, r2, [r1]
 801133c:	613b      	str	r3, [r7, #16]
   return(result);
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d1e5      	bne.n	8011310 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2220      	movs	r2, #32
 8011348:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2200      	movs	r2, #0
 8011350:	631a      	str	r2, [r3, #48]	; 0x30
}
 8011352:	bf00      	nop
 8011354:	3754      	adds	r7, #84	; 0x54
 8011356:	46bd      	mov	sp, r7
 8011358:	bc80      	pop	{r7}
 801135a:	4770      	bx	lr

0801135c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b084      	sub	sp, #16
 8011360:	af00      	add	r7, sp, #0
 8011362:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011368:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2200      	movs	r2, #0
 801136e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	2200      	movs	r2, #0
 8011374:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011376:	68f8      	ldr	r0, [r7, #12]
 8011378:	f7ff fed3 	bl	8011122 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801137c:	bf00      	nop
 801137e:	3710      	adds	r7, #16
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8011384:	b480      	push	{r7}
 8011386:	b085      	sub	sp, #20
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8011392:	b2db      	uxtb	r3, r3
 8011394:	2b21      	cmp	r3, #33	; 0x21
 8011396:	d13e      	bne.n	8011416 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	689b      	ldr	r3, [r3, #8]
 801139c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113a0:	d114      	bne.n	80113cc <UART_Transmit_IT+0x48>
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	691b      	ldr	r3, [r3, #16]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d110      	bne.n	80113cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	6a1b      	ldr	r3, [r3, #32]
 80113ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	461a      	mov	r2, r3
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80113be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6a1b      	ldr	r3, [r3, #32]
 80113c4:	1c9a      	adds	r2, r3, #2
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	621a      	str	r2, [r3, #32]
 80113ca:	e008      	b.n	80113de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	6a1b      	ldr	r3, [r3, #32]
 80113d0:	1c59      	adds	r1, r3, #1
 80113d2:	687a      	ldr	r2, [r7, #4]
 80113d4:	6211      	str	r1, [r2, #32]
 80113d6:	781a      	ldrb	r2, [r3, #0]
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80113de:	687b      	ldr	r3, [r7, #4]
 80113e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	3b01      	subs	r3, #1
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	687a      	ldr	r2, [r7, #4]
 80113ea:	4619      	mov	r1, r3
 80113ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d10f      	bne.n	8011412 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	68da      	ldr	r2, [r3, #12]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011400:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	68da      	ldr	r2, [r3, #12]
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011410:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8011412:	2300      	movs	r3, #0
 8011414:	e000      	b.n	8011418 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8011416:	2302      	movs	r3, #2
  }
}
 8011418:	4618      	mov	r0, r3
 801141a:	3714      	adds	r7, #20
 801141c:	46bd      	mov	sp, r7
 801141e:	bc80      	pop	{r7}
 8011420:	4770      	bx	lr

08011422 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011422:	b580      	push	{r7, lr}
 8011424:	b082      	sub	sp, #8
 8011426:	af00      	add	r7, sp, #0
 8011428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	68da      	ldr	r2, [r3, #12]
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011438:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2220      	movs	r2, #32
 801143e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011442:	6878      	ldr	r0, [r7, #4]
 8011444:	f7ff fe64 	bl	8011110 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8011448:	2300      	movs	r3, #0
}
 801144a:	4618      	mov	r0, r3
 801144c:	3708      	adds	r7, #8
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}

08011452 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8011452:	b580      	push	{r7, lr}
 8011454:	b08c      	sub	sp, #48	; 0x30
 8011456:	af00      	add	r7, sp, #0
 8011458:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011460:	b2db      	uxtb	r3, r3
 8011462:	2b22      	cmp	r3, #34	; 0x22
 8011464:	f040 80ae 	bne.w	80115c4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	689b      	ldr	r3, [r3, #8]
 801146c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011470:	d117      	bne.n	80114a2 <UART_Receive_IT+0x50>
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	691b      	ldr	r3, [r3, #16]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d113      	bne.n	80114a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 801147a:	2300      	movs	r3, #0
 801147c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011482:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	b29b      	uxth	r3, r3
 801148c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011490:	b29a      	uxth	r2, r3
 8011492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011494:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801149a:	1c9a      	adds	r2, r3, #2
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	629a      	str	r2, [r3, #40]	; 0x28
 80114a0:	e026      	b.n	80114f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80114a8:	2300      	movs	r3, #0
 80114aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	689b      	ldr	r3, [r3, #8]
 80114b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80114b4:	d007      	beq.n	80114c6 <UART_Receive_IT+0x74>
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	689b      	ldr	r3, [r3, #8]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d10a      	bne.n	80114d4 <UART_Receive_IT+0x82>
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	691b      	ldr	r3, [r3, #16]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d106      	bne.n	80114d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	b2da      	uxtb	r2, r3
 80114ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d0:	701a      	strb	r2, [r3, #0]
 80114d2:	e008      	b.n	80114e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	685b      	ldr	r3, [r3, #4]
 80114da:	b2db      	uxtb	r3, r3
 80114dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80114e0:	b2da      	uxtb	r2, r3
 80114e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ea:	1c5a      	adds	r2, r3, #1
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	3b01      	subs	r3, #1
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	4619      	mov	r1, r3
 80114fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8011500:	2b00      	cmp	r3, #0
 8011502:	d15d      	bne.n	80115c0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	68da      	ldr	r2, [r3, #12]
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	f022 0220 	bic.w	r2, r2, #32
 8011512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	68da      	ldr	r2, [r3, #12]
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011522:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	695a      	ldr	r2, [r3, #20]
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f022 0201 	bic.w	r2, r2, #1
 8011532:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2220      	movs	r2, #32
 8011538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2200      	movs	r2, #0
 8011540:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011546:	2b01      	cmp	r3, #1
 8011548:	d135      	bne.n	80115b6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2200      	movs	r2, #0
 801154e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	330c      	adds	r3, #12
 8011556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	e853 3f00 	ldrex	r3, [r3]
 801155e:	613b      	str	r3, [r7, #16]
   return(result);
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	f023 0310 	bic.w	r3, r3, #16
 8011566:	627b      	str	r3, [r7, #36]	; 0x24
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	330c      	adds	r3, #12
 801156e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011570:	623a      	str	r2, [r7, #32]
 8011572:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011574:	69f9      	ldr	r1, [r7, #28]
 8011576:	6a3a      	ldr	r2, [r7, #32]
 8011578:	e841 2300 	strex	r3, r2, [r1]
 801157c:	61bb      	str	r3, [r7, #24]
   return(result);
 801157e:	69bb      	ldr	r3, [r7, #24]
 8011580:	2b00      	cmp	r3, #0
 8011582:	d1e5      	bne.n	8011550 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f003 0310 	and.w	r3, r3, #16
 801158e:	2b10      	cmp	r3, #16
 8011590:	d10a      	bne.n	80115a8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8011592:	2300      	movs	r3, #0
 8011594:	60fb      	str	r3, [r7, #12]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	60fb      	str	r3, [r7, #12]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	685b      	ldr	r3, [r3, #4]
 80115a4:	60fb      	str	r3, [r7, #12]
 80115a6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80115ac:	4619      	mov	r1, r3
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f7ff fdc0 	bl	8011134 <HAL_UARTEx_RxEventCallback>
 80115b4:	e002      	b.n	80115bc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f7fb fdb2 	bl	800d120 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80115bc:	2300      	movs	r3, #0
 80115be:	e002      	b.n	80115c6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80115c0:	2300      	movs	r3, #0
 80115c2:	e000      	b.n	80115c6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80115c4:	2302      	movs	r3, #2
  }
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3730      	adds	r7, #48	; 0x30
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
	...

080115d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b084      	sub	sp, #16
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	691b      	ldr	r3, [r3, #16]
 80115de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	68da      	ldr	r2, [r3, #12]
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	430a      	orrs	r2, r1
 80115ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	689a      	ldr	r2, [r3, #8]
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	691b      	ldr	r3, [r3, #16]
 80115f6:	431a      	orrs	r2, r3
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	695b      	ldr	r3, [r3, #20]
 80115fc:	4313      	orrs	r3, r2
 80115fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	68db      	ldr	r3, [r3, #12]
 8011606:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 801160a:	f023 030c 	bic.w	r3, r3, #12
 801160e:	687a      	ldr	r2, [r7, #4]
 8011610:	6812      	ldr	r2, [r2, #0]
 8011612:	68b9      	ldr	r1, [r7, #8]
 8011614:	430b      	orrs	r3, r1
 8011616:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	695b      	ldr	r3, [r3, #20]
 801161e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	699a      	ldr	r2, [r3, #24]
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	430a      	orrs	r2, r1
 801162c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	4a2c      	ldr	r2, [pc, #176]	; (80116e4 <UART_SetConfig+0x114>)
 8011634:	4293      	cmp	r3, r2
 8011636:	d103      	bne.n	8011640 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8011638:	f7fe fed4 	bl	80103e4 <HAL_RCC_GetPCLK2Freq>
 801163c:	60f8      	str	r0, [r7, #12]
 801163e:	e002      	b.n	8011646 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8011640:	f7fe febc 	bl	80103bc <HAL_RCC_GetPCLK1Freq>
 8011644:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8011646:	68fa      	ldr	r2, [r7, #12]
 8011648:	4613      	mov	r3, r2
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	4413      	add	r3, r2
 801164e:	009a      	lsls	r2, r3, #2
 8011650:	441a      	add	r2, r3
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	fbb2 f3f3 	udiv	r3, r2, r3
 801165c:	4a22      	ldr	r2, [pc, #136]	; (80116e8 <UART_SetConfig+0x118>)
 801165e:	fba2 2303 	umull	r2, r3, r2, r3
 8011662:	095b      	lsrs	r3, r3, #5
 8011664:	0119      	lsls	r1, r3, #4
 8011666:	68fa      	ldr	r2, [r7, #12]
 8011668:	4613      	mov	r3, r2
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	4413      	add	r3, r2
 801166e:	009a      	lsls	r2, r3, #2
 8011670:	441a      	add	r2, r3
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	009b      	lsls	r3, r3, #2
 8011678:	fbb2 f2f3 	udiv	r2, r2, r3
 801167c:	4b1a      	ldr	r3, [pc, #104]	; (80116e8 <UART_SetConfig+0x118>)
 801167e:	fba3 0302 	umull	r0, r3, r3, r2
 8011682:	095b      	lsrs	r3, r3, #5
 8011684:	2064      	movs	r0, #100	; 0x64
 8011686:	fb00 f303 	mul.w	r3, r0, r3
 801168a:	1ad3      	subs	r3, r2, r3
 801168c:	011b      	lsls	r3, r3, #4
 801168e:	3332      	adds	r3, #50	; 0x32
 8011690:	4a15      	ldr	r2, [pc, #84]	; (80116e8 <UART_SetConfig+0x118>)
 8011692:	fba2 2303 	umull	r2, r3, r2, r3
 8011696:	095b      	lsrs	r3, r3, #5
 8011698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801169c:	4419      	add	r1, r3
 801169e:	68fa      	ldr	r2, [r7, #12]
 80116a0:	4613      	mov	r3, r2
 80116a2:	009b      	lsls	r3, r3, #2
 80116a4:	4413      	add	r3, r2
 80116a6:	009a      	lsls	r2, r3, #2
 80116a8:	441a      	add	r2, r3
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80116b4:	4b0c      	ldr	r3, [pc, #48]	; (80116e8 <UART_SetConfig+0x118>)
 80116b6:	fba3 0302 	umull	r0, r3, r3, r2
 80116ba:	095b      	lsrs	r3, r3, #5
 80116bc:	2064      	movs	r0, #100	; 0x64
 80116be:	fb00 f303 	mul.w	r3, r0, r3
 80116c2:	1ad3      	subs	r3, r2, r3
 80116c4:	011b      	lsls	r3, r3, #4
 80116c6:	3332      	adds	r3, #50	; 0x32
 80116c8:	4a07      	ldr	r2, [pc, #28]	; (80116e8 <UART_SetConfig+0x118>)
 80116ca:	fba2 2303 	umull	r2, r3, r2, r3
 80116ce:	095b      	lsrs	r3, r3, #5
 80116d0:	f003 020f 	and.w	r2, r3, #15
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	440a      	add	r2, r1
 80116da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80116dc:	bf00      	nop
 80116de:	3710      	adds	r7, #16
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}
 80116e4:	40013800 	.word	0x40013800
 80116e8:	51eb851f 	.word	0x51eb851f

080116ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b085      	sub	sp, #20
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	4603      	mov	r3, r0
 80116f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80116f6:	2300      	movs	r3, #0
 80116f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80116fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80116fe:	2b84      	cmp	r3, #132	; 0x84
 8011700:	d005      	beq.n	801170e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011702:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	4413      	add	r3, r2
 801170a:	3303      	adds	r3, #3
 801170c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801170e:	68fb      	ldr	r3, [r7, #12]
}
 8011710:	4618      	mov	r0, r3
 8011712:	3714      	adds	r7, #20
 8011714:	46bd      	mov	sp, r7
 8011716:	bc80      	pop	{r7}
 8011718:	4770      	bx	lr

0801171a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801171a:	b580      	push	{r7, lr}
 801171c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801171e:	f000 ff4f 	bl	80125c0 <vTaskStartScheduler>
  
  return osOK;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	bd80      	pop	{r7, pc}

08011728 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011728:	b5f0      	push	{r4, r5, r6, r7, lr}
 801172a:	b089      	sub	sp, #36	; 0x24
 801172c:	af04      	add	r7, sp, #16
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	695b      	ldr	r3, [r3, #20]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d020      	beq.n	801177c <osThreadCreate+0x54>
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	699b      	ldr	r3, [r3, #24]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d01c      	beq.n	801177c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	685c      	ldr	r4, [r3, #4]
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681d      	ldr	r5, [r3, #0]
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	691e      	ldr	r6, [r3, #16]
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011754:	4618      	mov	r0, r3
 8011756:	f7ff ffc9 	bl	80116ec <makeFreeRtosPriority>
 801175a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	695b      	ldr	r3, [r3, #20]
 8011760:	687a      	ldr	r2, [r7, #4]
 8011762:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011764:	9202      	str	r2, [sp, #8]
 8011766:	9301      	str	r3, [sp, #4]
 8011768:	9100      	str	r1, [sp, #0]
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	4632      	mov	r2, r6
 801176e:	4629      	mov	r1, r5
 8011770:	4620      	mov	r0, r4
 8011772:	f000 fd48 	bl	8012206 <xTaskCreateStatic>
 8011776:	4603      	mov	r3, r0
 8011778:	60fb      	str	r3, [r7, #12]
 801177a:	e01c      	b.n	80117b6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	685c      	ldr	r4, [r3, #4]
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011788:	b29e      	uxth	r6, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011790:	4618      	mov	r0, r3
 8011792:	f7ff ffab 	bl	80116ec <makeFreeRtosPriority>
 8011796:	4602      	mov	r2, r0
 8011798:	f107 030c 	add.w	r3, r7, #12
 801179c:	9301      	str	r3, [sp, #4]
 801179e:	9200      	str	r2, [sp, #0]
 80117a0:	683b      	ldr	r3, [r7, #0]
 80117a2:	4632      	mov	r2, r6
 80117a4:	4629      	mov	r1, r5
 80117a6:	4620      	mov	r0, r4
 80117a8:	f000 fd89 	bl	80122be <xTaskCreate>
 80117ac:	4603      	mov	r3, r0
 80117ae:	2b01      	cmp	r3, #1
 80117b0:	d001      	beq.n	80117b6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80117b2:	2300      	movs	r3, #0
 80117b4:	e000      	b.n	80117b8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80117b6:	68fb      	ldr	r3, [r7, #12]
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080117c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b084      	sub	sp, #16
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d001      	beq.n	80117d6 <osDelay+0x16>
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	e000      	b.n	80117d8 <osDelay+0x18>
 80117d6:	2301      	movs	r3, #1
 80117d8:	4618      	mov	r0, r3
 80117da:	f000 febd 	bl	8012558 <vTaskDelay>
  
  return osOK;
 80117de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	3710      	adds	r7, #16
 80117e4:	46bd      	mov	sp, r7
 80117e6:	bd80      	pop	{r7, pc}

080117e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f103 0208 	add.w	r2, r3, #8
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011800:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	f103 0208 	add.w	r2, r3, #8
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	f103 0208 	add.w	r2, r3, #8
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2200      	movs	r2, #0
 801181a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801181c:	bf00      	nop
 801181e:	370c      	adds	r7, #12
 8011820:	46bd      	mov	sp, r7
 8011822:	bc80      	pop	{r7}
 8011824:	4770      	bx	lr

08011826 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011826:	b480      	push	{r7}
 8011828:	b083      	sub	sp, #12
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2200      	movs	r2, #0
 8011832:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011834:	bf00      	nop
 8011836:	370c      	adds	r7, #12
 8011838:	46bd      	mov	sp, r7
 801183a:	bc80      	pop	{r7}
 801183c:	4770      	bx	lr

0801183e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801183e:	b480      	push	{r7}
 8011840:	b085      	sub	sp, #20
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
 8011846:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	685b      	ldr	r3, [r3, #4]
 801184c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801184e:	683b      	ldr	r3, [r7, #0]
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	689a      	ldr	r2, [r3, #8]
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	689b      	ldr	r3, [r3, #8]
 8011860:	683a      	ldr	r2, [r7, #0]
 8011862:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	683a      	ldr	r2, [r7, #0]
 8011868:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	1c5a      	adds	r2, r3, #1
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	601a      	str	r2, [r3, #0]
}
 801187a:	bf00      	nop
 801187c:	3714      	adds	r7, #20
 801187e:	46bd      	mov	sp, r7
 8011880:	bc80      	pop	{r7}
 8011882:	4770      	bx	lr

08011884 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011884:	b480      	push	{r7}
 8011886:	b085      	sub	sp, #20
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011894:	68bb      	ldr	r3, [r7, #8]
 8011896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801189a:	d103      	bne.n	80118a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	691b      	ldr	r3, [r3, #16]
 80118a0:	60fb      	str	r3, [r7, #12]
 80118a2:	e00c      	b.n	80118be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	3308      	adds	r3, #8
 80118a8:	60fb      	str	r3, [r7, #12]
 80118aa:	e002      	b.n	80118b2 <vListInsert+0x2e>
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	685b      	ldr	r3, [r3, #4]
 80118b0:	60fb      	str	r3, [r7, #12]
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	68ba      	ldr	r2, [r7, #8]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d2f6      	bcs.n	80118ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	685a      	ldr	r2, [r3, #4]
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	683a      	ldr	r2, [r7, #0]
 80118cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	68fa      	ldr	r2, [r7, #12]
 80118d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	683a      	ldr	r2, [r7, #0]
 80118d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80118da:	683b      	ldr	r3, [r7, #0]
 80118dc:	687a      	ldr	r2, [r7, #4]
 80118de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	1c5a      	adds	r2, r3, #1
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	601a      	str	r2, [r3, #0]
}
 80118ea:	bf00      	nop
 80118ec:	3714      	adds	r7, #20
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bc80      	pop	{r7}
 80118f2:	4770      	bx	lr

080118f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80118f4:	b480      	push	{r7}
 80118f6:	b085      	sub	sp, #20
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	691b      	ldr	r3, [r3, #16]
 8011900:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	687a      	ldr	r2, [r7, #4]
 8011908:	6892      	ldr	r2, [r2, #8]
 801190a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	689b      	ldr	r3, [r3, #8]
 8011910:	687a      	ldr	r2, [r7, #4]
 8011912:	6852      	ldr	r2, [r2, #4]
 8011914:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	685b      	ldr	r3, [r3, #4]
 801191a:	687a      	ldr	r2, [r7, #4]
 801191c:	429a      	cmp	r2, r3
 801191e:	d103      	bne.n	8011928 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	689a      	ldr	r2, [r3, #8]
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	1e5a      	subs	r2, r3, #1
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	681b      	ldr	r3, [r3, #0]
}
 801193c:	4618      	mov	r0, r3
 801193e:	3714      	adds	r7, #20
 8011940:	46bd      	mov	sp, r7
 8011942:	bc80      	pop	{r7}
 8011944:	4770      	bx	lr
	...

08011948 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b084      	sub	sp, #16
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d10a      	bne.n	8011972 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801195c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011960:	f383 8811 	msr	BASEPRI, r3
 8011964:	f3bf 8f6f 	isb	sy
 8011968:	f3bf 8f4f 	dsb	sy
 801196c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801196e:	bf00      	nop
 8011970:	e7fe      	b.n	8011970 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011972:	f001 fdab 	bl	80134cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801197e:	68f9      	ldr	r1, [r7, #12]
 8011980:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011982:	fb01 f303 	mul.w	r3, r1, r3
 8011986:	441a      	add	r2, r3
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2200      	movs	r2, #0
 8011990:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	681a      	ldr	r2, [r3, #0]
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119a2:	3b01      	subs	r3, #1
 80119a4:	68f9      	ldr	r1, [r7, #12]
 80119a6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80119a8:	fb01 f303 	mul.w	r3, r1, r3
 80119ac:	441a      	add	r2, r3
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	22ff      	movs	r2, #255	; 0xff
 80119b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	22ff      	movs	r2, #255	; 0xff
 80119be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80119c2:	683b      	ldr	r3, [r7, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d114      	bne.n	80119f2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119c8:	68fb      	ldr	r3, [r7, #12]
 80119ca:	691b      	ldr	r3, [r3, #16]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d01a      	beq.n	8011a06 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	3310      	adds	r3, #16
 80119d4:	4618      	mov	r0, r3
 80119d6:	f001 f84b 	bl	8012a70 <xTaskRemoveFromEventList>
 80119da:	4603      	mov	r3, r0
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d012      	beq.n	8011a06 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80119e0:	4b0c      	ldr	r3, [pc, #48]	; (8011a14 <xQueueGenericReset+0xcc>)
 80119e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119e6:	601a      	str	r2, [r3, #0]
 80119e8:	f3bf 8f4f 	dsb	sy
 80119ec:	f3bf 8f6f 	isb	sy
 80119f0:	e009      	b.n	8011a06 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	3310      	adds	r3, #16
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7ff fef6 	bl	80117e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	3324      	adds	r3, #36	; 0x24
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7ff fef1 	bl	80117e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011a06:	f001 fd91 	bl	801352c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011a0a:	2301      	movs	r3, #1
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3710      	adds	r7, #16
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	e000ed04 	.word	0xe000ed04

08011a18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b08a      	sub	sp, #40	; 0x28
 8011a1c:	af02      	add	r7, sp, #8
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	60b9      	str	r1, [r7, #8]
 8011a22:	4613      	mov	r3, r2
 8011a24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d10a      	bne.n	8011a42 <xQueueGenericCreate+0x2a>
	__asm volatile
 8011a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a30:	f383 8811 	msr	BASEPRI, r3
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	f3bf 8f4f 	dsb	sy
 8011a3c:	613b      	str	r3, [r7, #16]
}
 8011a3e:	bf00      	nop
 8011a40:	e7fe      	b.n	8011a40 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d102      	bne.n	8011a4e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	61fb      	str	r3, [r7, #28]
 8011a4c:	e004      	b.n	8011a58 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	68ba      	ldr	r2, [r7, #8]
 8011a52:	fb02 f303 	mul.w	r3, r2, r3
 8011a56:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011a58:	69fb      	ldr	r3, [r7, #28]
 8011a5a:	3348      	adds	r3, #72	; 0x48
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f001 fe35 	bl	80136cc <pvPortMalloc>
 8011a62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011a64:	69bb      	ldr	r3, [r7, #24]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d00f      	beq.n	8011a8a <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8011a6a:	69bb      	ldr	r3, [r7, #24]
 8011a6c:	3348      	adds	r3, #72	; 0x48
 8011a6e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011a70:	69bb      	ldr	r3, [r7, #24]
 8011a72:	2200      	movs	r2, #0
 8011a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a78:	79fa      	ldrb	r2, [r7, #7]
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	9300      	str	r3, [sp, #0]
 8011a7e:	4613      	mov	r3, r2
 8011a80:	697a      	ldr	r2, [r7, #20]
 8011a82:	68b9      	ldr	r1, [r7, #8]
 8011a84:	68f8      	ldr	r0, [r7, #12]
 8011a86:	f000 f805 	bl	8011a94 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011a8a:	69bb      	ldr	r3, [r7, #24]
	}
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	3720      	adds	r7, #32
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}

08011a94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b084      	sub	sp, #16
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	60f8      	str	r0, [r7, #12]
 8011a9c:	60b9      	str	r1, [r7, #8]
 8011a9e:	607a      	str	r2, [r7, #4]
 8011aa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011aa2:	68bb      	ldr	r3, [r7, #8]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d103      	bne.n	8011ab0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011aa8:	69bb      	ldr	r3, [r7, #24]
 8011aaa:	69ba      	ldr	r2, [r7, #24]
 8011aac:	601a      	str	r2, [r3, #0]
 8011aae:	e002      	b.n	8011ab6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011ab0:	69bb      	ldr	r3, [r7, #24]
 8011ab2:	687a      	ldr	r2, [r7, #4]
 8011ab4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	68fa      	ldr	r2, [r7, #12]
 8011aba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011abc:	69bb      	ldr	r3, [r7, #24]
 8011abe:	68ba      	ldr	r2, [r7, #8]
 8011ac0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011ac2:	2101      	movs	r1, #1
 8011ac4:	69b8      	ldr	r0, [r7, #24]
 8011ac6:	f7ff ff3f 	bl	8011948 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011aca:	bf00      	nop
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
	...

08011ad4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011ad4:	b580      	push	{r7, lr}
 8011ad6:	b08e      	sub	sp, #56	; 0x38
 8011ad8:	af00      	add	r7, sp, #0
 8011ada:	60f8      	str	r0, [r7, #12]
 8011adc:	60b9      	str	r1, [r7, #8]
 8011ade:	607a      	str	r2, [r7, #4]
 8011ae0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d10a      	bne.n	8011b06 <xQueueGenericSend+0x32>
	__asm volatile
 8011af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011af4:	f383 8811 	msr	BASEPRI, r3
 8011af8:	f3bf 8f6f 	isb	sy
 8011afc:	f3bf 8f4f 	dsb	sy
 8011b00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011b02:	bf00      	nop
 8011b04:	e7fe      	b.n	8011b04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d103      	bne.n	8011b14 <xQueueGenericSend+0x40>
 8011b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d101      	bne.n	8011b18 <xQueueGenericSend+0x44>
 8011b14:	2301      	movs	r3, #1
 8011b16:	e000      	b.n	8011b1a <xQueueGenericSend+0x46>
 8011b18:	2300      	movs	r3, #0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d10a      	bne.n	8011b34 <xQueueGenericSend+0x60>
	__asm volatile
 8011b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b22:	f383 8811 	msr	BASEPRI, r3
 8011b26:	f3bf 8f6f 	isb	sy
 8011b2a:	f3bf 8f4f 	dsb	sy
 8011b2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011b30:	bf00      	nop
 8011b32:	e7fe      	b.n	8011b32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011b34:	683b      	ldr	r3, [r7, #0]
 8011b36:	2b02      	cmp	r3, #2
 8011b38:	d103      	bne.n	8011b42 <xQueueGenericSend+0x6e>
 8011b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b3e:	2b01      	cmp	r3, #1
 8011b40:	d101      	bne.n	8011b46 <xQueueGenericSend+0x72>
 8011b42:	2301      	movs	r3, #1
 8011b44:	e000      	b.n	8011b48 <xQueueGenericSend+0x74>
 8011b46:	2300      	movs	r3, #0
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d10a      	bne.n	8011b62 <xQueueGenericSend+0x8e>
	__asm volatile
 8011b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b50:	f383 8811 	msr	BASEPRI, r3
 8011b54:	f3bf 8f6f 	isb	sy
 8011b58:	f3bf 8f4f 	dsb	sy
 8011b5c:	623b      	str	r3, [r7, #32]
}
 8011b5e:	bf00      	nop
 8011b60:	e7fe      	b.n	8011b60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b62:	f001 f981 	bl	8012e68 <xTaskGetSchedulerState>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d102      	bne.n	8011b72 <xQueueGenericSend+0x9e>
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d101      	bne.n	8011b76 <xQueueGenericSend+0xa2>
 8011b72:	2301      	movs	r3, #1
 8011b74:	e000      	b.n	8011b78 <xQueueGenericSend+0xa4>
 8011b76:	2300      	movs	r3, #0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d10a      	bne.n	8011b92 <xQueueGenericSend+0xbe>
	__asm volatile
 8011b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b80:	f383 8811 	msr	BASEPRI, r3
 8011b84:	f3bf 8f6f 	isb	sy
 8011b88:	f3bf 8f4f 	dsb	sy
 8011b8c:	61fb      	str	r3, [r7, #28]
}
 8011b8e:	bf00      	nop
 8011b90:	e7fe      	b.n	8011b90 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011b92:	f001 fc9b 	bl	80134cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d302      	bcc.n	8011ba8 <xQueueGenericSend+0xd4>
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	2b02      	cmp	r3, #2
 8011ba6:	d129      	bne.n	8011bfc <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ba8:	683a      	ldr	r2, [r7, #0]
 8011baa:	68b9      	ldr	r1, [r7, #8]
 8011bac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bae:	f000 fa40 	bl	8012032 <prvCopyDataToQueue>
 8011bb2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d010      	beq.n	8011bde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bbe:	3324      	adds	r3, #36	; 0x24
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f000 ff55 	bl	8012a70 <xTaskRemoveFromEventList>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d013      	beq.n	8011bf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011bcc:	4b3f      	ldr	r3, [pc, #252]	; (8011ccc <xQueueGenericSend+0x1f8>)
 8011bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bd2:	601a      	str	r2, [r3, #0]
 8011bd4:	f3bf 8f4f 	dsb	sy
 8011bd8:	f3bf 8f6f 	isb	sy
 8011bdc:	e00a      	b.n	8011bf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d007      	beq.n	8011bf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011be4:	4b39      	ldr	r3, [pc, #228]	; (8011ccc <xQueueGenericSend+0x1f8>)
 8011be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bea:	601a      	str	r2, [r3, #0]
 8011bec:	f3bf 8f4f 	dsb	sy
 8011bf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011bf4:	f001 fc9a 	bl	801352c <vPortExitCritical>
				return pdPASS;
 8011bf8:	2301      	movs	r3, #1
 8011bfa:	e063      	b.n	8011cc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d103      	bne.n	8011c0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011c02:	f001 fc93 	bl	801352c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011c06:	2300      	movs	r3, #0
 8011c08:	e05c      	b.n	8011cc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d106      	bne.n	8011c1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c10:	f107 0314 	add.w	r3, r7, #20
 8011c14:	4618      	mov	r0, r3
 8011c16:	f000 ff8d 	bl	8012b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c1e:	f001 fc85 	bl	801352c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c22:	f000 fd37 	bl	8012694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c26:	f001 fc51 	bl	80134cc <vPortEnterCritical>
 8011c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011c30:	b25b      	sxtb	r3, r3
 8011c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c36:	d103      	bne.n	8011c40 <xQueueGenericSend+0x16c>
 8011c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c46:	b25b      	sxtb	r3, r3
 8011c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c4c:	d103      	bne.n	8011c56 <xQueueGenericSend+0x182>
 8011c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c50:	2200      	movs	r2, #0
 8011c52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011c56:	f001 fc69 	bl	801352c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c5a:	1d3a      	adds	r2, r7, #4
 8011c5c:	f107 0314 	add.w	r3, r7, #20
 8011c60:	4611      	mov	r1, r2
 8011c62:	4618      	mov	r0, r3
 8011c64:	f000 ff7c 	bl	8012b60 <xTaskCheckForTimeOut>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d124      	bne.n	8011cb8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c70:	f000 fab1 	bl	80121d6 <prvIsQueueFull>
 8011c74:	4603      	mov	r3, r0
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d018      	beq.n	8011cac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c7c:	3310      	adds	r3, #16
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	4611      	mov	r1, r2
 8011c82:	4618      	mov	r0, r3
 8011c84:	f000 fed0 	bl	8012a28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c8a:	f000 fa3c 	bl	8012106 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011c8e:	f000 fd0f 	bl	80126b0 <xTaskResumeAll>
 8011c92:	4603      	mov	r3, r0
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	f47f af7c 	bne.w	8011b92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011c9a:	4b0c      	ldr	r3, [pc, #48]	; (8011ccc <xQueueGenericSend+0x1f8>)
 8011c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ca0:	601a      	str	r2, [r3, #0]
 8011ca2:	f3bf 8f4f 	dsb	sy
 8011ca6:	f3bf 8f6f 	isb	sy
 8011caa:	e772      	b.n	8011b92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cae:	f000 fa2a 	bl	8012106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011cb2:	f000 fcfd 	bl	80126b0 <xTaskResumeAll>
 8011cb6:	e76c      	b.n	8011b92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cba:	f000 fa24 	bl	8012106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011cbe:	f000 fcf7 	bl	80126b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011cc2:	2300      	movs	r3, #0
		}
	}
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	3738      	adds	r7, #56	; 0x38
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	bd80      	pop	{r7, pc}
 8011ccc:	e000ed04 	.word	0xe000ed04

08011cd0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011cd0:	b580      	push	{r7, lr}
 8011cd2:	b08e      	sub	sp, #56	; 0x38
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d10a      	bne.n	8011cfa <xQueueGiveFromISR+0x2a>
	__asm volatile
 8011ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ce8:	f383 8811 	msr	BASEPRI, r3
 8011cec:	f3bf 8f6f 	isb	sy
 8011cf0:	f3bf 8f4f 	dsb	sy
 8011cf4:	623b      	str	r3, [r7, #32]
}
 8011cf6:	bf00      	nop
 8011cf8:	e7fe      	b.n	8011cf8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d00a      	beq.n	8011d18 <xQueueGiveFromISR+0x48>
	__asm volatile
 8011d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d06:	f383 8811 	msr	BASEPRI, r3
 8011d0a:	f3bf 8f6f 	isb	sy
 8011d0e:	f3bf 8f4f 	dsb	sy
 8011d12:	61fb      	str	r3, [r7, #28]
}
 8011d14:	bf00      	nop
 8011d16:	e7fe      	b.n	8011d16 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8011d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d103      	bne.n	8011d28 <xQueueGiveFromISR+0x58>
 8011d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d22:	685b      	ldr	r3, [r3, #4]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d101      	bne.n	8011d2c <xQueueGiveFromISR+0x5c>
 8011d28:	2301      	movs	r3, #1
 8011d2a:	e000      	b.n	8011d2e <xQueueGiveFromISR+0x5e>
 8011d2c:	2300      	movs	r3, #0
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d10a      	bne.n	8011d48 <xQueueGiveFromISR+0x78>
	__asm volatile
 8011d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d36:	f383 8811 	msr	BASEPRI, r3
 8011d3a:	f3bf 8f6f 	isb	sy
 8011d3e:	f3bf 8f4f 	dsb	sy
 8011d42:	61bb      	str	r3, [r7, #24]
}
 8011d44:	bf00      	nop
 8011d46:	e7fe      	b.n	8011d46 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d48:	f001 fc82 	bl	8013650 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011d4c:	f3ef 8211 	mrs	r2, BASEPRI
 8011d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d54:	f383 8811 	msr	BASEPRI, r3
 8011d58:	f3bf 8f6f 	isb	sy
 8011d5c:	f3bf 8f4f 	dsb	sy
 8011d60:	617a      	str	r2, [r7, #20]
 8011d62:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011d64:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d66:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d6c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d22b      	bcs.n	8011dd0 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d84:	1c5a      	adds	r2, r3, #1
 8011d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d88:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011d8a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d92:	d112      	bne.n	8011dba <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d016      	beq.n	8011dca <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d9e:	3324      	adds	r3, #36	; 0x24
 8011da0:	4618      	mov	r0, r3
 8011da2:	f000 fe65 	bl	8012a70 <xTaskRemoveFromEventList>
 8011da6:	4603      	mov	r3, r0
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d00e      	beq.n	8011dca <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011dac:	683b      	ldr	r3, [r7, #0]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d00b      	beq.n	8011dca <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011db2:	683b      	ldr	r3, [r7, #0]
 8011db4:	2201      	movs	r2, #1
 8011db6:	601a      	str	r2, [r3, #0]
 8011db8:	e007      	b.n	8011dca <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dbe:	3301      	adds	r3, #1
 8011dc0:	b2db      	uxtb	r3, r3
 8011dc2:	b25a      	sxtb	r2, r3
 8011dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8011dce:	e001      	b.n	8011dd4 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8011dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd6:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011dde:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011de2:	4618      	mov	r0, r3
 8011de4:	3738      	adds	r7, #56	; 0x38
 8011de6:	46bd      	mov	sp, r7
 8011de8:	bd80      	pop	{r7, pc}
	...

08011dec <xQueueSemaphoreTake>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b08e      	sub	sp, #56	; 0x38
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011df6:	2300      	movs	r3, #0
 8011df8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011dfe:	2300      	movs	r3, #0
 8011e00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d10a      	bne.n	8011e1e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e0c:	f383 8811 	msr	BASEPRI, r3
 8011e10:	f3bf 8f6f 	isb	sy
 8011e14:	f3bf 8f4f 	dsb	sy
 8011e18:	623b      	str	r3, [r7, #32]
}
 8011e1a:	bf00      	nop
 8011e1c:	e7fe      	b.n	8011e1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00a      	beq.n	8011e3c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e2a:	f383 8811 	msr	BASEPRI, r3
 8011e2e:	f3bf 8f6f 	isb	sy
 8011e32:	f3bf 8f4f 	dsb	sy
 8011e36:	61fb      	str	r3, [r7, #28]
}
 8011e38:	bf00      	nop
 8011e3a:	e7fe      	b.n	8011e3a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e3c:	f001 f814 	bl	8012e68 <xTaskGetSchedulerState>
 8011e40:	4603      	mov	r3, r0
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d102      	bne.n	8011e4c <xQueueSemaphoreTake+0x60>
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d101      	bne.n	8011e50 <xQueueSemaphoreTake+0x64>
 8011e4c:	2301      	movs	r3, #1
 8011e4e:	e000      	b.n	8011e52 <xQueueSemaphoreTake+0x66>
 8011e50:	2300      	movs	r3, #0
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d10a      	bne.n	8011e6c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e5a:	f383 8811 	msr	BASEPRI, r3
 8011e5e:	f3bf 8f6f 	isb	sy
 8011e62:	f3bf 8f4f 	dsb	sy
 8011e66:	61bb      	str	r3, [r7, #24]
}
 8011e68:	bf00      	nop
 8011e6a:	e7fe      	b.n	8011e6a <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e6c:	f001 fb2e 	bl	80134cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e74:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d024      	beq.n	8011ec6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e7e:	1e5a      	subs	r2, r3, #1
 8011e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e82:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d104      	bne.n	8011e96 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011e8c:	f001 f9b6 	bl	80131fc <pvTaskIncrementMutexHeldCount>
 8011e90:	4602      	mov	r2, r0
 8011e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e94:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e98:	691b      	ldr	r3, [r3, #16]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00f      	beq.n	8011ebe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea0:	3310      	adds	r3, #16
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f000 fde4 	bl	8012a70 <xTaskRemoveFromEventList>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d007      	beq.n	8011ebe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011eae:	4b54      	ldr	r3, [pc, #336]	; (8012000 <xQueueSemaphoreTake+0x214>)
 8011eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb4:	601a      	str	r2, [r3, #0]
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011ebe:	f001 fb35 	bl	801352c <vPortExitCritical>
				return pdPASS;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	e097      	b.n	8011ff6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d111      	bne.n	8011ef0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d00a      	beq.n	8011ee8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ed6:	f383 8811 	msr	BASEPRI, r3
 8011eda:	f3bf 8f6f 	isb	sy
 8011ede:	f3bf 8f4f 	dsb	sy
 8011ee2:	617b      	str	r3, [r7, #20]
}
 8011ee4:	bf00      	nop
 8011ee6:	e7fe      	b.n	8011ee6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011ee8:	f001 fb20 	bl	801352c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011eec:	2300      	movs	r3, #0
 8011eee:	e082      	b.n	8011ff6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d106      	bne.n	8011f04 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ef6:	f107 030c 	add.w	r3, r7, #12
 8011efa:	4618      	mov	r0, r3
 8011efc:	f000 fe1a 	bl	8012b34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f00:	2301      	movs	r3, #1
 8011f02:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f04:	f001 fb12 	bl	801352c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f08:	f000 fbc4 	bl	8012694 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f0c:	f001 fade 	bl	80134cc <vPortEnterCritical>
 8011f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f16:	b25b      	sxtb	r3, r3
 8011f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f1c:	d103      	bne.n	8011f26 <xQueueSemaphoreTake+0x13a>
 8011f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f20:	2200      	movs	r2, #0
 8011f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f2c:	b25b      	sxtb	r3, r3
 8011f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f32:	d103      	bne.n	8011f3c <xQueueSemaphoreTake+0x150>
 8011f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f36:	2200      	movs	r2, #0
 8011f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f3c:	f001 faf6 	bl	801352c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f40:	463a      	mov	r2, r7
 8011f42:	f107 030c 	add.w	r3, r7, #12
 8011f46:	4611      	mov	r1, r2
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f000 fe09 	bl	8012b60 <xTaskCheckForTimeOut>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d132      	bne.n	8011fba <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f56:	f000 f928 	bl	80121aa <prvIsQueueEmpty>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d026      	beq.n	8011fae <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d109      	bne.n	8011f7c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011f68:	f001 fab0 	bl	80134cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8011f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	f000 ff97 	bl	8012ea4 <xTaskPriorityInherit>
 8011f76:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011f78:	f001 fad8 	bl	801352c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f7e:	3324      	adds	r3, #36	; 0x24
 8011f80:	683a      	ldr	r2, [r7, #0]
 8011f82:	4611      	mov	r1, r2
 8011f84:	4618      	mov	r0, r3
 8011f86:	f000 fd4f 	bl	8012a28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f8c:	f000 f8bb 	bl	8012106 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011f90:	f000 fb8e 	bl	80126b0 <xTaskResumeAll>
 8011f94:	4603      	mov	r3, r0
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f47f af68 	bne.w	8011e6c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8011f9c:	4b18      	ldr	r3, [pc, #96]	; (8012000 <xQueueSemaphoreTake+0x214>)
 8011f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fa2:	601a      	str	r2, [r3, #0]
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	f3bf 8f6f 	isb	sy
 8011fac:	e75e      	b.n	8011e6c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fb0:	f000 f8a9 	bl	8012106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011fb4:	f000 fb7c 	bl	80126b0 <xTaskResumeAll>
 8011fb8:	e758      	b.n	8011e6c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011fba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fbc:	f000 f8a3 	bl	8012106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011fc0:	f000 fb76 	bl	80126b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fc6:	f000 f8f0 	bl	80121aa <prvIsQueueEmpty>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	f43f af4d 	beq.w	8011e6c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d00d      	beq.n	8011ff4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8011fd8:	f001 fa78 	bl	80134cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011fdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fde:	f000 f811 	bl	8012004 <prvGetDisinheritPriorityAfterTimeout>
 8011fe2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8011fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011fea:	4618      	mov	r0, r3
 8011fec:	f001 f866 	bl	80130bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011ff0:	f001 fa9c 	bl	801352c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011ff4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	3738      	adds	r7, #56	; 0x38
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	e000ed04 	.word	0xe000ed04

08012004 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012004:	b480      	push	{r7}
 8012006:	b085      	sub	sp, #20
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012010:	2b00      	cmp	r3, #0
 8012012:	d006      	beq.n	8012022 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	f1c3 0307 	rsb	r3, r3, #7
 801201e:	60fb      	str	r3, [r7, #12]
 8012020:	e001      	b.n	8012026 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012022:	2300      	movs	r3, #0
 8012024:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012026:	68fb      	ldr	r3, [r7, #12]
	}
 8012028:	4618      	mov	r0, r3
 801202a:	3714      	adds	r7, #20
 801202c:	46bd      	mov	sp, r7
 801202e:	bc80      	pop	{r7}
 8012030:	4770      	bx	lr

08012032 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012032:	b580      	push	{r7, lr}
 8012034:	b086      	sub	sp, #24
 8012036:	af00      	add	r7, sp, #0
 8012038:	60f8      	str	r0, [r7, #12]
 801203a:	60b9      	str	r1, [r7, #8]
 801203c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801203e:	2300      	movs	r3, #0
 8012040:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012046:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801204c:	2b00      	cmp	r3, #0
 801204e:	d10d      	bne.n	801206c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012050:	68fb      	ldr	r3, [r7, #12]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d14d      	bne.n	80120f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	4618      	mov	r0, r3
 801205e:	f000 ffa7 	bl	8012fb0 <xTaskPriorityDisinherit>
 8012062:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2200      	movs	r2, #0
 8012068:	605a      	str	r2, [r3, #4]
 801206a:	e043      	b.n	80120f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d119      	bne.n	80120a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	6898      	ldr	r0, [r3, #8]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801207a:	461a      	mov	r2, r3
 801207c:	68b9      	ldr	r1, [r7, #8]
 801207e:	f001 fd35 	bl	8013aec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	689a      	ldr	r2, [r3, #8]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801208a:	441a      	add	r2, r3
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	689a      	ldr	r2, [r3, #8]
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	685b      	ldr	r3, [r3, #4]
 8012098:	429a      	cmp	r2, r3
 801209a:	d32b      	bcc.n	80120f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	681a      	ldr	r2, [r3, #0]
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	609a      	str	r2, [r3, #8]
 80120a4:	e026      	b.n	80120f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	68d8      	ldr	r0, [r3, #12]
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ae:	461a      	mov	r2, r3
 80120b0:	68b9      	ldr	r1, [r7, #8]
 80120b2:	f001 fd1b 	bl	8013aec <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	68da      	ldr	r2, [r3, #12]
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120be:	425b      	negs	r3, r3
 80120c0:	441a      	add	r2, r3
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	68da      	ldr	r2, [r3, #12]
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	429a      	cmp	r2, r3
 80120d0:	d207      	bcs.n	80120e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	685a      	ldr	r2, [r3, #4]
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120da:	425b      	negs	r3, r3
 80120dc:	441a      	add	r2, r3
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2b02      	cmp	r3, #2
 80120e6:	d105      	bne.n	80120f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d002      	beq.n	80120f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	3b01      	subs	r3, #1
 80120f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120f4:	693b      	ldr	r3, [r7, #16]
 80120f6:	1c5a      	adds	r2, r3, #1
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80120fc:	697b      	ldr	r3, [r7, #20]
}
 80120fe:	4618      	mov	r0, r3
 8012100:	3718      	adds	r7, #24
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}

08012106 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012106:	b580      	push	{r7, lr}
 8012108:	b084      	sub	sp, #16
 801210a:	af00      	add	r7, sp, #0
 801210c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801210e:	f001 f9dd 	bl	80134cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012118:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801211a:	e011      	b.n	8012140 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012120:	2b00      	cmp	r3, #0
 8012122:	d012      	beq.n	801214a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	3324      	adds	r3, #36	; 0x24
 8012128:	4618      	mov	r0, r3
 801212a:	f000 fca1 	bl	8012a70 <xTaskRemoveFromEventList>
 801212e:	4603      	mov	r3, r0
 8012130:	2b00      	cmp	r3, #0
 8012132:	d001      	beq.n	8012138 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012134:	f000 fd76 	bl	8012c24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012138:	7bfb      	ldrb	r3, [r7, #15]
 801213a:	3b01      	subs	r3, #1
 801213c:	b2db      	uxtb	r3, r3
 801213e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012144:	2b00      	cmp	r3, #0
 8012146:	dce9      	bgt.n	801211c <prvUnlockQueue+0x16>
 8012148:	e000      	b.n	801214c <prvUnlockQueue+0x46>
					break;
 801214a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	22ff      	movs	r2, #255	; 0xff
 8012150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012154:	f001 f9ea 	bl	801352c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012158:	f001 f9b8 	bl	80134cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012162:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012164:	e011      	b.n	801218a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	691b      	ldr	r3, [r3, #16]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d012      	beq.n	8012194 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	3310      	adds	r3, #16
 8012172:	4618      	mov	r0, r3
 8012174:	f000 fc7c 	bl	8012a70 <xTaskRemoveFromEventList>
 8012178:	4603      	mov	r3, r0
 801217a:	2b00      	cmp	r3, #0
 801217c:	d001      	beq.n	8012182 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801217e:	f000 fd51 	bl	8012c24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012182:	7bbb      	ldrb	r3, [r7, #14]
 8012184:	3b01      	subs	r3, #1
 8012186:	b2db      	uxtb	r3, r3
 8012188:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801218a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801218e:	2b00      	cmp	r3, #0
 8012190:	dce9      	bgt.n	8012166 <prvUnlockQueue+0x60>
 8012192:	e000      	b.n	8012196 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012194:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	22ff      	movs	r2, #255	; 0xff
 801219a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801219e:	f001 f9c5 	bl	801352c <vPortExitCritical>
}
 80121a2:	bf00      	nop
 80121a4:	3710      	adds	r7, #16
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}

080121aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80121aa:	b580      	push	{r7, lr}
 80121ac:	b084      	sub	sp, #16
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80121b2:	f001 f98b 	bl	80134cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d102      	bne.n	80121c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80121be:	2301      	movs	r3, #1
 80121c0:	60fb      	str	r3, [r7, #12]
 80121c2:	e001      	b.n	80121c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80121c4:	2300      	movs	r3, #0
 80121c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80121c8:	f001 f9b0 	bl	801352c <vPortExitCritical>

	return xReturn;
 80121cc:	68fb      	ldr	r3, [r7, #12]
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}

080121d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80121d6:	b580      	push	{r7, lr}
 80121d8:	b084      	sub	sp, #16
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80121de:	f001 f975 	bl	80134cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d102      	bne.n	80121f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80121ee:	2301      	movs	r3, #1
 80121f0:	60fb      	str	r3, [r7, #12]
 80121f2:	e001      	b.n	80121f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80121f4:	2300      	movs	r3, #0
 80121f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80121f8:	f001 f998 	bl	801352c <vPortExitCritical>

	return xReturn;
 80121fc:	68fb      	ldr	r3, [r7, #12]
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3710      	adds	r7, #16
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}

08012206 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012206:	b580      	push	{r7, lr}
 8012208:	b08e      	sub	sp, #56	; 0x38
 801220a:	af04      	add	r7, sp, #16
 801220c:	60f8      	str	r0, [r7, #12]
 801220e:	60b9      	str	r1, [r7, #8]
 8012210:	607a      	str	r2, [r7, #4]
 8012212:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012216:	2b00      	cmp	r3, #0
 8012218:	d10a      	bne.n	8012230 <xTaskCreateStatic+0x2a>
	__asm volatile
 801221a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801221e:	f383 8811 	msr	BASEPRI, r3
 8012222:	f3bf 8f6f 	isb	sy
 8012226:	f3bf 8f4f 	dsb	sy
 801222a:	623b      	str	r3, [r7, #32]
}
 801222c:	bf00      	nop
 801222e:	e7fe      	b.n	801222e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012232:	2b00      	cmp	r3, #0
 8012234:	d10a      	bne.n	801224c <xTaskCreateStatic+0x46>
	__asm volatile
 8012236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801223a:	f383 8811 	msr	BASEPRI, r3
 801223e:	f3bf 8f6f 	isb	sy
 8012242:	f3bf 8f4f 	dsb	sy
 8012246:	61fb      	str	r3, [r7, #28]
}
 8012248:	bf00      	nop
 801224a:	e7fe      	b.n	801224a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801224c:	23b4      	movs	r3, #180	; 0xb4
 801224e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	2bb4      	cmp	r3, #180	; 0xb4
 8012254:	d00a      	beq.n	801226c <xTaskCreateStatic+0x66>
	__asm volatile
 8012256:	f04f 0350 	mov.w	r3, #80	; 0x50
 801225a:	f383 8811 	msr	BASEPRI, r3
 801225e:	f3bf 8f6f 	isb	sy
 8012262:	f3bf 8f4f 	dsb	sy
 8012266:	61bb      	str	r3, [r7, #24]
}
 8012268:	bf00      	nop
 801226a:	e7fe      	b.n	801226a <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801226c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226e:	2b00      	cmp	r3, #0
 8012270:	d01e      	beq.n	80122b0 <xTaskCreateStatic+0xaa>
 8012272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012274:	2b00      	cmp	r3, #0
 8012276:	d01b      	beq.n	80122b0 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801227a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801227e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012280:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012284:	2202      	movs	r2, #2
 8012286:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801228a:	2300      	movs	r3, #0
 801228c:	9303      	str	r3, [sp, #12]
 801228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012290:	9302      	str	r3, [sp, #8]
 8012292:	f107 0314 	add.w	r3, r7, #20
 8012296:	9301      	str	r3, [sp, #4]
 8012298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229a:	9300      	str	r3, [sp, #0]
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	687a      	ldr	r2, [r7, #4]
 80122a0:	68b9      	ldr	r1, [r7, #8]
 80122a2:	68f8      	ldr	r0, [r7, #12]
 80122a4:	f000 f850 	bl	8012348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80122a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122aa:	f000 f8eb 	bl	8012484 <prvAddNewTaskToReadyList>
 80122ae:	e001      	b.n	80122b4 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80122b0:	2300      	movs	r3, #0
 80122b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80122b4:	697b      	ldr	r3, [r7, #20]
	}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3728      	adds	r7, #40	; 0x28
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b08c      	sub	sp, #48	; 0x30
 80122c2:	af04      	add	r7, sp, #16
 80122c4:	60f8      	str	r0, [r7, #12]
 80122c6:	60b9      	str	r1, [r7, #8]
 80122c8:	603b      	str	r3, [r7, #0]
 80122ca:	4613      	mov	r3, r2
 80122cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122ce:	88fb      	ldrh	r3, [r7, #6]
 80122d0:	009b      	lsls	r3, r3, #2
 80122d2:	4618      	mov	r0, r3
 80122d4:	f001 f9fa 	bl	80136cc <pvPortMalloc>
 80122d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80122da:	697b      	ldr	r3, [r7, #20]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00e      	beq.n	80122fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80122e0:	20b4      	movs	r0, #180	; 0xb4
 80122e2:	f001 f9f3 	bl	80136cc <pvPortMalloc>
 80122e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80122e8:	69fb      	ldr	r3, [r7, #28]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d003      	beq.n	80122f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	697a      	ldr	r2, [r7, #20]
 80122f2:	631a      	str	r2, [r3, #48]	; 0x30
 80122f4:	e005      	b.n	8012302 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80122f6:	6978      	ldr	r0, [r7, #20]
 80122f8:	f001 faac 	bl	8013854 <vPortFree>
 80122fc:	e001      	b.n	8012302 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80122fe:	2300      	movs	r3, #0
 8012300:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012302:	69fb      	ldr	r3, [r7, #28]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d017      	beq.n	8012338 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012308:	69fb      	ldr	r3, [r7, #28]
 801230a:	2200      	movs	r2, #0
 801230c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012310:	88fa      	ldrh	r2, [r7, #6]
 8012312:	2300      	movs	r3, #0
 8012314:	9303      	str	r3, [sp, #12]
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	9302      	str	r3, [sp, #8]
 801231a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231c:	9301      	str	r3, [sp, #4]
 801231e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012320:	9300      	str	r3, [sp, #0]
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	68b9      	ldr	r1, [r7, #8]
 8012326:	68f8      	ldr	r0, [r7, #12]
 8012328:	f000 f80e 	bl	8012348 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801232c:	69f8      	ldr	r0, [r7, #28]
 801232e:	f000 f8a9 	bl	8012484 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012332:	2301      	movs	r3, #1
 8012334:	61bb      	str	r3, [r7, #24]
 8012336:	e002      	b.n	801233e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012338:	f04f 33ff 	mov.w	r3, #4294967295
 801233c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801233e:	69bb      	ldr	r3, [r7, #24]
	}
 8012340:	4618      	mov	r0, r3
 8012342:	3720      	adds	r7, #32
 8012344:	46bd      	mov	sp, r7
 8012346:	bd80      	pop	{r7, pc}

08012348 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012348:	b580      	push	{r7, lr}
 801234a:	b088      	sub	sp, #32
 801234c:	af00      	add	r7, sp, #0
 801234e:	60f8      	str	r0, [r7, #12]
 8012350:	60b9      	str	r1, [r7, #8]
 8012352:	607a      	str	r2, [r7, #4]
 8012354:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012358:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	009b      	lsls	r3, r3, #2
 801235e:	461a      	mov	r2, r3
 8012360:	21a5      	movs	r1, #165	; 0xa5
 8012362:	f001 fbd1 	bl	8013b08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8012366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012370:	3b01      	subs	r3, #1
 8012372:	009b      	lsls	r3, r3, #2
 8012374:	4413      	add	r3, r2
 8012376:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8012378:	69bb      	ldr	r3, [r7, #24]
 801237a:	f023 0307 	bic.w	r3, r3, #7
 801237e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012380:	69bb      	ldr	r3, [r7, #24]
 8012382:	f003 0307 	and.w	r3, r3, #7
 8012386:	2b00      	cmp	r3, #0
 8012388:	d00a      	beq.n	80123a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 801238a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801238e:	f383 8811 	msr	BASEPRI, r3
 8012392:	f3bf 8f6f 	isb	sy
 8012396:	f3bf 8f4f 	dsb	sy
 801239a:	617b      	str	r3, [r7, #20]
}
 801239c:	bf00      	nop
 801239e:	e7fe      	b.n	801239e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80123a0:	2300      	movs	r3, #0
 80123a2:	61fb      	str	r3, [r7, #28]
 80123a4:	e012      	b.n	80123cc <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80123a6:	68ba      	ldr	r2, [r7, #8]
 80123a8:	69fb      	ldr	r3, [r7, #28]
 80123aa:	4413      	add	r3, r2
 80123ac:	7819      	ldrb	r1, [r3, #0]
 80123ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123b0:	69fb      	ldr	r3, [r7, #28]
 80123b2:	4413      	add	r3, r2
 80123b4:	3334      	adds	r3, #52	; 0x34
 80123b6:	460a      	mov	r2, r1
 80123b8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80123ba:	68ba      	ldr	r2, [r7, #8]
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	4413      	add	r3, r2
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d006      	beq.n	80123d4 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80123c6:	69fb      	ldr	r3, [r7, #28]
 80123c8:	3301      	adds	r3, #1
 80123ca:	61fb      	str	r3, [r7, #28]
 80123cc:	69fb      	ldr	r3, [r7, #28]
 80123ce:	2b0f      	cmp	r3, #15
 80123d0:	d9e9      	bls.n	80123a6 <prvInitialiseNewTask+0x5e>
 80123d2:	e000      	b.n	80123d6 <prvInitialiseNewTask+0x8e>
		{
			break;
 80123d4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80123d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d8:	2200      	movs	r2, #0
 80123da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80123de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e0:	2b06      	cmp	r3, #6
 80123e2:	d901      	bls.n	80123e8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80123e4:	2306      	movs	r3, #6
 80123e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80123e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80123f2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80123f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f6:	2200      	movs	r2, #0
 80123f8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80123fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123fc:	3304      	adds	r3, #4
 80123fe:	4618      	mov	r0, r3
 8012400:	f7ff fa11 	bl	8011826 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012406:	3318      	adds	r3, #24
 8012408:	4618      	mov	r0, r3
 801240a:	f7ff fa0c 	bl	8011826 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801240e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012412:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012416:	f1c3 0207 	rsb	r2, r3, #7
 801241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012422:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012426:	2200      	movs	r2, #0
 8012428:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801242c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242e:	2200      	movs	r2, #0
 8012430:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012436:	334c      	adds	r3, #76	; 0x4c
 8012438:	2260      	movs	r2, #96	; 0x60
 801243a:	2100      	movs	r1, #0
 801243c:	4618      	mov	r0, r3
 801243e:	f001 fb63 	bl	8013b08 <memset>
 8012442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012444:	4a0c      	ldr	r2, [pc, #48]	; (8012478 <prvInitialiseNewTask+0x130>)
 8012446:	651a      	str	r2, [r3, #80]	; 0x50
 8012448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801244a:	4a0c      	ldr	r2, [pc, #48]	; (801247c <prvInitialiseNewTask+0x134>)
 801244c:	655a      	str	r2, [r3, #84]	; 0x54
 801244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012450:	4a0b      	ldr	r2, [pc, #44]	; (8012480 <prvInitialiseNewTask+0x138>)
 8012452:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012454:	683a      	ldr	r2, [r7, #0]
 8012456:	68f9      	ldr	r1, [r7, #12]
 8012458:	69b8      	ldr	r0, [r7, #24]
 801245a:	f000 ff49 	bl	80132f0 <pxPortInitialiseStack>
 801245e:	4602      	mov	r2, r0
 8012460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012462:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012466:	2b00      	cmp	r3, #0
 8012468:	d002      	beq.n	8012470 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801246c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801246e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012470:	bf00      	nop
 8012472:	3720      	adds	r7, #32
 8012474:	46bd      	mov	sp, r7
 8012476:	bd80      	pop	{r7, pc}
 8012478:	080148fc 	.word	0x080148fc
 801247c:	0801491c 	.word	0x0801491c
 8012480:	080148dc 	.word	0x080148dc

08012484 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801248c:	f001 f81e 	bl	80134cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012490:	4b2a      	ldr	r3, [pc, #168]	; (801253c <prvAddNewTaskToReadyList+0xb8>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	3301      	adds	r3, #1
 8012496:	4a29      	ldr	r2, [pc, #164]	; (801253c <prvAddNewTaskToReadyList+0xb8>)
 8012498:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801249a:	4b29      	ldr	r3, [pc, #164]	; (8012540 <prvAddNewTaskToReadyList+0xbc>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d109      	bne.n	80124b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80124a2:	4a27      	ldr	r2, [pc, #156]	; (8012540 <prvAddNewTaskToReadyList+0xbc>)
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80124a8:	4b24      	ldr	r3, [pc, #144]	; (801253c <prvAddNewTaskToReadyList+0xb8>)
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	2b01      	cmp	r3, #1
 80124ae:	d110      	bne.n	80124d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80124b0:	f000 fbdc 	bl	8012c6c <prvInitialiseTaskLists>
 80124b4:	e00d      	b.n	80124d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80124b6:	4b23      	ldr	r3, [pc, #140]	; (8012544 <prvAddNewTaskToReadyList+0xc0>)
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d109      	bne.n	80124d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80124be:	4b20      	ldr	r3, [pc, #128]	; (8012540 <prvAddNewTaskToReadyList+0xbc>)
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124c8:	429a      	cmp	r2, r3
 80124ca:	d802      	bhi.n	80124d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80124cc:	4a1c      	ldr	r2, [pc, #112]	; (8012540 <prvAddNewTaskToReadyList+0xbc>)
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80124d2:	4b1d      	ldr	r3, [pc, #116]	; (8012548 <prvAddNewTaskToReadyList+0xc4>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	3301      	adds	r3, #1
 80124d8:	4a1b      	ldr	r2, [pc, #108]	; (8012548 <prvAddNewTaskToReadyList+0xc4>)
 80124da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124e0:	2201      	movs	r2, #1
 80124e2:	409a      	lsls	r2, r3
 80124e4:	4b19      	ldr	r3, [pc, #100]	; (801254c <prvAddNewTaskToReadyList+0xc8>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	4313      	orrs	r3, r2
 80124ea:	4a18      	ldr	r2, [pc, #96]	; (801254c <prvAddNewTaskToReadyList+0xc8>)
 80124ec:	6013      	str	r3, [r2, #0]
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124f2:	4613      	mov	r3, r2
 80124f4:	009b      	lsls	r3, r3, #2
 80124f6:	4413      	add	r3, r2
 80124f8:	009b      	lsls	r3, r3, #2
 80124fa:	4a15      	ldr	r2, [pc, #84]	; (8012550 <prvAddNewTaskToReadyList+0xcc>)
 80124fc:	441a      	add	r2, r3
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	3304      	adds	r3, #4
 8012502:	4619      	mov	r1, r3
 8012504:	4610      	mov	r0, r2
 8012506:	f7ff f99a 	bl	801183e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801250a:	f001 f80f 	bl	801352c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801250e:	4b0d      	ldr	r3, [pc, #52]	; (8012544 <prvAddNewTaskToReadyList+0xc0>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d00e      	beq.n	8012534 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012516:	4b0a      	ldr	r3, [pc, #40]	; (8012540 <prvAddNewTaskToReadyList+0xbc>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012520:	429a      	cmp	r2, r3
 8012522:	d207      	bcs.n	8012534 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012524:	4b0b      	ldr	r3, [pc, #44]	; (8012554 <prvAddNewTaskToReadyList+0xd0>)
 8012526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801252a:	601a      	str	r2, [r3, #0]
 801252c:	f3bf 8f4f 	dsb	sy
 8012530:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012534:	bf00      	nop
 8012536:	3708      	adds	r7, #8
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	20000808 	.word	0x20000808
 8012540:	20000708 	.word	0x20000708
 8012544:	20000814 	.word	0x20000814
 8012548:	20000824 	.word	0x20000824
 801254c:	20000810 	.word	0x20000810
 8012550:	2000070c 	.word	0x2000070c
 8012554:	e000ed04 	.word	0xe000ed04

08012558 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012558:	b580      	push	{r7, lr}
 801255a:	b084      	sub	sp, #16
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012560:	2300      	movs	r3, #0
 8012562:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d017      	beq.n	801259a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801256a:	4b13      	ldr	r3, [pc, #76]	; (80125b8 <vTaskDelay+0x60>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d00a      	beq.n	8012588 <vTaskDelay+0x30>
	__asm volatile
 8012572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	60bb      	str	r3, [r7, #8]
}
 8012584:	bf00      	nop
 8012586:	e7fe      	b.n	8012586 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012588:	f000 f884 	bl	8012694 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801258c:	2100      	movs	r1, #0
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 fe48 	bl	8013224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012594:	f000 f88c 	bl	80126b0 <xTaskResumeAll>
 8012598:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d107      	bne.n	80125b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80125a0:	4b06      	ldr	r3, [pc, #24]	; (80125bc <vTaskDelay+0x64>)
 80125a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125a6:	601a      	str	r2, [r3, #0]
 80125a8:	f3bf 8f4f 	dsb	sy
 80125ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80125b0:	bf00      	nop
 80125b2:	3710      	adds	r7, #16
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}
 80125b8:	20000830 	.word	0x20000830
 80125bc:	e000ed04 	.word	0xe000ed04

080125c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80125c0:	b580      	push	{r7, lr}
 80125c2:	b08a      	sub	sp, #40	; 0x28
 80125c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80125c6:	2300      	movs	r3, #0
 80125c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80125ca:	2300      	movs	r3, #0
 80125cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80125ce:	463a      	mov	r2, r7
 80125d0:	1d39      	adds	r1, r7, #4
 80125d2:	f107 0308 	add.w	r3, r7, #8
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7f9 ffbe 	bl	800c558 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80125dc:	6839      	ldr	r1, [r7, #0]
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	68ba      	ldr	r2, [r7, #8]
 80125e2:	9202      	str	r2, [sp, #8]
 80125e4:	9301      	str	r3, [sp, #4]
 80125e6:	2300      	movs	r3, #0
 80125e8:	9300      	str	r3, [sp, #0]
 80125ea:	2300      	movs	r3, #0
 80125ec:	460a      	mov	r2, r1
 80125ee:	4921      	ldr	r1, [pc, #132]	; (8012674 <vTaskStartScheduler+0xb4>)
 80125f0:	4821      	ldr	r0, [pc, #132]	; (8012678 <vTaskStartScheduler+0xb8>)
 80125f2:	f7ff fe08 	bl	8012206 <xTaskCreateStatic>
 80125f6:	4603      	mov	r3, r0
 80125f8:	4a20      	ldr	r2, [pc, #128]	; (801267c <vTaskStartScheduler+0xbc>)
 80125fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80125fc:	4b1f      	ldr	r3, [pc, #124]	; (801267c <vTaskStartScheduler+0xbc>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d002      	beq.n	801260a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012604:	2301      	movs	r3, #1
 8012606:	617b      	str	r3, [r7, #20]
 8012608:	e001      	b.n	801260e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801260a:	2300      	movs	r3, #0
 801260c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801260e:	697b      	ldr	r3, [r7, #20]
 8012610:	2b01      	cmp	r3, #1
 8012612:	d11b      	bne.n	801264c <vTaskStartScheduler+0x8c>
	__asm volatile
 8012614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012618:	f383 8811 	msr	BASEPRI, r3
 801261c:	f3bf 8f6f 	isb	sy
 8012620:	f3bf 8f4f 	dsb	sy
 8012624:	613b      	str	r3, [r7, #16]
}
 8012626:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012628:	4b15      	ldr	r3, [pc, #84]	; (8012680 <vTaskStartScheduler+0xc0>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	334c      	adds	r3, #76	; 0x4c
 801262e:	4a15      	ldr	r2, [pc, #84]	; (8012684 <vTaskStartScheduler+0xc4>)
 8012630:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012632:	4b15      	ldr	r3, [pc, #84]	; (8012688 <vTaskStartScheduler+0xc8>)
 8012634:	f04f 32ff 	mov.w	r2, #4294967295
 8012638:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801263a:	4b14      	ldr	r3, [pc, #80]	; (801268c <vTaskStartScheduler+0xcc>)
 801263c:	2201      	movs	r2, #1
 801263e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8012640:	4b13      	ldr	r3, [pc, #76]	; (8012690 <vTaskStartScheduler+0xd0>)
 8012642:	2200      	movs	r2, #0
 8012644:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012646:	f000 fecf 	bl	80133e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801264a:	e00e      	b.n	801266a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012652:	d10a      	bne.n	801266a <vTaskStartScheduler+0xaa>
	__asm volatile
 8012654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012658:	f383 8811 	msr	BASEPRI, r3
 801265c:	f3bf 8f6f 	isb	sy
 8012660:	f3bf 8f4f 	dsb	sy
 8012664:	60fb      	str	r3, [r7, #12]
}
 8012666:	bf00      	nop
 8012668:	e7fe      	b.n	8012668 <vTaskStartScheduler+0xa8>
}
 801266a:	bf00      	nop
 801266c:	3718      	adds	r7, #24
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
 8012672:	bf00      	nop
 8012674:	080148a8 	.word	0x080148a8
 8012678:	08012c3d 	.word	0x08012c3d
 801267c:	2000082c 	.word	0x2000082c
 8012680:	20000708 	.word	0x20000708
 8012684:	20000088 	.word	0x20000088
 8012688:	20000828 	.word	0x20000828
 801268c:	20000814 	.word	0x20000814
 8012690:	2000080c 	.word	0x2000080c

08012694 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012694:	b480      	push	{r7}
 8012696:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012698:	4b04      	ldr	r3, [pc, #16]	; (80126ac <vTaskSuspendAll+0x18>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	3301      	adds	r3, #1
 801269e:	4a03      	ldr	r2, [pc, #12]	; (80126ac <vTaskSuspendAll+0x18>)
 80126a0:	6013      	str	r3, [r2, #0]
}
 80126a2:	bf00      	nop
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bc80      	pop	{r7}
 80126a8:	4770      	bx	lr
 80126aa:	bf00      	nop
 80126ac:	20000830 	.word	0x20000830

080126b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80126b6:	2300      	movs	r3, #0
 80126b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80126ba:	2300      	movs	r3, #0
 80126bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80126be:	4b41      	ldr	r3, [pc, #260]	; (80127c4 <xTaskResumeAll+0x114>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d10a      	bne.n	80126dc <xTaskResumeAll+0x2c>
	__asm volatile
 80126c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ca:	f383 8811 	msr	BASEPRI, r3
 80126ce:	f3bf 8f6f 	isb	sy
 80126d2:	f3bf 8f4f 	dsb	sy
 80126d6:	603b      	str	r3, [r7, #0]
}
 80126d8:	bf00      	nop
 80126da:	e7fe      	b.n	80126da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80126dc:	f000 fef6 	bl	80134cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80126e0:	4b38      	ldr	r3, [pc, #224]	; (80127c4 <xTaskResumeAll+0x114>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	3b01      	subs	r3, #1
 80126e6:	4a37      	ldr	r2, [pc, #220]	; (80127c4 <xTaskResumeAll+0x114>)
 80126e8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80126ea:	4b36      	ldr	r3, [pc, #216]	; (80127c4 <xTaskResumeAll+0x114>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d161      	bne.n	80127b6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80126f2:	4b35      	ldr	r3, [pc, #212]	; (80127c8 <xTaskResumeAll+0x118>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d05d      	beq.n	80127b6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80126fa:	e02e      	b.n	801275a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80126fc:	4b33      	ldr	r3, [pc, #204]	; (80127cc <xTaskResumeAll+0x11c>)
 80126fe:	68db      	ldr	r3, [r3, #12]
 8012700:	68db      	ldr	r3, [r3, #12]
 8012702:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	3318      	adds	r3, #24
 8012708:	4618      	mov	r0, r3
 801270a:	f7ff f8f3 	bl	80118f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	3304      	adds	r3, #4
 8012712:	4618      	mov	r0, r3
 8012714:	f7ff f8ee 	bl	80118f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801271c:	2201      	movs	r2, #1
 801271e:	409a      	lsls	r2, r3
 8012720:	4b2b      	ldr	r3, [pc, #172]	; (80127d0 <xTaskResumeAll+0x120>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4313      	orrs	r3, r2
 8012726:	4a2a      	ldr	r2, [pc, #168]	; (80127d0 <xTaskResumeAll+0x120>)
 8012728:	6013      	str	r3, [r2, #0]
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801272e:	4613      	mov	r3, r2
 8012730:	009b      	lsls	r3, r3, #2
 8012732:	4413      	add	r3, r2
 8012734:	009b      	lsls	r3, r3, #2
 8012736:	4a27      	ldr	r2, [pc, #156]	; (80127d4 <xTaskResumeAll+0x124>)
 8012738:	441a      	add	r2, r3
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	3304      	adds	r3, #4
 801273e:	4619      	mov	r1, r3
 8012740:	4610      	mov	r0, r2
 8012742:	f7ff f87c 	bl	801183e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801274a:	4b23      	ldr	r3, [pc, #140]	; (80127d8 <xTaskResumeAll+0x128>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012750:	429a      	cmp	r2, r3
 8012752:	d302      	bcc.n	801275a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012754:	4b21      	ldr	r3, [pc, #132]	; (80127dc <xTaskResumeAll+0x12c>)
 8012756:	2201      	movs	r2, #1
 8012758:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801275a:	4b1c      	ldr	r3, [pc, #112]	; (80127cc <xTaskResumeAll+0x11c>)
 801275c:	681b      	ldr	r3, [r3, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d1cc      	bne.n	80126fc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d001      	beq.n	801276c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012768:	f000 fb5a 	bl	8012e20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801276c:	4b1c      	ldr	r3, [pc, #112]	; (80127e0 <xTaskResumeAll+0x130>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2b00      	cmp	r3, #0
 8012776:	d010      	beq.n	801279a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012778:	f000 f836 	bl	80127e8 <xTaskIncrementTick>
 801277c:	4603      	mov	r3, r0
 801277e:	2b00      	cmp	r3, #0
 8012780:	d002      	beq.n	8012788 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012782:	4b16      	ldr	r3, [pc, #88]	; (80127dc <xTaskResumeAll+0x12c>)
 8012784:	2201      	movs	r2, #1
 8012786:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	3b01      	subs	r3, #1
 801278c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d1f1      	bne.n	8012778 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8012794:	4b12      	ldr	r3, [pc, #72]	; (80127e0 <xTaskResumeAll+0x130>)
 8012796:	2200      	movs	r2, #0
 8012798:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801279a:	4b10      	ldr	r3, [pc, #64]	; (80127dc <xTaskResumeAll+0x12c>)
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d009      	beq.n	80127b6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80127a2:	2301      	movs	r3, #1
 80127a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80127a6:	4b0f      	ldr	r3, [pc, #60]	; (80127e4 <xTaskResumeAll+0x134>)
 80127a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127ac:	601a      	str	r2, [r3, #0]
 80127ae:	f3bf 8f4f 	dsb	sy
 80127b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80127b6:	f000 feb9 	bl	801352c <vPortExitCritical>

	return xAlreadyYielded;
 80127ba:	68bb      	ldr	r3, [r7, #8]
}
 80127bc:	4618      	mov	r0, r3
 80127be:	3710      	adds	r7, #16
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	20000830 	.word	0x20000830
 80127c8:	20000808 	.word	0x20000808
 80127cc:	200007c8 	.word	0x200007c8
 80127d0:	20000810 	.word	0x20000810
 80127d4:	2000070c 	.word	0x2000070c
 80127d8:	20000708 	.word	0x20000708
 80127dc:	2000081c 	.word	0x2000081c
 80127e0:	20000818 	.word	0x20000818
 80127e4:	e000ed04 	.word	0xe000ed04

080127e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b086      	sub	sp, #24
 80127ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80127ee:	2300      	movs	r3, #0
 80127f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127f2:	4b51      	ldr	r3, [pc, #324]	; (8012938 <xTaskIncrementTick+0x150>)
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	2b00      	cmp	r3, #0
 80127f8:	f040 808d 	bne.w	8012916 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80127fc:	4b4f      	ldr	r3, [pc, #316]	; (801293c <xTaskIncrementTick+0x154>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	3301      	adds	r3, #1
 8012802:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012804:	4a4d      	ldr	r2, [pc, #308]	; (801293c <xTaskIncrementTick+0x154>)
 8012806:	693b      	ldr	r3, [r7, #16]
 8012808:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801280a:	693b      	ldr	r3, [r7, #16]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d120      	bne.n	8012852 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012810:	4b4b      	ldr	r3, [pc, #300]	; (8012940 <xTaskIncrementTick+0x158>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d00a      	beq.n	8012830 <xTaskIncrementTick+0x48>
	__asm volatile
 801281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801281e:	f383 8811 	msr	BASEPRI, r3
 8012822:	f3bf 8f6f 	isb	sy
 8012826:	f3bf 8f4f 	dsb	sy
 801282a:	603b      	str	r3, [r7, #0]
}
 801282c:	bf00      	nop
 801282e:	e7fe      	b.n	801282e <xTaskIncrementTick+0x46>
 8012830:	4b43      	ldr	r3, [pc, #268]	; (8012940 <xTaskIncrementTick+0x158>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	60fb      	str	r3, [r7, #12]
 8012836:	4b43      	ldr	r3, [pc, #268]	; (8012944 <xTaskIncrementTick+0x15c>)
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	4a41      	ldr	r2, [pc, #260]	; (8012940 <xTaskIncrementTick+0x158>)
 801283c:	6013      	str	r3, [r2, #0]
 801283e:	4a41      	ldr	r2, [pc, #260]	; (8012944 <xTaskIncrementTick+0x15c>)
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	6013      	str	r3, [r2, #0]
 8012844:	4b40      	ldr	r3, [pc, #256]	; (8012948 <xTaskIncrementTick+0x160>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	3301      	adds	r3, #1
 801284a:	4a3f      	ldr	r2, [pc, #252]	; (8012948 <xTaskIncrementTick+0x160>)
 801284c:	6013      	str	r3, [r2, #0]
 801284e:	f000 fae7 	bl	8012e20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012852:	4b3e      	ldr	r3, [pc, #248]	; (801294c <xTaskIncrementTick+0x164>)
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	693a      	ldr	r2, [r7, #16]
 8012858:	429a      	cmp	r2, r3
 801285a:	d34d      	bcc.n	80128f8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801285c:	4b38      	ldr	r3, [pc, #224]	; (8012940 <xTaskIncrementTick+0x158>)
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <xTaskIncrementTick+0x82>
 8012866:	2301      	movs	r3, #1
 8012868:	e000      	b.n	801286c <xTaskIncrementTick+0x84>
 801286a:	2300      	movs	r3, #0
 801286c:	2b00      	cmp	r3, #0
 801286e:	d004      	beq.n	801287a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012870:	4b36      	ldr	r3, [pc, #216]	; (801294c <xTaskIncrementTick+0x164>)
 8012872:	f04f 32ff 	mov.w	r2, #4294967295
 8012876:	601a      	str	r2, [r3, #0]
					break;
 8012878:	e03e      	b.n	80128f8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 801287a:	4b31      	ldr	r3, [pc, #196]	; (8012940 <xTaskIncrementTick+0x158>)
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	68db      	ldr	r3, [r3, #12]
 8012880:	68db      	ldr	r3, [r3, #12]
 8012882:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	685b      	ldr	r3, [r3, #4]
 8012888:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801288a:	693a      	ldr	r2, [r7, #16]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	429a      	cmp	r2, r3
 8012890:	d203      	bcs.n	801289a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012892:	4a2e      	ldr	r2, [pc, #184]	; (801294c <xTaskIncrementTick+0x164>)
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	6013      	str	r3, [r2, #0]
						break;
 8012898:	e02e      	b.n	80128f8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	3304      	adds	r3, #4
 801289e:	4618      	mov	r0, r3
 80128a0:	f7ff f828 	bl	80118f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d004      	beq.n	80128b6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128ac:	68bb      	ldr	r3, [r7, #8]
 80128ae:	3318      	adds	r3, #24
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7ff f81f 	bl	80118f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ba:	2201      	movs	r2, #1
 80128bc:	409a      	lsls	r2, r3
 80128be:	4b24      	ldr	r3, [pc, #144]	; (8012950 <xTaskIncrementTick+0x168>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4313      	orrs	r3, r2
 80128c4:	4a22      	ldr	r2, [pc, #136]	; (8012950 <xTaskIncrementTick+0x168>)
 80128c6:	6013      	str	r3, [r2, #0]
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128cc:	4613      	mov	r3, r2
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	4413      	add	r3, r2
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	4a1f      	ldr	r2, [pc, #124]	; (8012954 <xTaskIncrementTick+0x16c>)
 80128d6:	441a      	add	r2, r3
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	3304      	adds	r3, #4
 80128dc:	4619      	mov	r1, r3
 80128de:	4610      	mov	r0, r2
 80128e0:	f7fe ffad 	bl	801183e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128e4:	68bb      	ldr	r3, [r7, #8]
 80128e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128e8:	4b1b      	ldr	r3, [pc, #108]	; (8012958 <xTaskIncrementTick+0x170>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d3b4      	bcc.n	801285c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80128f2:	2301      	movs	r3, #1
 80128f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80128f6:	e7b1      	b.n	801285c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80128f8:	4b17      	ldr	r3, [pc, #92]	; (8012958 <xTaskIncrementTick+0x170>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128fe:	4915      	ldr	r1, [pc, #84]	; (8012954 <xTaskIncrementTick+0x16c>)
 8012900:	4613      	mov	r3, r2
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	4413      	add	r3, r2
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	440b      	add	r3, r1
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	2b01      	cmp	r3, #1
 801290e:	d907      	bls.n	8012920 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8012910:	2301      	movs	r3, #1
 8012912:	617b      	str	r3, [r7, #20]
 8012914:	e004      	b.n	8012920 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012916:	4b11      	ldr	r3, [pc, #68]	; (801295c <xTaskIncrementTick+0x174>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	3301      	adds	r3, #1
 801291c:	4a0f      	ldr	r2, [pc, #60]	; (801295c <xTaskIncrementTick+0x174>)
 801291e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012920:	4b0f      	ldr	r3, [pc, #60]	; (8012960 <xTaskIncrementTick+0x178>)
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d001      	beq.n	801292c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8012928:	2301      	movs	r3, #1
 801292a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801292c:	697b      	ldr	r3, [r7, #20]
}
 801292e:	4618      	mov	r0, r3
 8012930:	3718      	adds	r7, #24
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}
 8012936:	bf00      	nop
 8012938:	20000830 	.word	0x20000830
 801293c:	2000080c 	.word	0x2000080c
 8012940:	200007c0 	.word	0x200007c0
 8012944:	200007c4 	.word	0x200007c4
 8012948:	20000820 	.word	0x20000820
 801294c:	20000828 	.word	0x20000828
 8012950:	20000810 	.word	0x20000810
 8012954:	2000070c 	.word	0x2000070c
 8012958:	20000708 	.word	0x20000708
 801295c:	20000818 	.word	0x20000818
 8012960:	2000081c 	.word	0x2000081c

08012964 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012964:	b480      	push	{r7}
 8012966:	b087      	sub	sp, #28
 8012968:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801296a:	4b29      	ldr	r3, [pc, #164]	; (8012a10 <vTaskSwitchContext+0xac>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2b00      	cmp	r3, #0
 8012970:	d003      	beq.n	801297a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012972:	4b28      	ldr	r3, [pc, #160]	; (8012a14 <vTaskSwitchContext+0xb0>)
 8012974:	2201      	movs	r2, #1
 8012976:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012978:	e044      	b.n	8012a04 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 801297a:	4b26      	ldr	r3, [pc, #152]	; (8012a14 <vTaskSwitchContext+0xb0>)
 801297c:	2200      	movs	r2, #0
 801297e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012980:	4b25      	ldr	r3, [pc, #148]	; (8012a18 <vTaskSwitchContext+0xb4>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	fab3 f383 	clz	r3, r3
 801298c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801298e:	7afb      	ldrb	r3, [r7, #11]
 8012990:	f1c3 031f 	rsb	r3, r3, #31
 8012994:	617b      	str	r3, [r7, #20]
 8012996:	4921      	ldr	r1, [pc, #132]	; (8012a1c <vTaskSwitchContext+0xb8>)
 8012998:	697a      	ldr	r2, [r7, #20]
 801299a:	4613      	mov	r3, r2
 801299c:	009b      	lsls	r3, r3, #2
 801299e:	4413      	add	r3, r2
 80129a0:	009b      	lsls	r3, r3, #2
 80129a2:	440b      	add	r3, r1
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d10a      	bne.n	80129c0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80129aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ae:	f383 8811 	msr	BASEPRI, r3
 80129b2:	f3bf 8f6f 	isb	sy
 80129b6:	f3bf 8f4f 	dsb	sy
 80129ba:	607b      	str	r3, [r7, #4]
}
 80129bc:	bf00      	nop
 80129be:	e7fe      	b.n	80129be <vTaskSwitchContext+0x5a>
 80129c0:	697a      	ldr	r2, [r7, #20]
 80129c2:	4613      	mov	r3, r2
 80129c4:	009b      	lsls	r3, r3, #2
 80129c6:	4413      	add	r3, r2
 80129c8:	009b      	lsls	r3, r3, #2
 80129ca:	4a14      	ldr	r2, [pc, #80]	; (8012a1c <vTaskSwitchContext+0xb8>)
 80129cc:	4413      	add	r3, r2
 80129ce:	613b      	str	r3, [r7, #16]
 80129d0:	693b      	ldr	r3, [r7, #16]
 80129d2:	685b      	ldr	r3, [r3, #4]
 80129d4:	685a      	ldr	r2, [r3, #4]
 80129d6:	693b      	ldr	r3, [r7, #16]
 80129d8:	605a      	str	r2, [r3, #4]
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	685a      	ldr	r2, [r3, #4]
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	3308      	adds	r3, #8
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d104      	bne.n	80129f0 <vTaskSwitchContext+0x8c>
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	685b      	ldr	r3, [r3, #4]
 80129ea:	685a      	ldr	r2, [r3, #4]
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	605a      	str	r2, [r3, #4]
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	685b      	ldr	r3, [r3, #4]
 80129f4:	68db      	ldr	r3, [r3, #12]
 80129f6:	4a0a      	ldr	r2, [pc, #40]	; (8012a20 <vTaskSwitchContext+0xbc>)
 80129f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80129fa:	4b09      	ldr	r3, [pc, #36]	; (8012a20 <vTaskSwitchContext+0xbc>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	334c      	adds	r3, #76	; 0x4c
 8012a00:	4a08      	ldr	r2, [pc, #32]	; (8012a24 <vTaskSwitchContext+0xc0>)
 8012a02:	6013      	str	r3, [r2, #0]
}
 8012a04:	bf00      	nop
 8012a06:	371c      	adds	r7, #28
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bc80      	pop	{r7}
 8012a0c:	4770      	bx	lr
 8012a0e:	bf00      	nop
 8012a10:	20000830 	.word	0x20000830
 8012a14:	2000081c 	.word	0x2000081c
 8012a18:	20000810 	.word	0x20000810
 8012a1c:	2000070c 	.word	0x2000070c
 8012a20:	20000708 	.word	0x20000708
 8012a24:	20000088 	.word	0x20000088

08012a28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b084      	sub	sp, #16
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
 8012a30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d10a      	bne.n	8012a4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3c:	f383 8811 	msr	BASEPRI, r3
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	f3bf 8f4f 	dsb	sy
 8012a48:	60fb      	str	r3, [r7, #12]
}
 8012a4a:	bf00      	nop
 8012a4c:	e7fe      	b.n	8012a4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012a4e:	4b07      	ldr	r3, [pc, #28]	; (8012a6c <vTaskPlaceOnEventList+0x44>)
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	3318      	adds	r3, #24
 8012a54:	4619      	mov	r1, r3
 8012a56:	6878      	ldr	r0, [r7, #4]
 8012a58:	f7fe ff14 	bl	8011884 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012a5c:	2101      	movs	r1, #1
 8012a5e:	6838      	ldr	r0, [r7, #0]
 8012a60:	f000 fbe0 	bl	8013224 <prvAddCurrentTaskToDelayedList>
}
 8012a64:	bf00      	nop
 8012a66:	3710      	adds	r7, #16
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}
 8012a6c:	20000708 	.word	0x20000708

08012a70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b086      	sub	sp, #24
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	68db      	ldr	r3, [r3, #12]
 8012a7c:	68db      	ldr	r3, [r3, #12]
 8012a7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012a80:	693b      	ldr	r3, [r7, #16]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d10a      	bne.n	8012a9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8012a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a8a:	f383 8811 	msr	BASEPRI, r3
 8012a8e:	f3bf 8f6f 	isb	sy
 8012a92:	f3bf 8f4f 	dsb	sy
 8012a96:	60fb      	str	r3, [r7, #12]
}
 8012a98:	bf00      	nop
 8012a9a:	e7fe      	b.n	8012a9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012a9c:	693b      	ldr	r3, [r7, #16]
 8012a9e:	3318      	adds	r3, #24
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	f7fe ff27 	bl	80118f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012aa6:	4b1d      	ldr	r3, [pc, #116]	; (8012b1c <xTaskRemoveFromEventList+0xac>)
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d11c      	bne.n	8012ae8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	3304      	adds	r3, #4
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fe ff1e 	bl	80118f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012ab8:	693b      	ldr	r3, [r7, #16]
 8012aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012abc:	2201      	movs	r2, #1
 8012abe:	409a      	lsls	r2, r3
 8012ac0:	4b17      	ldr	r3, [pc, #92]	; (8012b20 <xTaskRemoveFromEventList+0xb0>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4313      	orrs	r3, r2
 8012ac6:	4a16      	ldr	r2, [pc, #88]	; (8012b20 <xTaskRemoveFromEventList+0xb0>)
 8012ac8:	6013      	str	r3, [r2, #0]
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ace:	4613      	mov	r3, r2
 8012ad0:	009b      	lsls	r3, r3, #2
 8012ad2:	4413      	add	r3, r2
 8012ad4:	009b      	lsls	r3, r3, #2
 8012ad6:	4a13      	ldr	r2, [pc, #76]	; (8012b24 <xTaskRemoveFromEventList+0xb4>)
 8012ad8:	441a      	add	r2, r3
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	3304      	adds	r3, #4
 8012ade:	4619      	mov	r1, r3
 8012ae0:	4610      	mov	r0, r2
 8012ae2:	f7fe feac 	bl	801183e <vListInsertEnd>
 8012ae6:	e005      	b.n	8012af4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	3318      	adds	r3, #24
 8012aec:	4619      	mov	r1, r3
 8012aee:	480e      	ldr	r0, [pc, #56]	; (8012b28 <xTaskRemoveFromEventList+0xb8>)
 8012af0:	f7fe fea5 	bl	801183e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012af4:	693b      	ldr	r3, [r7, #16]
 8012af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012af8:	4b0c      	ldr	r3, [pc, #48]	; (8012b2c <xTaskRemoveFromEventList+0xbc>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d905      	bls.n	8012b0e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012b02:	2301      	movs	r3, #1
 8012b04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012b06:	4b0a      	ldr	r3, [pc, #40]	; (8012b30 <xTaskRemoveFromEventList+0xc0>)
 8012b08:	2201      	movs	r2, #1
 8012b0a:	601a      	str	r2, [r3, #0]
 8012b0c:	e001      	b.n	8012b12 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8012b0e:	2300      	movs	r3, #0
 8012b10:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012b12:	697b      	ldr	r3, [r7, #20]
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3718      	adds	r7, #24
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}
 8012b1c:	20000830 	.word	0x20000830
 8012b20:	20000810 	.word	0x20000810
 8012b24:	2000070c 	.word	0x2000070c
 8012b28:	200007c8 	.word	0x200007c8
 8012b2c:	20000708 	.word	0x20000708
 8012b30:	2000081c 	.word	0x2000081c

08012b34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012b34:	b480      	push	{r7}
 8012b36:	b083      	sub	sp, #12
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012b3c:	4b06      	ldr	r3, [pc, #24]	; (8012b58 <vTaskInternalSetTimeOutState+0x24>)
 8012b3e:	681a      	ldr	r2, [r3, #0]
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012b44:	4b05      	ldr	r3, [pc, #20]	; (8012b5c <vTaskInternalSetTimeOutState+0x28>)
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	605a      	str	r2, [r3, #4]
}
 8012b4c:	bf00      	nop
 8012b4e:	370c      	adds	r7, #12
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bc80      	pop	{r7}
 8012b54:	4770      	bx	lr
 8012b56:	bf00      	nop
 8012b58:	20000820 	.word	0x20000820
 8012b5c:	2000080c 	.word	0x2000080c

08012b60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	b088      	sub	sp, #32
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
 8012b68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d10a      	bne.n	8012b86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8012b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b74:	f383 8811 	msr	BASEPRI, r3
 8012b78:	f3bf 8f6f 	isb	sy
 8012b7c:	f3bf 8f4f 	dsb	sy
 8012b80:	613b      	str	r3, [r7, #16]
}
 8012b82:	bf00      	nop
 8012b84:	e7fe      	b.n	8012b84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d10a      	bne.n	8012ba2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8012b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b90:	f383 8811 	msr	BASEPRI, r3
 8012b94:	f3bf 8f6f 	isb	sy
 8012b98:	f3bf 8f4f 	dsb	sy
 8012b9c:	60fb      	str	r3, [r7, #12]
}
 8012b9e:	bf00      	nop
 8012ba0:	e7fe      	b.n	8012ba0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8012ba2:	f000 fc93 	bl	80134cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012ba6:	4b1d      	ldr	r3, [pc, #116]	; (8012c1c <xTaskCheckForTimeOut+0xbc>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	69ba      	ldr	r2, [r7, #24]
 8012bb2:	1ad3      	subs	r3, r2, r3
 8012bb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bbe:	d102      	bne.n	8012bc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	61fb      	str	r3, [r7, #28]
 8012bc4:	e023      	b.n	8012c0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681a      	ldr	r2, [r3, #0]
 8012bca:	4b15      	ldr	r3, [pc, #84]	; (8012c20 <xTaskCheckForTimeOut+0xc0>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d007      	beq.n	8012be2 <xTaskCheckForTimeOut+0x82>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	685b      	ldr	r3, [r3, #4]
 8012bd6:	69ba      	ldr	r2, [r7, #24]
 8012bd8:	429a      	cmp	r2, r3
 8012bda:	d302      	bcc.n	8012be2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012bdc:	2301      	movs	r3, #1
 8012bde:	61fb      	str	r3, [r7, #28]
 8012be0:	e015      	b.n	8012c0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	697a      	ldr	r2, [r7, #20]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d20b      	bcs.n	8012c04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	1ad2      	subs	r2, r2, r3
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7ff ff9b 	bl	8012b34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012bfe:	2300      	movs	r3, #0
 8012c00:	61fb      	str	r3, [r7, #28]
 8012c02:	e004      	b.n	8012c0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8012c04:	683b      	ldr	r3, [r7, #0]
 8012c06:	2200      	movs	r2, #0
 8012c08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012c0a:	2301      	movs	r3, #1
 8012c0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012c0e:	f000 fc8d 	bl	801352c <vPortExitCritical>

	return xReturn;
 8012c12:	69fb      	ldr	r3, [r7, #28]
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3720      	adds	r7, #32
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}
 8012c1c:	2000080c 	.word	0x2000080c
 8012c20:	20000820 	.word	0x20000820

08012c24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012c24:	b480      	push	{r7}
 8012c26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012c28:	4b03      	ldr	r3, [pc, #12]	; (8012c38 <vTaskMissedYield+0x14>)
 8012c2a:	2201      	movs	r2, #1
 8012c2c:	601a      	str	r2, [r3, #0]
}
 8012c2e:	bf00      	nop
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bc80      	pop	{r7}
 8012c34:	4770      	bx	lr
 8012c36:	bf00      	nop
 8012c38:	2000081c 	.word	0x2000081c

08012c3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012c3c:	b580      	push	{r7, lr}
 8012c3e:	b082      	sub	sp, #8
 8012c40:	af00      	add	r7, sp, #0
 8012c42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012c44:	f000 f852 	bl	8012cec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012c48:	4b06      	ldr	r3, [pc, #24]	; (8012c64 <prvIdleTask+0x28>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	2b01      	cmp	r3, #1
 8012c4e:	d9f9      	bls.n	8012c44 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012c50:	4b05      	ldr	r3, [pc, #20]	; (8012c68 <prvIdleTask+0x2c>)
 8012c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c56:	601a      	str	r2, [r3, #0]
 8012c58:	f3bf 8f4f 	dsb	sy
 8012c5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012c60:	e7f0      	b.n	8012c44 <prvIdleTask+0x8>
 8012c62:	bf00      	nop
 8012c64:	2000070c 	.word	0x2000070c
 8012c68:	e000ed04 	.word	0xe000ed04

08012c6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012c6c:	b580      	push	{r7, lr}
 8012c6e:	b082      	sub	sp, #8
 8012c70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c72:	2300      	movs	r3, #0
 8012c74:	607b      	str	r3, [r7, #4]
 8012c76:	e00c      	b.n	8012c92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012c78:	687a      	ldr	r2, [r7, #4]
 8012c7a:	4613      	mov	r3, r2
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	4413      	add	r3, r2
 8012c80:	009b      	lsls	r3, r3, #2
 8012c82:	4a12      	ldr	r2, [pc, #72]	; (8012ccc <prvInitialiseTaskLists+0x60>)
 8012c84:	4413      	add	r3, r2
 8012c86:	4618      	mov	r0, r3
 8012c88:	f7fe fdae 	bl	80117e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	3301      	adds	r3, #1
 8012c90:	607b      	str	r3, [r7, #4]
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2b06      	cmp	r3, #6
 8012c96:	d9ef      	bls.n	8012c78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012c98:	480d      	ldr	r0, [pc, #52]	; (8012cd0 <prvInitialiseTaskLists+0x64>)
 8012c9a:	f7fe fda5 	bl	80117e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012c9e:	480d      	ldr	r0, [pc, #52]	; (8012cd4 <prvInitialiseTaskLists+0x68>)
 8012ca0:	f7fe fda2 	bl	80117e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012ca4:	480c      	ldr	r0, [pc, #48]	; (8012cd8 <prvInitialiseTaskLists+0x6c>)
 8012ca6:	f7fe fd9f 	bl	80117e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012caa:	480c      	ldr	r0, [pc, #48]	; (8012cdc <prvInitialiseTaskLists+0x70>)
 8012cac:	f7fe fd9c 	bl	80117e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012cb0:	480b      	ldr	r0, [pc, #44]	; (8012ce0 <prvInitialiseTaskLists+0x74>)
 8012cb2:	f7fe fd99 	bl	80117e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012cb6:	4b0b      	ldr	r3, [pc, #44]	; (8012ce4 <prvInitialiseTaskLists+0x78>)
 8012cb8:	4a05      	ldr	r2, [pc, #20]	; (8012cd0 <prvInitialiseTaskLists+0x64>)
 8012cba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012cbc:	4b0a      	ldr	r3, [pc, #40]	; (8012ce8 <prvInitialiseTaskLists+0x7c>)
 8012cbe:	4a05      	ldr	r2, [pc, #20]	; (8012cd4 <prvInitialiseTaskLists+0x68>)
 8012cc0:	601a      	str	r2, [r3, #0]
}
 8012cc2:	bf00      	nop
 8012cc4:	3708      	adds	r7, #8
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	2000070c 	.word	0x2000070c
 8012cd0:	20000798 	.word	0x20000798
 8012cd4:	200007ac 	.word	0x200007ac
 8012cd8:	200007c8 	.word	0x200007c8
 8012cdc:	200007dc 	.word	0x200007dc
 8012ce0:	200007f4 	.word	0x200007f4
 8012ce4:	200007c0 	.word	0x200007c0
 8012ce8:	200007c4 	.word	0x200007c4

08012cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012cec:	b580      	push	{r7, lr}
 8012cee:	b082      	sub	sp, #8
 8012cf0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012cf2:	e019      	b.n	8012d28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012cf4:	f000 fbea 	bl	80134cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012cf8:	4b10      	ldr	r3, [pc, #64]	; (8012d3c <prvCheckTasksWaitingTermination+0x50>)
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	68db      	ldr	r3, [r3, #12]
 8012cfe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	3304      	adds	r3, #4
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7fe fdf5 	bl	80118f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012d0a:	4b0d      	ldr	r3, [pc, #52]	; (8012d40 <prvCheckTasksWaitingTermination+0x54>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	3b01      	subs	r3, #1
 8012d10:	4a0b      	ldr	r2, [pc, #44]	; (8012d40 <prvCheckTasksWaitingTermination+0x54>)
 8012d12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012d14:	4b0b      	ldr	r3, [pc, #44]	; (8012d44 <prvCheckTasksWaitingTermination+0x58>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	3b01      	subs	r3, #1
 8012d1a:	4a0a      	ldr	r2, [pc, #40]	; (8012d44 <prvCheckTasksWaitingTermination+0x58>)
 8012d1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012d1e:	f000 fc05 	bl	801352c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012d22:	6878      	ldr	r0, [r7, #4]
 8012d24:	f000 f848 	bl	8012db8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012d28:	4b06      	ldr	r3, [pc, #24]	; (8012d44 <prvCheckTasksWaitingTermination+0x58>)
 8012d2a:	681b      	ldr	r3, [r3, #0]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d1e1      	bne.n	8012cf4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012d30:	bf00      	nop
 8012d32:	bf00      	nop
 8012d34:	3708      	adds	r7, #8
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	200007dc 	.word	0x200007dc
 8012d40:	20000808 	.word	0x20000808
 8012d44:	200007f0 	.word	0x200007f0

08012d48 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8012d48:	b480      	push	{r7}
 8012d4a:	b085      	sub	sp, #20
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8012d50:	2300      	movs	r3, #0
 8012d52:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012d54:	e005      	b.n	8012d62 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	3301      	adds	r3, #1
 8012d5a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	781b      	ldrb	r3, [r3, #0]
 8012d66:	2ba5      	cmp	r3, #165	; 0xa5
 8012d68:	d0f5      	beq.n	8012d56 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	089b      	lsrs	r3, r3, #2
 8012d6e:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	b29b      	uxth	r3, r3
	}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3714      	adds	r7, #20
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bc80      	pop	{r7}
 8012d7c:	4770      	bx	lr
	...

08012d80 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b086      	sub	sp, #24
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d102      	bne.n	8012d94 <uxTaskGetStackHighWaterMark+0x14>
 8012d8e:	4b09      	ldr	r3, [pc, #36]	; (8012db4 <uxTaskGetStackHighWaterMark+0x34>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	e000      	b.n	8012d96 <uxTaskGetStackHighWaterMark+0x16>
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d9c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8012d9e:	6938      	ldr	r0, [r7, #16]
 8012da0:	f7ff ffd2 	bl	8012d48 <prvTaskCheckFreeStackSpace>
 8012da4:	4603      	mov	r3, r0
 8012da6:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8012da8:	68fb      	ldr	r3, [r7, #12]
	}
 8012daa:	4618      	mov	r0, r3
 8012dac:	3718      	adds	r7, #24
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	20000708 	.word	0x20000708

08012db8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b084      	sub	sp, #16
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	334c      	adds	r3, #76	; 0x4c
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f000 ff91 	bl	8013cec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d108      	bne.n	8012de6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f000 fd3b 	bl	8013854 <vPortFree>
				vPortFree( pxTCB );
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f000 fd38 	bl	8013854 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012de4:	e018      	b.n	8012e18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d103      	bne.n	8012df8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f000 fd2f 	bl	8013854 <vPortFree>
	}
 8012df6:	e00f      	b.n	8012e18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8012dfe:	2b02      	cmp	r3, #2
 8012e00:	d00a      	beq.n	8012e18 <prvDeleteTCB+0x60>
	__asm volatile
 8012e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e06:	f383 8811 	msr	BASEPRI, r3
 8012e0a:	f3bf 8f6f 	isb	sy
 8012e0e:	f3bf 8f4f 	dsb	sy
 8012e12:	60fb      	str	r3, [r7, #12]
}
 8012e14:	bf00      	nop
 8012e16:	e7fe      	b.n	8012e16 <prvDeleteTCB+0x5e>
	}
 8012e18:	bf00      	nop
 8012e1a:	3710      	adds	r7, #16
 8012e1c:	46bd      	mov	sp, r7
 8012e1e:	bd80      	pop	{r7, pc}

08012e20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012e20:	b480      	push	{r7}
 8012e22:	b083      	sub	sp, #12
 8012e24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e26:	4b0e      	ldr	r3, [pc, #56]	; (8012e60 <prvResetNextTaskUnblockTime+0x40>)
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d101      	bne.n	8012e34 <prvResetNextTaskUnblockTime+0x14>
 8012e30:	2301      	movs	r3, #1
 8012e32:	e000      	b.n	8012e36 <prvResetNextTaskUnblockTime+0x16>
 8012e34:	2300      	movs	r3, #0
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d004      	beq.n	8012e44 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012e3a:	4b0a      	ldr	r3, [pc, #40]	; (8012e64 <prvResetNextTaskUnblockTime+0x44>)
 8012e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8012e40:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012e42:	e008      	b.n	8012e56 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012e44:	4b06      	ldr	r3, [pc, #24]	; (8012e60 <prvResetNextTaskUnblockTime+0x40>)
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	68db      	ldr	r3, [r3, #12]
 8012e4a:	68db      	ldr	r3, [r3, #12]
 8012e4c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	685b      	ldr	r3, [r3, #4]
 8012e52:	4a04      	ldr	r2, [pc, #16]	; (8012e64 <prvResetNextTaskUnblockTime+0x44>)
 8012e54:	6013      	str	r3, [r2, #0]
}
 8012e56:	bf00      	nop
 8012e58:	370c      	adds	r7, #12
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bc80      	pop	{r7}
 8012e5e:	4770      	bx	lr
 8012e60:	200007c0 	.word	0x200007c0
 8012e64:	20000828 	.word	0x20000828

08012e68 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012e68:	b480      	push	{r7}
 8012e6a:	b083      	sub	sp, #12
 8012e6c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012e6e:	4b0b      	ldr	r3, [pc, #44]	; (8012e9c <xTaskGetSchedulerState+0x34>)
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d102      	bne.n	8012e7c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012e76:	2301      	movs	r3, #1
 8012e78:	607b      	str	r3, [r7, #4]
 8012e7a:	e008      	b.n	8012e8e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012e7c:	4b08      	ldr	r3, [pc, #32]	; (8012ea0 <xTaskGetSchedulerState+0x38>)
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d102      	bne.n	8012e8a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012e84:	2302      	movs	r3, #2
 8012e86:	607b      	str	r3, [r7, #4]
 8012e88:	e001      	b.n	8012e8e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012e8a:	2300      	movs	r3, #0
 8012e8c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012e8e:	687b      	ldr	r3, [r7, #4]
	}
 8012e90:	4618      	mov	r0, r3
 8012e92:	370c      	adds	r7, #12
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bc80      	pop	{r7}
 8012e98:	4770      	bx	lr
 8012e9a:	bf00      	nop
 8012e9c:	20000814 	.word	0x20000814
 8012ea0:	20000830 	.word	0x20000830

08012ea4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b084      	sub	sp, #16
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d06e      	beq.n	8012f98 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ebe:	4b39      	ldr	r3, [pc, #228]	; (8012fa4 <xTaskPriorityInherit+0x100>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d25e      	bcs.n	8012f86 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012ec8:	68bb      	ldr	r3, [r7, #8]
 8012eca:	699b      	ldr	r3, [r3, #24]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	db06      	blt.n	8012ede <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ed0:	4b34      	ldr	r3, [pc, #208]	; (8012fa4 <xTaskPriorityInherit+0x100>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ed6:	f1c3 0207 	rsb	r2, r3, #7
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012ede:	68bb      	ldr	r3, [r7, #8]
 8012ee0:	6959      	ldr	r1, [r3, #20]
 8012ee2:	68bb      	ldr	r3, [r7, #8]
 8012ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	009b      	lsls	r3, r3, #2
 8012eea:	4413      	add	r3, r2
 8012eec:	009b      	lsls	r3, r3, #2
 8012eee:	4a2e      	ldr	r2, [pc, #184]	; (8012fa8 <xTaskPriorityInherit+0x104>)
 8012ef0:	4413      	add	r3, r2
 8012ef2:	4299      	cmp	r1, r3
 8012ef4:	d101      	bne.n	8012efa <xTaskPriorityInherit+0x56>
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	e000      	b.n	8012efc <xTaskPriorityInherit+0x58>
 8012efa:	2300      	movs	r3, #0
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d03a      	beq.n	8012f76 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	3304      	adds	r3, #4
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7fe fcf5 	bl	80118f4 <uxListRemove>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d115      	bne.n	8012f3c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8012f10:	68bb      	ldr	r3, [r7, #8]
 8012f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f14:	4924      	ldr	r1, [pc, #144]	; (8012fa8 <xTaskPriorityInherit+0x104>)
 8012f16:	4613      	mov	r3, r2
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	4413      	add	r3, r2
 8012f1c:	009b      	lsls	r3, r3, #2
 8012f1e:	440b      	add	r3, r1
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d10a      	bne.n	8012f3c <xTaskPriorityInherit+0x98>
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8012f30:	43da      	mvns	r2, r3
 8012f32:	4b1e      	ldr	r3, [pc, #120]	; (8012fac <xTaskPriorityInherit+0x108>)
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	4013      	ands	r3, r2
 8012f38:	4a1c      	ldr	r2, [pc, #112]	; (8012fac <xTaskPriorityInherit+0x108>)
 8012f3a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012f3c:	4b19      	ldr	r3, [pc, #100]	; (8012fa4 <xTaskPriorityInherit+0x100>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012f46:	68bb      	ldr	r3, [r7, #8]
 8012f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f4a:	2201      	movs	r2, #1
 8012f4c:	409a      	lsls	r2, r3
 8012f4e:	4b17      	ldr	r3, [pc, #92]	; (8012fac <xTaskPriorityInherit+0x108>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	4313      	orrs	r3, r2
 8012f54:	4a15      	ldr	r2, [pc, #84]	; (8012fac <xTaskPriorityInherit+0x108>)
 8012f56:	6013      	str	r3, [r2, #0]
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	009b      	lsls	r3, r3, #2
 8012f60:	4413      	add	r3, r2
 8012f62:	009b      	lsls	r3, r3, #2
 8012f64:	4a10      	ldr	r2, [pc, #64]	; (8012fa8 <xTaskPriorityInherit+0x104>)
 8012f66:	441a      	add	r2, r3
 8012f68:	68bb      	ldr	r3, [r7, #8]
 8012f6a:	3304      	adds	r3, #4
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	4610      	mov	r0, r2
 8012f70:	f7fe fc65 	bl	801183e <vListInsertEnd>
 8012f74:	e004      	b.n	8012f80 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012f76:	4b0b      	ldr	r3, [pc, #44]	; (8012fa4 <xTaskPriorityInherit+0x100>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012f80:	2301      	movs	r3, #1
 8012f82:	60fb      	str	r3, [r7, #12]
 8012f84:	e008      	b.n	8012f98 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012f86:	68bb      	ldr	r3, [r7, #8]
 8012f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f8a:	4b06      	ldr	r3, [pc, #24]	; (8012fa4 <xTaskPriorityInherit+0x100>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d201      	bcs.n	8012f98 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012f94:	2301      	movs	r3, #1
 8012f96:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012f98:	68fb      	ldr	r3, [r7, #12]
	}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3710      	adds	r7, #16
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	20000708 	.word	0x20000708
 8012fa8:	2000070c 	.word	0x2000070c
 8012fac:	20000810 	.word	0x20000810

08012fb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b086      	sub	sp, #24
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d06e      	beq.n	80130a4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012fc6:	4b3a      	ldr	r3, [pc, #232]	; (80130b0 <xTaskPriorityDisinherit+0x100>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	693a      	ldr	r2, [r7, #16]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d00a      	beq.n	8012fe6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8012fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd4:	f383 8811 	msr	BASEPRI, r3
 8012fd8:	f3bf 8f6f 	isb	sy
 8012fdc:	f3bf 8f4f 	dsb	sy
 8012fe0:	60fb      	str	r3, [r7, #12]
}
 8012fe2:	bf00      	nop
 8012fe4:	e7fe      	b.n	8012fe4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d10a      	bne.n	8013004 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8012fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff2:	f383 8811 	msr	BASEPRI, r3
 8012ff6:	f3bf 8f6f 	isb	sy
 8012ffa:	f3bf 8f4f 	dsb	sy
 8012ffe:	60bb      	str	r3, [r7, #8]
}
 8013000:	bf00      	nop
 8013002:	e7fe      	b.n	8013002 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013008:	1e5a      	subs	r2, r3, #1
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013016:	429a      	cmp	r2, r3
 8013018:	d044      	beq.n	80130a4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801301e:	2b00      	cmp	r3, #0
 8013020:	d140      	bne.n	80130a4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013022:	693b      	ldr	r3, [r7, #16]
 8013024:	3304      	adds	r3, #4
 8013026:	4618      	mov	r0, r3
 8013028:	f7fe fc64 	bl	80118f4 <uxListRemove>
 801302c:	4603      	mov	r3, r0
 801302e:	2b00      	cmp	r3, #0
 8013030:	d115      	bne.n	801305e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013036:	491f      	ldr	r1, [pc, #124]	; (80130b4 <xTaskPriorityDisinherit+0x104>)
 8013038:	4613      	mov	r3, r2
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	4413      	add	r3, r2
 801303e:	009b      	lsls	r3, r3, #2
 8013040:	440b      	add	r3, r1
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d10a      	bne.n	801305e <xTaskPriorityDisinherit+0xae>
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801304c:	2201      	movs	r2, #1
 801304e:	fa02 f303 	lsl.w	r3, r2, r3
 8013052:	43da      	mvns	r2, r3
 8013054:	4b18      	ldr	r3, [pc, #96]	; (80130b8 <xTaskPriorityDisinherit+0x108>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4013      	ands	r3, r2
 801305a:	4a17      	ldr	r2, [pc, #92]	; (80130b8 <xTaskPriorityDisinherit+0x108>)
 801305c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801306a:	f1c3 0207 	rsb	r2, r3, #7
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013076:	2201      	movs	r2, #1
 8013078:	409a      	lsls	r2, r3
 801307a:	4b0f      	ldr	r3, [pc, #60]	; (80130b8 <xTaskPriorityDisinherit+0x108>)
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	4313      	orrs	r3, r2
 8013080:	4a0d      	ldr	r2, [pc, #52]	; (80130b8 <xTaskPriorityDisinherit+0x108>)
 8013082:	6013      	str	r3, [r2, #0]
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013088:	4613      	mov	r3, r2
 801308a:	009b      	lsls	r3, r3, #2
 801308c:	4413      	add	r3, r2
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	4a08      	ldr	r2, [pc, #32]	; (80130b4 <xTaskPriorityDisinherit+0x104>)
 8013092:	441a      	add	r2, r3
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	3304      	adds	r3, #4
 8013098:	4619      	mov	r1, r3
 801309a:	4610      	mov	r0, r2
 801309c:	f7fe fbcf 	bl	801183e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80130a0:	2301      	movs	r3, #1
 80130a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80130a4:	697b      	ldr	r3, [r7, #20]
	}
 80130a6:	4618      	mov	r0, r3
 80130a8:	3718      	adds	r7, #24
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	20000708 	.word	0x20000708
 80130b4:	2000070c 	.word	0x2000070c
 80130b8:	20000810 	.word	0x20000810

080130bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b088      	sub	sp, #32
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80130ca:	2301      	movs	r3, #1
 80130cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	f000 8088 	beq.w	80131e6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80130d6:	69bb      	ldr	r3, [r7, #24]
 80130d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d10a      	bne.n	80130f4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80130de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e2:	f383 8811 	msr	BASEPRI, r3
 80130e6:	f3bf 8f6f 	isb	sy
 80130ea:	f3bf 8f4f 	dsb	sy
 80130ee:	60fb      	str	r3, [r7, #12]
}
 80130f0:	bf00      	nop
 80130f2:	e7fe      	b.n	80130f2 <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80130f4:	69bb      	ldr	r3, [r7, #24]
 80130f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80130f8:	683a      	ldr	r2, [r7, #0]
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d902      	bls.n	8013104 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80130fe:	683b      	ldr	r3, [r7, #0]
 8013100:	61fb      	str	r3, [r7, #28]
 8013102:	e002      	b.n	801310a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013104:	69bb      	ldr	r3, [r7, #24]
 8013106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013108:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801310e:	69fa      	ldr	r2, [r7, #28]
 8013110:	429a      	cmp	r2, r3
 8013112:	d068      	beq.n	80131e6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013114:	69bb      	ldr	r3, [r7, #24]
 8013116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013118:	697a      	ldr	r2, [r7, #20]
 801311a:	429a      	cmp	r2, r3
 801311c:	d163      	bne.n	80131e6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801311e:	4b34      	ldr	r3, [pc, #208]	; (80131f0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	69ba      	ldr	r2, [r7, #24]
 8013124:	429a      	cmp	r2, r3
 8013126:	d10a      	bne.n	801313e <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8013128:	f04f 0350 	mov.w	r3, #80	; 0x50
 801312c:	f383 8811 	msr	BASEPRI, r3
 8013130:	f3bf 8f6f 	isb	sy
 8013134:	f3bf 8f4f 	dsb	sy
 8013138:	60bb      	str	r3, [r7, #8]
}
 801313a:	bf00      	nop
 801313c:	e7fe      	b.n	801313c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801313e:	69bb      	ldr	r3, [r7, #24]
 8013140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013142:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013144:	69bb      	ldr	r3, [r7, #24]
 8013146:	69fa      	ldr	r2, [r7, #28]
 8013148:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801314a:	69bb      	ldr	r3, [r7, #24]
 801314c:	699b      	ldr	r3, [r3, #24]
 801314e:	2b00      	cmp	r3, #0
 8013150:	db04      	blt.n	801315c <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013152:	69fb      	ldr	r3, [r7, #28]
 8013154:	f1c3 0207 	rsb	r2, r3, #7
 8013158:	69bb      	ldr	r3, [r7, #24]
 801315a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801315c:	69bb      	ldr	r3, [r7, #24]
 801315e:	6959      	ldr	r1, [r3, #20]
 8013160:	693a      	ldr	r2, [r7, #16]
 8013162:	4613      	mov	r3, r2
 8013164:	009b      	lsls	r3, r3, #2
 8013166:	4413      	add	r3, r2
 8013168:	009b      	lsls	r3, r3, #2
 801316a:	4a22      	ldr	r2, [pc, #136]	; (80131f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801316c:	4413      	add	r3, r2
 801316e:	4299      	cmp	r1, r3
 8013170:	d101      	bne.n	8013176 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8013172:	2301      	movs	r3, #1
 8013174:	e000      	b.n	8013178 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8013176:	2300      	movs	r3, #0
 8013178:	2b00      	cmp	r3, #0
 801317a:	d034      	beq.n	80131e6 <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801317c:	69bb      	ldr	r3, [r7, #24]
 801317e:	3304      	adds	r3, #4
 8013180:	4618      	mov	r0, r3
 8013182:	f7fe fbb7 	bl	80118f4 <uxListRemove>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d115      	bne.n	80131b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013190:	4918      	ldr	r1, [pc, #96]	; (80131f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013192:	4613      	mov	r3, r2
 8013194:	009b      	lsls	r3, r3, #2
 8013196:	4413      	add	r3, r2
 8013198:	009b      	lsls	r3, r3, #2
 801319a:	440b      	add	r3, r1
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d10a      	bne.n	80131b8 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131a6:	2201      	movs	r2, #1
 80131a8:	fa02 f303 	lsl.w	r3, r2, r3
 80131ac:	43da      	mvns	r2, r3
 80131ae:	4b12      	ldr	r3, [pc, #72]	; (80131f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	4013      	ands	r3, r2
 80131b4:	4a10      	ldr	r2, [pc, #64]	; (80131f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80131b6:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80131b8:	69bb      	ldr	r3, [r7, #24]
 80131ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131bc:	2201      	movs	r2, #1
 80131be:	409a      	lsls	r2, r3
 80131c0:	4b0d      	ldr	r3, [pc, #52]	; (80131f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80131c2:	681b      	ldr	r3, [r3, #0]
 80131c4:	4313      	orrs	r3, r2
 80131c6:	4a0c      	ldr	r2, [pc, #48]	; (80131f8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80131c8:	6013      	str	r3, [r2, #0]
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131ce:	4613      	mov	r3, r2
 80131d0:	009b      	lsls	r3, r3, #2
 80131d2:	4413      	add	r3, r2
 80131d4:	009b      	lsls	r3, r3, #2
 80131d6:	4a07      	ldr	r2, [pc, #28]	; (80131f4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80131d8:	441a      	add	r2, r3
 80131da:	69bb      	ldr	r3, [r7, #24]
 80131dc:	3304      	adds	r3, #4
 80131de:	4619      	mov	r1, r3
 80131e0:	4610      	mov	r0, r2
 80131e2:	f7fe fb2c 	bl	801183e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80131e6:	bf00      	nop
 80131e8:	3720      	adds	r7, #32
 80131ea:	46bd      	mov	sp, r7
 80131ec:	bd80      	pop	{r7, pc}
 80131ee:	bf00      	nop
 80131f0:	20000708 	.word	0x20000708
 80131f4:	2000070c 	.word	0x2000070c
 80131f8:	20000810 	.word	0x20000810

080131fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80131fc:	b480      	push	{r7}
 80131fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013200:	4b07      	ldr	r3, [pc, #28]	; (8013220 <pvTaskIncrementMutexHeldCount+0x24>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d004      	beq.n	8013212 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013208:	4b05      	ldr	r3, [pc, #20]	; (8013220 <pvTaskIncrementMutexHeldCount+0x24>)
 801320a:	681b      	ldr	r3, [r3, #0]
 801320c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801320e:	3201      	adds	r2, #1
 8013210:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8013212:	4b03      	ldr	r3, [pc, #12]	; (8013220 <pvTaskIncrementMutexHeldCount+0x24>)
 8013214:	681b      	ldr	r3, [r3, #0]
	}
 8013216:	4618      	mov	r0, r3
 8013218:	46bd      	mov	sp, r7
 801321a:	bc80      	pop	{r7}
 801321c:	4770      	bx	lr
 801321e:	bf00      	nop
 8013220:	20000708 	.word	0x20000708

08013224 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013224:	b580      	push	{r7, lr}
 8013226:	b084      	sub	sp, #16
 8013228:	af00      	add	r7, sp, #0
 801322a:	6078      	str	r0, [r7, #4]
 801322c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801322e:	4b29      	ldr	r3, [pc, #164]	; (80132d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013234:	4b28      	ldr	r3, [pc, #160]	; (80132d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	3304      	adds	r3, #4
 801323a:	4618      	mov	r0, r3
 801323c:	f7fe fb5a 	bl	80118f4 <uxListRemove>
 8013240:	4603      	mov	r3, r0
 8013242:	2b00      	cmp	r3, #0
 8013244:	d10b      	bne.n	801325e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8013246:	4b24      	ldr	r3, [pc, #144]	; (80132d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013248:	681b      	ldr	r3, [r3, #0]
 801324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801324c:	2201      	movs	r2, #1
 801324e:	fa02 f303 	lsl.w	r3, r2, r3
 8013252:	43da      	mvns	r2, r3
 8013254:	4b21      	ldr	r3, [pc, #132]	; (80132dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	4013      	ands	r3, r2
 801325a:	4a20      	ldr	r2, [pc, #128]	; (80132dc <prvAddCurrentTaskToDelayedList+0xb8>)
 801325c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013264:	d10a      	bne.n	801327c <prvAddCurrentTaskToDelayedList+0x58>
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d007      	beq.n	801327c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801326c:	4b1a      	ldr	r3, [pc, #104]	; (80132d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	3304      	adds	r3, #4
 8013272:	4619      	mov	r1, r3
 8013274:	481a      	ldr	r0, [pc, #104]	; (80132e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8013276:	f7fe fae2 	bl	801183e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801327a:	e026      	b.n	80132ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801327c:	68fa      	ldr	r2, [r7, #12]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	4413      	add	r3, r2
 8013282:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013284:	4b14      	ldr	r3, [pc, #80]	; (80132d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	68ba      	ldr	r2, [r7, #8]
 801328a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801328c:	68ba      	ldr	r2, [r7, #8]
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	429a      	cmp	r2, r3
 8013292:	d209      	bcs.n	80132a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013294:	4b13      	ldr	r3, [pc, #76]	; (80132e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013296:	681a      	ldr	r2, [r3, #0]
 8013298:	4b0f      	ldr	r3, [pc, #60]	; (80132d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	3304      	adds	r3, #4
 801329e:	4619      	mov	r1, r3
 80132a0:	4610      	mov	r0, r2
 80132a2:	f7fe faef 	bl	8011884 <vListInsert>
}
 80132a6:	e010      	b.n	80132ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80132a8:	4b0f      	ldr	r3, [pc, #60]	; (80132e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80132aa:	681a      	ldr	r2, [r3, #0]
 80132ac:	4b0a      	ldr	r3, [pc, #40]	; (80132d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	3304      	adds	r3, #4
 80132b2:	4619      	mov	r1, r3
 80132b4:	4610      	mov	r0, r2
 80132b6:	f7fe fae5 	bl	8011884 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80132ba:	4b0c      	ldr	r3, [pc, #48]	; (80132ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	68ba      	ldr	r2, [r7, #8]
 80132c0:	429a      	cmp	r2, r3
 80132c2:	d202      	bcs.n	80132ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80132c4:	4a09      	ldr	r2, [pc, #36]	; (80132ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80132c6:	68bb      	ldr	r3, [r7, #8]
 80132c8:	6013      	str	r3, [r2, #0]
}
 80132ca:	bf00      	nop
 80132cc:	3710      	adds	r7, #16
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop
 80132d4:	2000080c 	.word	0x2000080c
 80132d8:	20000708 	.word	0x20000708
 80132dc:	20000810 	.word	0x20000810
 80132e0:	200007f4 	.word	0x200007f4
 80132e4:	200007c4 	.word	0x200007c4
 80132e8:	200007c0 	.word	0x200007c0
 80132ec:	20000828 	.word	0x20000828

080132f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80132f0:	b480      	push	{r7}
 80132f2:	b085      	sub	sp, #20
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	60f8      	str	r0, [r7, #12]
 80132f8:	60b9      	str	r1, [r7, #8]
 80132fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	3b04      	subs	r3, #4
 8013300:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8013302:	68fb      	ldr	r3, [r7, #12]
 8013304:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	3b04      	subs	r3, #4
 801330e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	f023 0201 	bic.w	r2, r3, #1
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	3b04      	subs	r3, #4
 801331e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013320:	4a08      	ldr	r2, [pc, #32]	; (8013344 <pxPortInitialiseStack+0x54>)
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	3b14      	subs	r3, #20
 801332a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	3b20      	subs	r3, #32
 8013336:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013338:	68fb      	ldr	r3, [r7, #12]
}
 801333a:	4618      	mov	r0, r3
 801333c:	3714      	adds	r7, #20
 801333e:	46bd      	mov	sp, r7
 8013340:	bc80      	pop	{r7}
 8013342:	4770      	bx	lr
 8013344:	08013349 	.word	0x08013349

08013348 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013348:	b480      	push	{r7}
 801334a:	b085      	sub	sp, #20
 801334c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801334e:	2300      	movs	r3, #0
 8013350:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8013352:	4b12      	ldr	r3, [pc, #72]	; (801339c <prvTaskExitError+0x54>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801335a:	d00a      	beq.n	8013372 <prvTaskExitError+0x2a>
	__asm volatile
 801335c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013360:	f383 8811 	msr	BASEPRI, r3
 8013364:	f3bf 8f6f 	isb	sy
 8013368:	f3bf 8f4f 	dsb	sy
 801336c:	60fb      	str	r3, [r7, #12]
}
 801336e:	bf00      	nop
 8013370:	e7fe      	b.n	8013370 <prvTaskExitError+0x28>
	__asm volatile
 8013372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013376:	f383 8811 	msr	BASEPRI, r3
 801337a:	f3bf 8f6f 	isb	sy
 801337e:	f3bf 8f4f 	dsb	sy
 8013382:	60bb      	str	r3, [r7, #8]
}
 8013384:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013386:	bf00      	nop
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d0fc      	beq.n	8013388 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801338e:	bf00      	nop
 8013390:	bf00      	nop
 8013392:	3714      	adds	r7, #20
 8013394:	46bd      	mov	sp, r7
 8013396:	bc80      	pop	{r7}
 8013398:	4770      	bx	lr
 801339a:	bf00      	nop
 801339c:	20000084 	.word	0x20000084

080133a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80133a0:	4b07      	ldr	r3, [pc, #28]	; (80133c0 <pxCurrentTCBConst2>)
 80133a2:	6819      	ldr	r1, [r3, #0]
 80133a4:	6808      	ldr	r0, [r1, #0]
 80133a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80133aa:	f380 8809 	msr	PSP, r0
 80133ae:	f3bf 8f6f 	isb	sy
 80133b2:	f04f 0000 	mov.w	r0, #0
 80133b6:	f380 8811 	msr	BASEPRI, r0
 80133ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80133be:	4770      	bx	lr

080133c0 <pxCurrentTCBConst2>:
 80133c0:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80133c4:	bf00      	nop
 80133c6:	bf00      	nop

080133c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80133c8:	4806      	ldr	r0, [pc, #24]	; (80133e4 <prvPortStartFirstTask+0x1c>)
 80133ca:	6800      	ldr	r0, [r0, #0]
 80133cc:	6800      	ldr	r0, [r0, #0]
 80133ce:	f380 8808 	msr	MSP, r0
 80133d2:	b662      	cpsie	i
 80133d4:	b661      	cpsie	f
 80133d6:	f3bf 8f4f 	dsb	sy
 80133da:	f3bf 8f6f 	isb	sy
 80133de:	df00      	svc	0
 80133e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80133e2:	bf00      	nop
 80133e4:	e000ed08 	.word	0xe000ed08

080133e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b084      	sub	sp, #16
 80133ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80133ee:	4b32      	ldr	r3, [pc, #200]	; (80134b8 <xPortStartScheduler+0xd0>)
 80133f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	781b      	ldrb	r3, [r3, #0]
 80133f6:	b2db      	uxtb	r3, r3
 80133f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	22ff      	movs	r2, #255	; 0xff
 80133fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	b2db      	uxtb	r3, r3
 8013406:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013408:	78fb      	ldrb	r3, [r7, #3]
 801340a:	b2db      	uxtb	r3, r3
 801340c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013410:	b2da      	uxtb	r2, r3
 8013412:	4b2a      	ldr	r3, [pc, #168]	; (80134bc <xPortStartScheduler+0xd4>)
 8013414:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013416:	4b2a      	ldr	r3, [pc, #168]	; (80134c0 <xPortStartScheduler+0xd8>)
 8013418:	2207      	movs	r2, #7
 801341a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801341c:	e009      	b.n	8013432 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 801341e:	4b28      	ldr	r3, [pc, #160]	; (80134c0 <xPortStartScheduler+0xd8>)
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	3b01      	subs	r3, #1
 8013424:	4a26      	ldr	r2, [pc, #152]	; (80134c0 <xPortStartScheduler+0xd8>)
 8013426:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013428:	78fb      	ldrb	r3, [r7, #3]
 801342a:	b2db      	uxtb	r3, r3
 801342c:	005b      	lsls	r3, r3, #1
 801342e:	b2db      	uxtb	r3, r3
 8013430:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013432:	78fb      	ldrb	r3, [r7, #3]
 8013434:	b2db      	uxtb	r3, r3
 8013436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801343a:	2b80      	cmp	r3, #128	; 0x80
 801343c:	d0ef      	beq.n	801341e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801343e:	4b20      	ldr	r3, [pc, #128]	; (80134c0 <xPortStartScheduler+0xd8>)
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	f1c3 0307 	rsb	r3, r3, #7
 8013446:	2b04      	cmp	r3, #4
 8013448:	d00a      	beq.n	8013460 <xPortStartScheduler+0x78>
	__asm volatile
 801344a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801344e:	f383 8811 	msr	BASEPRI, r3
 8013452:	f3bf 8f6f 	isb	sy
 8013456:	f3bf 8f4f 	dsb	sy
 801345a:	60bb      	str	r3, [r7, #8]
}
 801345c:	bf00      	nop
 801345e:	e7fe      	b.n	801345e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8013460:	4b17      	ldr	r3, [pc, #92]	; (80134c0 <xPortStartScheduler+0xd8>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	021b      	lsls	r3, r3, #8
 8013466:	4a16      	ldr	r2, [pc, #88]	; (80134c0 <xPortStartScheduler+0xd8>)
 8013468:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801346a:	4b15      	ldr	r3, [pc, #84]	; (80134c0 <xPortStartScheduler+0xd8>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013472:	4a13      	ldr	r2, [pc, #76]	; (80134c0 <xPortStartScheduler+0xd8>)
 8013474:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	b2da      	uxtb	r2, r3
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801347e:	4b11      	ldr	r3, [pc, #68]	; (80134c4 <xPortStartScheduler+0xdc>)
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	4a10      	ldr	r2, [pc, #64]	; (80134c4 <xPortStartScheduler+0xdc>)
 8013484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013488:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801348a:	4b0e      	ldr	r3, [pc, #56]	; (80134c4 <xPortStartScheduler+0xdc>)
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	4a0d      	ldr	r2, [pc, #52]	; (80134c4 <xPortStartScheduler+0xdc>)
 8013490:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013494:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013496:	f000 f8b9 	bl	801360c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801349a:	4b0b      	ldr	r3, [pc, #44]	; (80134c8 <xPortStartScheduler+0xe0>)
 801349c:	2200      	movs	r2, #0
 801349e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80134a0:	f7ff ff92 	bl	80133c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80134a4:	f7ff fa5e 	bl	8012964 <vTaskSwitchContext>
	prvTaskExitError();
 80134a8:	f7ff ff4e 	bl	8013348 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80134ac:	2300      	movs	r3, #0
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3710      	adds	r7, #16
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	e000e400 	.word	0xe000e400
 80134bc:	20000834 	.word	0x20000834
 80134c0:	20000838 	.word	0x20000838
 80134c4:	e000ed20 	.word	0xe000ed20
 80134c8:	20000084 	.word	0x20000084

080134cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80134cc:	b480      	push	{r7}
 80134ce:	b083      	sub	sp, #12
 80134d0:	af00      	add	r7, sp, #0
	__asm volatile
 80134d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d6:	f383 8811 	msr	BASEPRI, r3
 80134da:	f3bf 8f6f 	isb	sy
 80134de:	f3bf 8f4f 	dsb	sy
 80134e2:	607b      	str	r3, [r7, #4]
}
 80134e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80134e6:	4b0f      	ldr	r3, [pc, #60]	; (8013524 <vPortEnterCritical+0x58>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	3301      	adds	r3, #1
 80134ec:	4a0d      	ldr	r2, [pc, #52]	; (8013524 <vPortEnterCritical+0x58>)
 80134ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80134f0:	4b0c      	ldr	r3, [pc, #48]	; (8013524 <vPortEnterCritical+0x58>)
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	2b01      	cmp	r3, #1
 80134f6:	d10f      	bne.n	8013518 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80134f8:	4b0b      	ldr	r3, [pc, #44]	; (8013528 <vPortEnterCritical+0x5c>)
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d00a      	beq.n	8013518 <vPortEnterCritical+0x4c>
	__asm volatile
 8013502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013506:	f383 8811 	msr	BASEPRI, r3
 801350a:	f3bf 8f6f 	isb	sy
 801350e:	f3bf 8f4f 	dsb	sy
 8013512:	603b      	str	r3, [r7, #0]
}
 8013514:	bf00      	nop
 8013516:	e7fe      	b.n	8013516 <vPortEnterCritical+0x4a>
	}
}
 8013518:	bf00      	nop
 801351a:	370c      	adds	r7, #12
 801351c:	46bd      	mov	sp, r7
 801351e:	bc80      	pop	{r7}
 8013520:	4770      	bx	lr
 8013522:	bf00      	nop
 8013524:	20000084 	.word	0x20000084
 8013528:	e000ed04 	.word	0xe000ed04

0801352c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013532:	4b11      	ldr	r3, [pc, #68]	; (8013578 <vPortExitCritical+0x4c>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d10a      	bne.n	8013550 <vPortExitCritical+0x24>
	__asm volatile
 801353a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801353e:	f383 8811 	msr	BASEPRI, r3
 8013542:	f3bf 8f6f 	isb	sy
 8013546:	f3bf 8f4f 	dsb	sy
 801354a:	607b      	str	r3, [r7, #4]
}
 801354c:	bf00      	nop
 801354e:	e7fe      	b.n	801354e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013550:	4b09      	ldr	r3, [pc, #36]	; (8013578 <vPortExitCritical+0x4c>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	3b01      	subs	r3, #1
 8013556:	4a08      	ldr	r2, [pc, #32]	; (8013578 <vPortExitCritical+0x4c>)
 8013558:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801355a:	4b07      	ldr	r3, [pc, #28]	; (8013578 <vPortExitCritical+0x4c>)
 801355c:	681b      	ldr	r3, [r3, #0]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d105      	bne.n	801356e <vPortExitCritical+0x42>
 8013562:	2300      	movs	r3, #0
 8013564:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	f383 8811 	msr	BASEPRI, r3
}
 801356c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801356e:	bf00      	nop
 8013570:	370c      	adds	r7, #12
 8013572:	46bd      	mov	sp, r7
 8013574:	bc80      	pop	{r7}
 8013576:	4770      	bx	lr
 8013578:	20000084 	.word	0x20000084
 801357c:	00000000 	.word	0x00000000

08013580 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013580:	f3ef 8009 	mrs	r0, PSP
 8013584:	f3bf 8f6f 	isb	sy
 8013588:	4b0d      	ldr	r3, [pc, #52]	; (80135c0 <pxCurrentTCBConst>)
 801358a:	681a      	ldr	r2, [r3, #0]
 801358c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8013590:	6010      	str	r0, [r2, #0]
 8013592:	e92d 4008 	stmdb	sp!, {r3, lr}
 8013596:	f04f 0050 	mov.w	r0, #80	; 0x50
 801359a:	f380 8811 	msr	BASEPRI, r0
 801359e:	f7ff f9e1 	bl	8012964 <vTaskSwitchContext>
 80135a2:	f04f 0000 	mov.w	r0, #0
 80135a6:	f380 8811 	msr	BASEPRI, r0
 80135aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80135ae:	6819      	ldr	r1, [r3, #0]
 80135b0:	6808      	ldr	r0, [r1, #0]
 80135b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80135b6:	f380 8809 	msr	PSP, r0
 80135ba:	f3bf 8f6f 	isb	sy
 80135be:	4770      	bx	lr

080135c0 <pxCurrentTCBConst>:
 80135c0:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80135c4:	bf00      	nop
 80135c6:	bf00      	nop

080135c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
	__asm volatile
 80135ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d2:	f383 8811 	msr	BASEPRI, r3
 80135d6:	f3bf 8f6f 	isb	sy
 80135da:	f3bf 8f4f 	dsb	sy
 80135de:	607b      	str	r3, [r7, #4]
}
 80135e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80135e2:	f7ff f901 	bl	80127e8 <xTaskIncrementTick>
 80135e6:	4603      	mov	r3, r0
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d003      	beq.n	80135f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80135ec:	4b06      	ldr	r3, [pc, #24]	; (8013608 <xPortSysTickHandler+0x40>)
 80135ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80135f2:	601a      	str	r2, [r3, #0]
 80135f4:	2300      	movs	r3, #0
 80135f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80135f8:	683b      	ldr	r3, [r7, #0]
 80135fa:	f383 8811 	msr	BASEPRI, r3
}
 80135fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013600:	bf00      	nop
 8013602:	3708      	adds	r7, #8
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	e000ed04 	.word	0xe000ed04

0801360c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801360c:	b480      	push	{r7}
 801360e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013610:	4b0a      	ldr	r3, [pc, #40]	; (801363c <vPortSetupTimerInterrupt+0x30>)
 8013612:	2200      	movs	r2, #0
 8013614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013616:	4b0a      	ldr	r3, [pc, #40]	; (8013640 <vPortSetupTimerInterrupt+0x34>)
 8013618:	2200      	movs	r2, #0
 801361a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801361c:	4b09      	ldr	r3, [pc, #36]	; (8013644 <vPortSetupTimerInterrupt+0x38>)
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	4a09      	ldr	r2, [pc, #36]	; (8013648 <vPortSetupTimerInterrupt+0x3c>)
 8013622:	fba2 2303 	umull	r2, r3, r2, r3
 8013626:	099b      	lsrs	r3, r3, #6
 8013628:	4a08      	ldr	r2, [pc, #32]	; (801364c <vPortSetupTimerInterrupt+0x40>)
 801362a:	3b01      	subs	r3, #1
 801362c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801362e:	4b03      	ldr	r3, [pc, #12]	; (801363c <vPortSetupTimerInterrupt+0x30>)
 8013630:	2207      	movs	r2, #7
 8013632:	601a      	str	r2, [r3, #0]
}
 8013634:	bf00      	nop
 8013636:	46bd      	mov	sp, r7
 8013638:	bc80      	pop	{r7}
 801363a:	4770      	bx	lr
 801363c:	e000e010 	.word	0xe000e010
 8013640:	e000e018 	.word	0xe000e018
 8013644:	20000078 	.word	0x20000078
 8013648:	10624dd3 	.word	0x10624dd3
 801364c:	e000e014 	.word	0xe000e014

08013650 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013650:	b480      	push	{r7}
 8013652:	b085      	sub	sp, #20
 8013654:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013656:	f3ef 8305 	mrs	r3, IPSR
 801365a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2b0f      	cmp	r3, #15
 8013660:	d914      	bls.n	801368c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013662:	4a16      	ldr	r2, [pc, #88]	; (80136bc <vPortValidateInterruptPriority+0x6c>)
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	4413      	add	r3, r2
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801366c:	4b14      	ldr	r3, [pc, #80]	; (80136c0 <vPortValidateInterruptPriority+0x70>)
 801366e:	781b      	ldrb	r3, [r3, #0]
 8013670:	7afa      	ldrb	r2, [r7, #11]
 8013672:	429a      	cmp	r2, r3
 8013674:	d20a      	bcs.n	801368c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8013676:	f04f 0350 	mov.w	r3, #80	; 0x50
 801367a:	f383 8811 	msr	BASEPRI, r3
 801367e:	f3bf 8f6f 	isb	sy
 8013682:	f3bf 8f4f 	dsb	sy
 8013686:	607b      	str	r3, [r7, #4]
}
 8013688:	bf00      	nop
 801368a:	e7fe      	b.n	801368a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801368c:	4b0d      	ldr	r3, [pc, #52]	; (80136c4 <vPortValidateInterruptPriority+0x74>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013694:	4b0c      	ldr	r3, [pc, #48]	; (80136c8 <vPortValidateInterruptPriority+0x78>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	429a      	cmp	r2, r3
 801369a:	d90a      	bls.n	80136b2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a0:	f383 8811 	msr	BASEPRI, r3
 80136a4:	f3bf 8f6f 	isb	sy
 80136a8:	f3bf 8f4f 	dsb	sy
 80136ac:	603b      	str	r3, [r7, #0]
}
 80136ae:	bf00      	nop
 80136b0:	e7fe      	b.n	80136b0 <vPortValidateInterruptPriority+0x60>
	}
 80136b2:	bf00      	nop
 80136b4:	3714      	adds	r7, #20
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bc80      	pop	{r7}
 80136ba:	4770      	bx	lr
 80136bc:	e000e3f0 	.word	0xe000e3f0
 80136c0:	20000834 	.word	0x20000834
 80136c4:	e000ed0c 	.word	0xe000ed0c
 80136c8:	20000838 	.word	0x20000838

080136cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b08a      	sub	sp, #40	; 0x28
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80136d4:	2300      	movs	r3, #0
 80136d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80136d8:	f7fe ffdc 	bl	8012694 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80136dc:	4b58      	ldr	r3, [pc, #352]	; (8013840 <pvPortMalloc+0x174>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d101      	bne.n	80136e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80136e4:	f000 f910 	bl	8013908 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80136e8:	4b56      	ldr	r3, [pc, #344]	; (8013844 <pvPortMalloc+0x178>)
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	4013      	ands	r3, r2
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	f040 808e 	bne.w	8013812 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d01d      	beq.n	8013738 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80136fc:	2208      	movs	r2, #8
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	4413      	add	r3, r2
 8013702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f003 0307 	and.w	r3, r3, #7
 801370a:	2b00      	cmp	r3, #0
 801370c:	d014      	beq.n	8013738 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	f023 0307 	bic.w	r3, r3, #7
 8013714:	3308      	adds	r3, #8
 8013716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f003 0307 	and.w	r3, r3, #7
 801371e:	2b00      	cmp	r3, #0
 8013720:	d00a      	beq.n	8013738 <pvPortMalloc+0x6c>
	__asm volatile
 8013722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013726:	f383 8811 	msr	BASEPRI, r3
 801372a:	f3bf 8f6f 	isb	sy
 801372e:	f3bf 8f4f 	dsb	sy
 8013732:	617b      	str	r3, [r7, #20]
}
 8013734:	bf00      	nop
 8013736:	e7fe      	b.n	8013736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d069      	beq.n	8013812 <pvPortMalloc+0x146>
 801373e:	4b42      	ldr	r3, [pc, #264]	; (8013848 <pvPortMalloc+0x17c>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	429a      	cmp	r2, r3
 8013746:	d864      	bhi.n	8013812 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013748:	4b40      	ldr	r3, [pc, #256]	; (801384c <pvPortMalloc+0x180>)
 801374a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801374c:	4b3f      	ldr	r3, [pc, #252]	; (801384c <pvPortMalloc+0x180>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013752:	e004      	b.n	801375e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8013754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013756:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013760:	685b      	ldr	r3, [r3, #4]
 8013762:	687a      	ldr	r2, [r7, #4]
 8013764:	429a      	cmp	r2, r3
 8013766:	d903      	bls.n	8013770 <pvPortMalloc+0xa4>
 8013768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d1f1      	bne.n	8013754 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013770:	4b33      	ldr	r3, [pc, #204]	; (8013840 <pvPortMalloc+0x174>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013776:	429a      	cmp	r2, r3
 8013778:	d04b      	beq.n	8013812 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801377a:	6a3b      	ldr	r3, [r7, #32]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2208      	movs	r2, #8
 8013780:	4413      	add	r3, r2
 8013782:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013786:	681a      	ldr	r2, [r3, #0]
 8013788:	6a3b      	ldr	r3, [r7, #32]
 801378a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378e:	685a      	ldr	r2, [r3, #4]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	1ad2      	subs	r2, r2, r3
 8013794:	2308      	movs	r3, #8
 8013796:	005b      	lsls	r3, r3, #1
 8013798:	429a      	cmp	r2, r3
 801379a:	d91f      	bls.n	80137dc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801379c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	4413      	add	r3, r2
 80137a2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80137a4:	69bb      	ldr	r3, [r7, #24]
 80137a6:	f003 0307 	and.w	r3, r3, #7
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00a      	beq.n	80137c4 <pvPortMalloc+0xf8>
	__asm volatile
 80137ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b2:	f383 8811 	msr	BASEPRI, r3
 80137b6:	f3bf 8f6f 	isb	sy
 80137ba:	f3bf 8f4f 	dsb	sy
 80137be:	613b      	str	r3, [r7, #16]
}
 80137c0:	bf00      	nop
 80137c2:	e7fe      	b.n	80137c2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	685a      	ldr	r2, [r3, #4]
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	1ad2      	subs	r2, r2, r3
 80137cc:	69bb      	ldr	r3, [r7, #24]
 80137ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80137d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137d2:	687a      	ldr	r2, [r7, #4]
 80137d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80137d6:	69b8      	ldr	r0, [r7, #24]
 80137d8:	f000 f8f8 	bl	80139cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80137dc:	4b1a      	ldr	r3, [pc, #104]	; (8013848 <pvPortMalloc+0x17c>)
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137e2:	685b      	ldr	r3, [r3, #4]
 80137e4:	1ad3      	subs	r3, r2, r3
 80137e6:	4a18      	ldr	r2, [pc, #96]	; (8013848 <pvPortMalloc+0x17c>)
 80137e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80137ea:	4b17      	ldr	r3, [pc, #92]	; (8013848 <pvPortMalloc+0x17c>)
 80137ec:	681a      	ldr	r2, [r3, #0]
 80137ee:	4b18      	ldr	r3, [pc, #96]	; (8013850 <pvPortMalloc+0x184>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d203      	bcs.n	80137fe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80137f6:	4b14      	ldr	r3, [pc, #80]	; (8013848 <pvPortMalloc+0x17c>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	4a15      	ldr	r2, [pc, #84]	; (8013850 <pvPortMalloc+0x184>)
 80137fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80137fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013800:	685a      	ldr	r2, [r3, #4]
 8013802:	4b10      	ldr	r3, [pc, #64]	; (8013844 <pvPortMalloc+0x178>)
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	431a      	orrs	r2, r3
 8013808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380e:	2200      	movs	r2, #0
 8013810:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013812:	f7fe ff4d 	bl	80126b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013816:	69fb      	ldr	r3, [r7, #28]
 8013818:	f003 0307 	and.w	r3, r3, #7
 801381c:	2b00      	cmp	r3, #0
 801381e:	d00a      	beq.n	8013836 <pvPortMalloc+0x16a>
	__asm volatile
 8013820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013824:	f383 8811 	msr	BASEPRI, r3
 8013828:	f3bf 8f6f 	isb	sy
 801382c:	f3bf 8f4f 	dsb	sy
 8013830:	60fb      	str	r3, [r7, #12]
}
 8013832:	bf00      	nop
 8013834:	e7fe      	b.n	8013834 <pvPortMalloc+0x168>
	return pvReturn;
 8013836:	69fb      	ldr	r3, [r7, #28]
}
 8013838:	4618      	mov	r0, r3
 801383a:	3728      	adds	r7, #40	; 0x28
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}
 8013840:	20002784 	.word	0x20002784
 8013844:	20002790 	.word	0x20002790
 8013848:	20002788 	.word	0x20002788
 801384c:	2000277c 	.word	0x2000277c
 8013850:	2000278c 	.word	0x2000278c

08013854 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b086      	sub	sp, #24
 8013858:	af00      	add	r7, sp, #0
 801385a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d048      	beq.n	80138f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013866:	2308      	movs	r3, #8
 8013868:	425b      	negs	r3, r3
 801386a:	697a      	ldr	r2, [r7, #20]
 801386c:	4413      	add	r3, r2
 801386e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013870:	697b      	ldr	r3, [r7, #20]
 8013872:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013874:	693b      	ldr	r3, [r7, #16]
 8013876:	685a      	ldr	r2, [r3, #4]
 8013878:	4b21      	ldr	r3, [pc, #132]	; (8013900 <vPortFree+0xac>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	4013      	ands	r3, r2
 801387e:	2b00      	cmp	r3, #0
 8013880:	d10a      	bne.n	8013898 <vPortFree+0x44>
	__asm volatile
 8013882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013886:	f383 8811 	msr	BASEPRI, r3
 801388a:	f3bf 8f6f 	isb	sy
 801388e:	f3bf 8f4f 	dsb	sy
 8013892:	60fb      	str	r3, [r7, #12]
}
 8013894:	bf00      	nop
 8013896:	e7fe      	b.n	8013896 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d00a      	beq.n	80138b6 <vPortFree+0x62>
	__asm volatile
 80138a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a4:	f383 8811 	msr	BASEPRI, r3
 80138a8:	f3bf 8f6f 	isb	sy
 80138ac:	f3bf 8f4f 	dsb	sy
 80138b0:	60bb      	str	r3, [r7, #8]
}
 80138b2:	bf00      	nop
 80138b4:	e7fe      	b.n	80138b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80138b6:	693b      	ldr	r3, [r7, #16]
 80138b8:	685a      	ldr	r2, [r3, #4]
 80138ba:	4b11      	ldr	r3, [pc, #68]	; (8013900 <vPortFree+0xac>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	4013      	ands	r3, r2
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d019      	beq.n	80138f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80138c4:	693b      	ldr	r3, [r7, #16]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d115      	bne.n	80138f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	685a      	ldr	r2, [r3, #4]
 80138d0:	4b0b      	ldr	r3, [pc, #44]	; (8013900 <vPortFree+0xac>)
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	43db      	mvns	r3, r3
 80138d6:	401a      	ands	r2, r3
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80138dc:	f7fe feda 	bl	8012694 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80138e0:	693b      	ldr	r3, [r7, #16]
 80138e2:	685a      	ldr	r2, [r3, #4]
 80138e4:	4b07      	ldr	r3, [pc, #28]	; (8013904 <vPortFree+0xb0>)
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4413      	add	r3, r2
 80138ea:	4a06      	ldr	r2, [pc, #24]	; (8013904 <vPortFree+0xb0>)
 80138ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80138ee:	6938      	ldr	r0, [r7, #16]
 80138f0:	f000 f86c 	bl	80139cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80138f4:	f7fe fedc 	bl	80126b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80138f8:	bf00      	nop
 80138fa:	3718      	adds	r7, #24
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	20002790 	.word	0x20002790
 8013904:	20002788 	.word	0x20002788

08013908 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013908:	b480      	push	{r7}
 801390a:	b085      	sub	sp, #20
 801390c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801390e:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8013912:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013914:	4b27      	ldr	r3, [pc, #156]	; (80139b4 <prvHeapInit+0xac>)
 8013916:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	f003 0307 	and.w	r3, r3, #7
 801391e:	2b00      	cmp	r3, #0
 8013920:	d00c      	beq.n	801393c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	3307      	adds	r3, #7
 8013926:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	f023 0307 	bic.w	r3, r3, #7
 801392e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013930:	68ba      	ldr	r2, [r7, #8]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	1ad3      	subs	r3, r2, r3
 8013936:	4a1f      	ldr	r2, [pc, #124]	; (80139b4 <prvHeapInit+0xac>)
 8013938:	4413      	add	r3, r2
 801393a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013940:	4a1d      	ldr	r2, [pc, #116]	; (80139b8 <prvHeapInit+0xb0>)
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013946:	4b1c      	ldr	r3, [pc, #112]	; (80139b8 <prvHeapInit+0xb0>)
 8013948:	2200      	movs	r2, #0
 801394a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	68ba      	ldr	r2, [r7, #8]
 8013950:	4413      	add	r3, r2
 8013952:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013954:	2208      	movs	r2, #8
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	1a9b      	subs	r3, r3, r2
 801395a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	f023 0307 	bic.w	r3, r3, #7
 8013962:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	4a15      	ldr	r2, [pc, #84]	; (80139bc <prvHeapInit+0xb4>)
 8013968:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801396a:	4b14      	ldr	r3, [pc, #80]	; (80139bc <prvHeapInit+0xb4>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	2200      	movs	r2, #0
 8013970:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013972:	4b12      	ldr	r3, [pc, #72]	; (80139bc <prvHeapInit+0xb4>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	2200      	movs	r2, #0
 8013978:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	68fa      	ldr	r2, [r7, #12]
 8013982:	1ad2      	subs	r2, r2, r3
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013988:	4b0c      	ldr	r3, [pc, #48]	; (80139bc <prvHeapInit+0xb4>)
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	685b      	ldr	r3, [r3, #4]
 8013994:	4a0a      	ldr	r2, [pc, #40]	; (80139c0 <prvHeapInit+0xb8>)
 8013996:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	685b      	ldr	r3, [r3, #4]
 801399c:	4a09      	ldr	r2, [pc, #36]	; (80139c4 <prvHeapInit+0xbc>)
 801399e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80139a0:	4b09      	ldr	r3, [pc, #36]	; (80139c8 <prvHeapInit+0xc0>)
 80139a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80139a6:	601a      	str	r2, [r3, #0]
}
 80139a8:	bf00      	nop
 80139aa:	3714      	adds	r7, #20
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bc80      	pop	{r7}
 80139b0:	4770      	bx	lr
 80139b2:	bf00      	nop
 80139b4:	2000083c 	.word	0x2000083c
 80139b8:	2000277c 	.word	0x2000277c
 80139bc:	20002784 	.word	0x20002784
 80139c0:	2000278c 	.word	0x2000278c
 80139c4:	20002788 	.word	0x20002788
 80139c8:	20002790 	.word	0x20002790

080139cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80139cc:	b480      	push	{r7}
 80139ce:	b085      	sub	sp, #20
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80139d4:	4b27      	ldr	r3, [pc, #156]	; (8013a74 <prvInsertBlockIntoFreeList+0xa8>)
 80139d6:	60fb      	str	r3, [r7, #12]
 80139d8:	e002      	b.n	80139e0 <prvInsertBlockIntoFreeList+0x14>
 80139da:	68fb      	ldr	r3, [r7, #12]
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	60fb      	str	r3, [r7, #12]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	687a      	ldr	r2, [r7, #4]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d8f7      	bhi.n	80139da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	68ba      	ldr	r2, [r7, #8]
 80139f4:	4413      	add	r3, r2
 80139f6:	687a      	ldr	r2, [r7, #4]
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d108      	bne.n	8013a0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	685a      	ldr	r2, [r3, #4]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	685b      	ldr	r3, [r3, #4]
 8013a04:	441a      	add	r2, r3
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	685b      	ldr	r3, [r3, #4]
 8013a16:	68ba      	ldr	r2, [r7, #8]
 8013a18:	441a      	add	r2, r3
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	429a      	cmp	r2, r3
 8013a20:	d118      	bne.n	8013a54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	4b14      	ldr	r3, [pc, #80]	; (8013a78 <prvInsertBlockIntoFreeList+0xac>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d00d      	beq.n	8013a4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	685a      	ldr	r2, [r3, #4]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	685b      	ldr	r3, [r3, #4]
 8013a38:	441a      	add	r2, r3
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	681a      	ldr	r2, [r3, #0]
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	601a      	str	r2, [r3, #0]
 8013a48:	e008      	b.n	8013a5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013a4a:	4b0b      	ldr	r3, [pc, #44]	; (8013a78 <prvInsertBlockIntoFreeList+0xac>)
 8013a4c:	681a      	ldr	r2, [r3, #0]
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	601a      	str	r2, [r3, #0]
 8013a52:	e003      	b.n	8013a5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013a54:	68fb      	ldr	r3, [r7, #12]
 8013a56:	681a      	ldr	r2, [r3, #0]
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013a5c:	68fa      	ldr	r2, [r7, #12]
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d002      	beq.n	8013a6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a6a:	bf00      	nop
 8013a6c:	3714      	adds	r7, #20
 8013a6e:	46bd      	mov	sp, r7
 8013a70:	bc80      	pop	{r7}
 8013a72:	4770      	bx	lr
 8013a74:	2000277c 	.word	0x2000277c
 8013a78:	20002784 	.word	0x20002784

08013a7c <atoi>:
 8013a7c:	220a      	movs	r2, #10
 8013a7e:	2100      	movs	r1, #0
 8013a80:	f000 ba60 	b.w	8013f44 <strtol>

08013a84 <__errno>:
 8013a84:	4b01      	ldr	r3, [pc, #4]	; (8013a8c <__errno+0x8>)
 8013a86:	6818      	ldr	r0, [r3, #0]
 8013a88:	4770      	bx	lr
 8013a8a:	bf00      	nop
 8013a8c:	20000088 	.word	0x20000088

08013a90 <__libc_init_array>:
 8013a90:	b570      	push	{r4, r5, r6, lr}
 8013a92:	2600      	movs	r6, #0
 8013a94:	4d0c      	ldr	r5, [pc, #48]	; (8013ac8 <__libc_init_array+0x38>)
 8013a96:	4c0d      	ldr	r4, [pc, #52]	; (8013acc <__libc_init_array+0x3c>)
 8013a98:	1b64      	subs	r4, r4, r5
 8013a9a:	10a4      	asrs	r4, r4, #2
 8013a9c:	42a6      	cmp	r6, r4
 8013a9e:	d109      	bne.n	8013ab4 <__libc_init_array+0x24>
 8013aa0:	f000 fdb8 	bl	8014614 <_init>
 8013aa4:	2600      	movs	r6, #0
 8013aa6:	4d0a      	ldr	r5, [pc, #40]	; (8013ad0 <__libc_init_array+0x40>)
 8013aa8:	4c0a      	ldr	r4, [pc, #40]	; (8013ad4 <__libc_init_array+0x44>)
 8013aaa:	1b64      	subs	r4, r4, r5
 8013aac:	10a4      	asrs	r4, r4, #2
 8013aae:	42a6      	cmp	r6, r4
 8013ab0:	d105      	bne.n	8013abe <__libc_init_array+0x2e>
 8013ab2:	bd70      	pop	{r4, r5, r6, pc}
 8013ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ab8:	4798      	blx	r3
 8013aba:	3601      	adds	r6, #1
 8013abc:	e7ee      	b.n	8013a9c <__libc_init_array+0xc>
 8013abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8013ac2:	4798      	blx	r3
 8013ac4:	3601      	adds	r6, #1
 8013ac6:	e7f2      	b.n	8013aae <__libc_init_array+0x1e>
 8013ac8:	08014a78 	.word	0x08014a78
 8013acc:	08014a78 	.word	0x08014a78
 8013ad0:	08014a78 	.word	0x08014a78
 8013ad4:	08014a7c 	.word	0x08014a7c

08013ad8 <__retarget_lock_acquire_recursive>:
 8013ad8:	4770      	bx	lr

08013ada <__retarget_lock_release_recursive>:
 8013ada:	4770      	bx	lr

08013adc <malloc>:
 8013adc:	4b02      	ldr	r3, [pc, #8]	; (8013ae8 <malloc+0xc>)
 8013ade:	4601      	mov	r1, r0
 8013ae0:	6818      	ldr	r0, [r3, #0]
 8013ae2:	f000 b881 	b.w	8013be8 <_malloc_r>
 8013ae6:	bf00      	nop
 8013ae8:	20000088 	.word	0x20000088

08013aec <memcpy>:
 8013aec:	440a      	add	r2, r1
 8013aee:	4291      	cmp	r1, r2
 8013af0:	f100 33ff 	add.w	r3, r0, #4294967295
 8013af4:	d100      	bne.n	8013af8 <memcpy+0xc>
 8013af6:	4770      	bx	lr
 8013af8:	b510      	push	{r4, lr}
 8013afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013afe:	4291      	cmp	r1, r2
 8013b00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b04:	d1f9      	bne.n	8013afa <memcpy+0xe>
 8013b06:	bd10      	pop	{r4, pc}

08013b08 <memset>:
 8013b08:	4603      	mov	r3, r0
 8013b0a:	4402      	add	r2, r0
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d100      	bne.n	8013b12 <memset+0xa>
 8013b10:	4770      	bx	lr
 8013b12:	f803 1b01 	strb.w	r1, [r3], #1
 8013b16:	e7f9      	b.n	8013b0c <memset+0x4>

08013b18 <_free_r>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	4605      	mov	r5, r0
 8013b1c:	2900      	cmp	r1, #0
 8013b1e:	d040      	beq.n	8013ba2 <_free_r+0x8a>
 8013b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b24:	1f0c      	subs	r4, r1, #4
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	bfb8      	it	lt
 8013b2a:	18e4      	addlt	r4, r4, r3
 8013b2c:	f000 fa14 	bl	8013f58 <__malloc_lock>
 8013b30:	4a1c      	ldr	r2, [pc, #112]	; (8013ba4 <_free_r+0x8c>)
 8013b32:	6813      	ldr	r3, [r2, #0]
 8013b34:	b933      	cbnz	r3, 8013b44 <_free_r+0x2c>
 8013b36:	6063      	str	r3, [r4, #4]
 8013b38:	6014      	str	r4, [r2, #0]
 8013b3a:	4628      	mov	r0, r5
 8013b3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b40:	f000 ba10 	b.w	8013f64 <__malloc_unlock>
 8013b44:	42a3      	cmp	r3, r4
 8013b46:	d908      	bls.n	8013b5a <_free_r+0x42>
 8013b48:	6820      	ldr	r0, [r4, #0]
 8013b4a:	1821      	adds	r1, r4, r0
 8013b4c:	428b      	cmp	r3, r1
 8013b4e:	bf01      	itttt	eq
 8013b50:	6819      	ldreq	r1, [r3, #0]
 8013b52:	685b      	ldreq	r3, [r3, #4]
 8013b54:	1809      	addeq	r1, r1, r0
 8013b56:	6021      	streq	r1, [r4, #0]
 8013b58:	e7ed      	b.n	8013b36 <_free_r+0x1e>
 8013b5a:	461a      	mov	r2, r3
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	b10b      	cbz	r3, 8013b64 <_free_r+0x4c>
 8013b60:	42a3      	cmp	r3, r4
 8013b62:	d9fa      	bls.n	8013b5a <_free_r+0x42>
 8013b64:	6811      	ldr	r1, [r2, #0]
 8013b66:	1850      	adds	r0, r2, r1
 8013b68:	42a0      	cmp	r0, r4
 8013b6a:	d10b      	bne.n	8013b84 <_free_r+0x6c>
 8013b6c:	6820      	ldr	r0, [r4, #0]
 8013b6e:	4401      	add	r1, r0
 8013b70:	1850      	adds	r0, r2, r1
 8013b72:	4283      	cmp	r3, r0
 8013b74:	6011      	str	r1, [r2, #0]
 8013b76:	d1e0      	bne.n	8013b3a <_free_r+0x22>
 8013b78:	6818      	ldr	r0, [r3, #0]
 8013b7a:	685b      	ldr	r3, [r3, #4]
 8013b7c:	4401      	add	r1, r0
 8013b7e:	6011      	str	r1, [r2, #0]
 8013b80:	6053      	str	r3, [r2, #4]
 8013b82:	e7da      	b.n	8013b3a <_free_r+0x22>
 8013b84:	d902      	bls.n	8013b8c <_free_r+0x74>
 8013b86:	230c      	movs	r3, #12
 8013b88:	602b      	str	r3, [r5, #0]
 8013b8a:	e7d6      	b.n	8013b3a <_free_r+0x22>
 8013b8c:	6820      	ldr	r0, [r4, #0]
 8013b8e:	1821      	adds	r1, r4, r0
 8013b90:	428b      	cmp	r3, r1
 8013b92:	bf01      	itttt	eq
 8013b94:	6819      	ldreq	r1, [r3, #0]
 8013b96:	685b      	ldreq	r3, [r3, #4]
 8013b98:	1809      	addeq	r1, r1, r0
 8013b9a:	6021      	streq	r1, [r4, #0]
 8013b9c:	6063      	str	r3, [r4, #4]
 8013b9e:	6054      	str	r4, [r2, #4]
 8013ba0:	e7cb      	b.n	8013b3a <_free_r+0x22>
 8013ba2:	bd38      	pop	{r3, r4, r5, pc}
 8013ba4:	20002798 	.word	0x20002798

08013ba8 <sbrk_aligned>:
 8013ba8:	b570      	push	{r4, r5, r6, lr}
 8013baa:	4e0e      	ldr	r6, [pc, #56]	; (8013be4 <sbrk_aligned+0x3c>)
 8013bac:	460c      	mov	r4, r1
 8013bae:	6831      	ldr	r1, [r6, #0]
 8013bb0:	4605      	mov	r5, r0
 8013bb2:	b911      	cbnz	r1, 8013bba <sbrk_aligned+0x12>
 8013bb4:	f000 f8f6 	bl	8013da4 <_sbrk_r>
 8013bb8:	6030      	str	r0, [r6, #0]
 8013bba:	4621      	mov	r1, r4
 8013bbc:	4628      	mov	r0, r5
 8013bbe:	f000 f8f1 	bl	8013da4 <_sbrk_r>
 8013bc2:	1c43      	adds	r3, r0, #1
 8013bc4:	d00a      	beq.n	8013bdc <sbrk_aligned+0x34>
 8013bc6:	1cc4      	adds	r4, r0, #3
 8013bc8:	f024 0403 	bic.w	r4, r4, #3
 8013bcc:	42a0      	cmp	r0, r4
 8013bce:	d007      	beq.n	8013be0 <sbrk_aligned+0x38>
 8013bd0:	1a21      	subs	r1, r4, r0
 8013bd2:	4628      	mov	r0, r5
 8013bd4:	f000 f8e6 	bl	8013da4 <_sbrk_r>
 8013bd8:	3001      	adds	r0, #1
 8013bda:	d101      	bne.n	8013be0 <sbrk_aligned+0x38>
 8013bdc:	f04f 34ff 	mov.w	r4, #4294967295
 8013be0:	4620      	mov	r0, r4
 8013be2:	bd70      	pop	{r4, r5, r6, pc}
 8013be4:	2000279c 	.word	0x2000279c

08013be8 <_malloc_r>:
 8013be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bec:	1ccd      	adds	r5, r1, #3
 8013bee:	f025 0503 	bic.w	r5, r5, #3
 8013bf2:	3508      	adds	r5, #8
 8013bf4:	2d0c      	cmp	r5, #12
 8013bf6:	bf38      	it	cc
 8013bf8:	250c      	movcc	r5, #12
 8013bfa:	2d00      	cmp	r5, #0
 8013bfc:	4607      	mov	r7, r0
 8013bfe:	db01      	blt.n	8013c04 <_malloc_r+0x1c>
 8013c00:	42a9      	cmp	r1, r5
 8013c02:	d905      	bls.n	8013c10 <_malloc_r+0x28>
 8013c04:	230c      	movs	r3, #12
 8013c06:	2600      	movs	r6, #0
 8013c08:	603b      	str	r3, [r7, #0]
 8013c0a:	4630      	mov	r0, r6
 8013c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c10:	4e2e      	ldr	r6, [pc, #184]	; (8013ccc <_malloc_r+0xe4>)
 8013c12:	f000 f9a1 	bl	8013f58 <__malloc_lock>
 8013c16:	6833      	ldr	r3, [r6, #0]
 8013c18:	461c      	mov	r4, r3
 8013c1a:	bb34      	cbnz	r4, 8013c6a <_malloc_r+0x82>
 8013c1c:	4629      	mov	r1, r5
 8013c1e:	4638      	mov	r0, r7
 8013c20:	f7ff ffc2 	bl	8013ba8 <sbrk_aligned>
 8013c24:	1c43      	adds	r3, r0, #1
 8013c26:	4604      	mov	r4, r0
 8013c28:	d14d      	bne.n	8013cc6 <_malloc_r+0xde>
 8013c2a:	6834      	ldr	r4, [r6, #0]
 8013c2c:	4626      	mov	r6, r4
 8013c2e:	2e00      	cmp	r6, #0
 8013c30:	d140      	bne.n	8013cb4 <_malloc_r+0xcc>
 8013c32:	6823      	ldr	r3, [r4, #0]
 8013c34:	4631      	mov	r1, r6
 8013c36:	4638      	mov	r0, r7
 8013c38:	eb04 0803 	add.w	r8, r4, r3
 8013c3c:	f000 f8b2 	bl	8013da4 <_sbrk_r>
 8013c40:	4580      	cmp	r8, r0
 8013c42:	d13a      	bne.n	8013cba <_malloc_r+0xd2>
 8013c44:	6821      	ldr	r1, [r4, #0]
 8013c46:	3503      	adds	r5, #3
 8013c48:	1a6d      	subs	r5, r5, r1
 8013c4a:	f025 0503 	bic.w	r5, r5, #3
 8013c4e:	3508      	adds	r5, #8
 8013c50:	2d0c      	cmp	r5, #12
 8013c52:	bf38      	it	cc
 8013c54:	250c      	movcc	r5, #12
 8013c56:	4638      	mov	r0, r7
 8013c58:	4629      	mov	r1, r5
 8013c5a:	f7ff ffa5 	bl	8013ba8 <sbrk_aligned>
 8013c5e:	3001      	adds	r0, #1
 8013c60:	d02b      	beq.n	8013cba <_malloc_r+0xd2>
 8013c62:	6823      	ldr	r3, [r4, #0]
 8013c64:	442b      	add	r3, r5
 8013c66:	6023      	str	r3, [r4, #0]
 8013c68:	e00e      	b.n	8013c88 <_malloc_r+0xa0>
 8013c6a:	6822      	ldr	r2, [r4, #0]
 8013c6c:	1b52      	subs	r2, r2, r5
 8013c6e:	d41e      	bmi.n	8013cae <_malloc_r+0xc6>
 8013c70:	2a0b      	cmp	r2, #11
 8013c72:	d916      	bls.n	8013ca2 <_malloc_r+0xba>
 8013c74:	1961      	adds	r1, r4, r5
 8013c76:	42a3      	cmp	r3, r4
 8013c78:	6025      	str	r5, [r4, #0]
 8013c7a:	bf18      	it	ne
 8013c7c:	6059      	strne	r1, [r3, #4]
 8013c7e:	6863      	ldr	r3, [r4, #4]
 8013c80:	bf08      	it	eq
 8013c82:	6031      	streq	r1, [r6, #0]
 8013c84:	5162      	str	r2, [r4, r5]
 8013c86:	604b      	str	r3, [r1, #4]
 8013c88:	4638      	mov	r0, r7
 8013c8a:	f104 060b 	add.w	r6, r4, #11
 8013c8e:	f000 f969 	bl	8013f64 <__malloc_unlock>
 8013c92:	f026 0607 	bic.w	r6, r6, #7
 8013c96:	1d23      	adds	r3, r4, #4
 8013c98:	1af2      	subs	r2, r6, r3
 8013c9a:	d0b6      	beq.n	8013c0a <_malloc_r+0x22>
 8013c9c:	1b9b      	subs	r3, r3, r6
 8013c9e:	50a3      	str	r3, [r4, r2]
 8013ca0:	e7b3      	b.n	8013c0a <_malloc_r+0x22>
 8013ca2:	6862      	ldr	r2, [r4, #4]
 8013ca4:	42a3      	cmp	r3, r4
 8013ca6:	bf0c      	ite	eq
 8013ca8:	6032      	streq	r2, [r6, #0]
 8013caa:	605a      	strne	r2, [r3, #4]
 8013cac:	e7ec      	b.n	8013c88 <_malloc_r+0xa0>
 8013cae:	4623      	mov	r3, r4
 8013cb0:	6864      	ldr	r4, [r4, #4]
 8013cb2:	e7b2      	b.n	8013c1a <_malloc_r+0x32>
 8013cb4:	4634      	mov	r4, r6
 8013cb6:	6876      	ldr	r6, [r6, #4]
 8013cb8:	e7b9      	b.n	8013c2e <_malloc_r+0x46>
 8013cba:	230c      	movs	r3, #12
 8013cbc:	4638      	mov	r0, r7
 8013cbe:	603b      	str	r3, [r7, #0]
 8013cc0:	f000 f950 	bl	8013f64 <__malloc_unlock>
 8013cc4:	e7a1      	b.n	8013c0a <_malloc_r+0x22>
 8013cc6:	6025      	str	r5, [r4, #0]
 8013cc8:	e7de      	b.n	8013c88 <_malloc_r+0xa0>
 8013cca:	bf00      	nop
 8013ccc:	20002798 	.word	0x20002798

08013cd0 <cleanup_glue>:
 8013cd0:	b538      	push	{r3, r4, r5, lr}
 8013cd2:	460c      	mov	r4, r1
 8013cd4:	6809      	ldr	r1, [r1, #0]
 8013cd6:	4605      	mov	r5, r0
 8013cd8:	b109      	cbz	r1, 8013cde <cleanup_glue+0xe>
 8013cda:	f7ff fff9 	bl	8013cd0 <cleanup_glue>
 8013cde:	4621      	mov	r1, r4
 8013ce0:	4628      	mov	r0, r5
 8013ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013ce6:	f7ff bf17 	b.w	8013b18 <_free_r>
	...

08013cec <_reclaim_reent>:
 8013cec:	4b2c      	ldr	r3, [pc, #176]	; (8013da0 <_reclaim_reent+0xb4>)
 8013cee:	b570      	push	{r4, r5, r6, lr}
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	4604      	mov	r4, r0
 8013cf4:	4283      	cmp	r3, r0
 8013cf6:	d051      	beq.n	8013d9c <_reclaim_reent+0xb0>
 8013cf8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013cfa:	b143      	cbz	r3, 8013d0e <_reclaim_reent+0x22>
 8013cfc:	68db      	ldr	r3, [r3, #12]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d14a      	bne.n	8013d98 <_reclaim_reent+0xac>
 8013d02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d04:	6819      	ldr	r1, [r3, #0]
 8013d06:	b111      	cbz	r1, 8013d0e <_reclaim_reent+0x22>
 8013d08:	4620      	mov	r0, r4
 8013d0a:	f7ff ff05 	bl	8013b18 <_free_r>
 8013d0e:	6961      	ldr	r1, [r4, #20]
 8013d10:	b111      	cbz	r1, 8013d18 <_reclaim_reent+0x2c>
 8013d12:	4620      	mov	r0, r4
 8013d14:	f7ff ff00 	bl	8013b18 <_free_r>
 8013d18:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013d1a:	b111      	cbz	r1, 8013d22 <_reclaim_reent+0x36>
 8013d1c:	4620      	mov	r0, r4
 8013d1e:	f7ff fefb 	bl	8013b18 <_free_r>
 8013d22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013d24:	b111      	cbz	r1, 8013d2c <_reclaim_reent+0x40>
 8013d26:	4620      	mov	r0, r4
 8013d28:	f7ff fef6 	bl	8013b18 <_free_r>
 8013d2c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013d2e:	b111      	cbz	r1, 8013d36 <_reclaim_reent+0x4a>
 8013d30:	4620      	mov	r0, r4
 8013d32:	f7ff fef1 	bl	8013b18 <_free_r>
 8013d36:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013d38:	b111      	cbz	r1, 8013d40 <_reclaim_reent+0x54>
 8013d3a:	4620      	mov	r0, r4
 8013d3c:	f7ff feec 	bl	8013b18 <_free_r>
 8013d40:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013d42:	b111      	cbz	r1, 8013d4a <_reclaim_reent+0x5e>
 8013d44:	4620      	mov	r0, r4
 8013d46:	f7ff fee7 	bl	8013b18 <_free_r>
 8013d4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013d4c:	b111      	cbz	r1, 8013d54 <_reclaim_reent+0x68>
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f7ff fee2 	bl	8013b18 <_free_r>
 8013d54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013d56:	b111      	cbz	r1, 8013d5e <_reclaim_reent+0x72>
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f7ff fedd 	bl	8013b18 <_free_r>
 8013d5e:	69a3      	ldr	r3, [r4, #24]
 8013d60:	b1e3      	cbz	r3, 8013d9c <_reclaim_reent+0xb0>
 8013d62:	4620      	mov	r0, r4
 8013d64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013d66:	4798      	blx	r3
 8013d68:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013d6a:	b1b9      	cbz	r1, 8013d9c <_reclaim_reent+0xb0>
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d72:	f7ff bfad 	b.w	8013cd0 <cleanup_glue>
 8013d76:	5949      	ldr	r1, [r1, r5]
 8013d78:	b941      	cbnz	r1, 8013d8c <_reclaim_reent+0xa0>
 8013d7a:	3504      	adds	r5, #4
 8013d7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013d7e:	2d80      	cmp	r5, #128	; 0x80
 8013d80:	68d9      	ldr	r1, [r3, #12]
 8013d82:	d1f8      	bne.n	8013d76 <_reclaim_reent+0x8a>
 8013d84:	4620      	mov	r0, r4
 8013d86:	f7ff fec7 	bl	8013b18 <_free_r>
 8013d8a:	e7ba      	b.n	8013d02 <_reclaim_reent+0x16>
 8013d8c:	680e      	ldr	r6, [r1, #0]
 8013d8e:	4620      	mov	r0, r4
 8013d90:	f7ff fec2 	bl	8013b18 <_free_r>
 8013d94:	4631      	mov	r1, r6
 8013d96:	e7ef      	b.n	8013d78 <_reclaim_reent+0x8c>
 8013d98:	2500      	movs	r5, #0
 8013d9a:	e7ef      	b.n	8013d7c <_reclaim_reent+0x90>
 8013d9c:	bd70      	pop	{r4, r5, r6, pc}
 8013d9e:	bf00      	nop
 8013da0:	20000088 	.word	0x20000088

08013da4 <_sbrk_r>:
 8013da4:	b538      	push	{r3, r4, r5, lr}
 8013da6:	2300      	movs	r3, #0
 8013da8:	4d05      	ldr	r5, [pc, #20]	; (8013dc0 <_sbrk_r+0x1c>)
 8013daa:	4604      	mov	r4, r0
 8013dac:	4608      	mov	r0, r1
 8013dae:	602b      	str	r3, [r5, #0]
 8013db0:	f7fa fd88 	bl	800e8c4 <_sbrk>
 8013db4:	1c43      	adds	r3, r0, #1
 8013db6:	d102      	bne.n	8013dbe <_sbrk_r+0x1a>
 8013db8:	682b      	ldr	r3, [r5, #0]
 8013dba:	b103      	cbz	r3, 8013dbe <_sbrk_r+0x1a>
 8013dbc:	6023      	str	r3, [r4, #0]
 8013dbe:	bd38      	pop	{r3, r4, r5, pc}
 8013dc0:	200027a0 	.word	0x200027a0

08013dc4 <siprintf>:
 8013dc4:	b40e      	push	{r1, r2, r3}
 8013dc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013dca:	b500      	push	{lr}
 8013dcc:	b09c      	sub	sp, #112	; 0x70
 8013dce:	ab1d      	add	r3, sp, #116	; 0x74
 8013dd0:	9002      	str	r0, [sp, #8]
 8013dd2:	9006      	str	r0, [sp, #24]
 8013dd4:	9107      	str	r1, [sp, #28]
 8013dd6:	9104      	str	r1, [sp, #16]
 8013dd8:	4808      	ldr	r0, [pc, #32]	; (8013dfc <siprintf+0x38>)
 8013dda:	4909      	ldr	r1, [pc, #36]	; (8013e00 <siprintf+0x3c>)
 8013ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013de0:	9105      	str	r1, [sp, #20]
 8013de2:	6800      	ldr	r0, [r0, #0]
 8013de4:	a902      	add	r1, sp, #8
 8013de6:	9301      	str	r3, [sp, #4]
 8013de8:	f000 f91e 	bl	8014028 <_svfiprintf_r>
 8013dec:	2200      	movs	r2, #0
 8013dee:	9b02      	ldr	r3, [sp, #8]
 8013df0:	701a      	strb	r2, [r3, #0]
 8013df2:	b01c      	add	sp, #112	; 0x70
 8013df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8013df8:	b003      	add	sp, #12
 8013dfa:	4770      	bx	lr
 8013dfc:	20000088 	.word	0x20000088
 8013e00:	ffff0208 	.word	0xffff0208

08013e04 <strchr>:
 8013e04:	4603      	mov	r3, r0
 8013e06:	b2c9      	uxtb	r1, r1
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e0e:	b112      	cbz	r2, 8013e16 <strchr+0x12>
 8013e10:	428a      	cmp	r2, r1
 8013e12:	d1f9      	bne.n	8013e08 <strchr+0x4>
 8013e14:	4770      	bx	lr
 8013e16:	2900      	cmp	r1, #0
 8013e18:	bf18      	it	ne
 8013e1a:	2000      	movne	r0, #0
 8013e1c:	4770      	bx	lr

08013e1e <strstr>:
 8013e1e:	780a      	ldrb	r2, [r1, #0]
 8013e20:	b570      	push	{r4, r5, r6, lr}
 8013e22:	b96a      	cbnz	r2, 8013e40 <strstr+0x22>
 8013e24:	bd70      	pop	{r4, r5, r6, pc}
 8013e26:	429a      	cmp	r2, r3
 8013e28:	d109      	bne.n	8013e3e <strstr+0x20>
 8013e2a:	460c      	mov	r4, r1
 8013e2c:	4605      	mov	r5, r0
 8013e2e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d0f6      	beq.n	8013e24 <strstr+0x6>
 8013e36:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013e3a:	429e      	cmp	r6, r3
 8013e3c:	d0f7      	beq.n	8013e2e <strstr+0x10>
 8013e3e:	3001      	adds	r0, #1
 8013e40:	7803      	ldrb	r3, [r0, #0]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d1ef      	bne.n	8013e26 <strstr+0x8>
 8013e46:	4618      	mov	r0, r3
 8013e48:	e7ec      	b.n	8013e24 <strstr+0x6>
	...

08013e4c <_strtol_l.constprop.0>:
 8013e4c:	2b01      	cmp	r3, #1
 8013e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e52:	4680      	mov	r8, r0
 8013e54:	d001      	beq.n	8013e5a <_strtol_l.constprop.0+0xe>
 8013e56:	2b24      	cmp	r3, #36	; 0x24
 8013e58:	d906      	bls.n	8013e68 <_strtol_l.constprop.0+0x1c>
 8013e5a:	f7ff fe13 	bl	8013a84 <__errno>
 8013e5e:	2316      	movs	r3, #22
 8013e60:	6003      	str	r3, [r0, #0]
 8013e62:	2000      	movs	r0, #0
 8013e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e68:	460d      	mov	r5, r1
 8013e6a:	4f35      	ldr	r7, [pc, #212]	; (8013f40 <_strtol_l.constprop.0+0xf4>)
 8013e6c:	4628      	mov	r0, r5
 8013e6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013e72:	5de6      	ldrb	r6, [r4, r7]
 8013e74:	f016 0608 	ands.w	r6, r6, #8
 8013e78:	d1f8      	bne.n	8013e6c <_strtol_l.constprop.0+0x20>
 8013e7a:	2c2d      	cmp	r4, #45	; 0x2d
 8013e7c:	d12f      	bne.n	8013ede <_strtol_l.constprop.0+0x92>
 8013e7e:	2601      	movs	r6, #1
 8013e80:	782c      	ldrb	r4, [r5, #0]
 8013e82:	1c85      	adds	r5, r0, #2
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d057      	beq.n	8013f38 <_strtol_l.constprop.0+0xec>
 8013e88:	2b10      	cmp	r3, #16
 8013e8a:	d109      	bne.n	8013ea0 <_strtol_l.constprop.0+0x54>
 8013e8c:	2c30      	cmp	r4, #48	; 0x30
 8013e8e:	d107      	bne.n	8013ea0 <_strtol_l.constprop.0+0x54>
 8013e90:	7828      	ldrb	r0, [r5, #0]
 8013e92:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013e96:	2858      	cmp	r0, #88	; 0x58
 8013e98:	d149      	bne.n	8013f2e <_strtol_l.constprop.0+0xe2>
 8013e9a:	2310      	movs	r3, #16
 8013e9c:	786c      	ldrb	r4, [r5, #1]
 8013e9e:	3502      	adds	r5, #2
 8013ea0:	2700      	movs	r7, #0
 8013ea2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8013ea6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013eaa:	fbbe f9f3 	udiv	r9, lr, r3
 8013eae:	4638      	mov	r0, r7
 8013eb0:	fb03 ea19 	mls	sl, r3, r9, lr
 8013eb4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013eb8:	f1bc 0f09 	cmp.w	ip, #9
 8013ebc:	d814      	bhi.n	8013ee8 <_strtol_l.constprop.0+0x9c>
 8013ebe:	4664      	mov	r4, ip
 8013ec0:	42a3      	cmp	r3, r4
 8013ec2:	dd22      	ble.n	8013f0a <_strtol_l.constprop.0+0xbe>
 8013ec4:	2f00      	cmp	r7, #0
 8013ec6:	db1d      	blt.n	8013f04 <_strtol_l.constprop.0+0xb8>
 8013ec8:	4581      	cmp	r9, r0
 8013eca:	d31b      	bcc.n	8013f04 <_strtol_l.constprop.0+0xb8>
 8013ecc:	d101      	bne.n	8013ed2 <_strtol_l.constprop.0+0x86>
 8013ece:	45a2      	cmp	sl, r4
 8013ed0:	db18      	blt.n	8013f04 <_strtol_l.constprop.0+0xb8>
 8013ed2:	2701      	movs	r7, #1
 8013ed4:	fb00 4003 	mla	r0, r0, r3, r4
 8013ed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013edc:	e7ea      	b.n	8013eb4 <_strtol_l.constprop.0+0x68>
 8013ede:	2c2b      	cmp	r4, #43	; 0x2b
 8013ee0:	bf04      	itt	eq
 8013ee2:	782c      	ldrbeq	r4, [r5, #0]
 8013ee4:	1c85      	addeq	r5, r0, #2
 8013ee6:	e7cd      	b.n	8013e84 <_strtol_l.constprop.0+0x38>
 8013ee8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013eec:	f1bc 0f19 	cmp.w	ip, #25
 8013ef0:	d801      	bhi.n	8013ef6 <_strtol_l.constprop.0+0xaa>
 8013ef2:	3c37      	subs	r4, #55	; 0x37
 8013ef4:	e7e4      	b.n	8013ec0 <_strtol_l.constprop.0+0x74>
 8013ef6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013efa:	f1bc 0f19 	cmp.w	ip, #25
 8013efe:	d804      	bhi.n	8013f0a <_strtol_l.constprop.0+0xbe>
 8013f00:	3c57      	subs	r4, #87	; 0x57
 8013f02:	e7dd      	b.n	8013ec0 <_strtol_l.constprop.0+0x74>
 8013f04:	f04f 37ff 	mov.w	r7, #4294967295
 8013f08:	e7e6      	b.n	8013ed8 <_strtol_l.constprop.0+0x8c>
 8013f0a:	2f00      	cmp	r7, #0
 8013f0c:	da07      	bge.n	8013f1e <_strtol_l.constprop.0+0xd2>
 8013f0e:	2322      	movs	r3, #34	; 0x22
 8013f10:	4670      	mov	r0, lr
 8013f12:	f8c8 3000 	str.w	r3, [r8]
 8013f16:	2a00      	cmp	r2, #0
 8013f18:	d0a4      	beq.n	8013e64 <_strtol_l.constprop.0+0x18>
 8013f1a:	1e69      	subs	r1, r5, #1
 8013f1c:	e005      	b.n	8013f2a <_strtol_l.constprop.0+0xde>
 8013f1e:	b106      	cbz	r6, 8013f22 <_strtol_l.constprop.0+0xd6>
 8013f20:	4240      	negs	r0, r0
 8013f22:	2a00      	cmp	r2, #0
 8013f24:	d09e      	beq.n	8013e64 <_strtol_l.constprop.0+0x18>
 8013f26:	2f00      	cmp	r7, #0
 8013f28:	d1f7      	bne.n	8013f1a <_strtol_l.constprop.0+0xce>
 8013f2a:	6011      	str	r1, [r2, #0]
 8013f2c:	e79a      	b.n	8013e64 <_strtol_l.constprop.0+0x18>
 8013f2e:	2430      	movs	r4, #48	; 0x30
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d1b5      	bne.n	8013ea0 <_strtol_l.constprop.0+0x54>
 8013f34:	2308      	movs	r3, #8
 8013f36:	e7b3      	b.n	8013ea0 <_strtol_l.constprop.0+0x54>
 8013f38:	2c30      	cmp	r4, #48	; 0x30
 8013f3a:	d0a9      	beq.n	8013e90 <_strtol_l.constprop.0+0x44>
 8013f3c:	230a      	movs	r3, #10
 8013f3e:	e7af      	b.n	8013ea0 <_strtol_l.constprop.0+0x54>
 8013f40:	0801493d 	.word	0x0801493d

08013f44 <strtol>:
 8013f44:	4613      	mov	r3, r2
 8013f46:	460a      	mov	r2, r1
 8013f48:	4601      	mov	r1, r0
 8013f4a:	4802      	ldr	r0, [pc, #8]	; (8013f54 <strtol+0x10>)
 8013f4c:	6800      	ldr	r0, [r0, #0]
 8013f4e:	f7ff bf7d 	b.w	8013e4c <_strtol_l.constprop.0>
 8013f52:	bf00      	nop
 8013f54:	20000088 	.word	0x20000088

08013f58 <__malloc_lock>:
 8013f58:	4801      	ldr	r0, [pc, #4]	; (8013f60 <__malloc_lock+0x8>)
 8013f5a:	f7ff bdbd 	b.w	8013ad8 <__retarget_lock_acquire_recursive>
 8013f5e:	bf00      	nop
 8013f60:	20002794 	.word	0x20002794

08013f64 <__malloc_unlock>:
 8013f64:	4801      	ldr	r0, [pc, #4]	; (8013f6c <__malloc_unlock+0x8>)
 8013f66:	f7ff bdb8 	b.w	8013ada <__retarget_lock_release_recursive>
 8013f6a:	bf00      	nop
 8013f6c:	20002794 	.word	0x20002794

08013f70 <__ssputs_r>:
 8013f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f74:	688e      	ldr	r6, [r1, #8]
 8013f76:	4682      	mov	sl, r0
 8013f78:	429e      	cmp	r6, r3
 8013f7a:	460c      	mov	r4, r1
 8013f7c:	4690      	mov	r8, r2
 8013f7e:	461f      	mov	r7, r3
 8013f80:	d838      	bhi.n	8013ff4 <__ssputs_r+0x84>
 8013f82:	898a      	ldrh	r2, [r1, #12]
 8013f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013f88:	d032      	beq.n	8013ff0 <__ssputs_r+0x80>
 8013f8a:	6825      	ldr	r5, [r4, #0]
 8013f8c:	6909      	ldr	r1, [r1, #16]
 8013f8e:	3301      	adds	r3, #1
 8013f90:	eba5 0901 	sub.w	r9, r5, r1
 8013f94:	6965      	ldr	r5, [r4, #20]
 8013f96:	444b      	add	r3, r9
 8013f98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013f9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013fa0:	106d      	asrs	r5, r5, #1
 8013fa2:	429d      	cmp	r5, r3
 8013fa4:	bf38      	it	cc
 8013fa6:	461d      	movcc	r5, r3
 8013fa8:	0553      	lsls	r3, r2, #21
 8013faa:	d531      	bpl.n	8014010 <__ssputs_r+0xa0>
 8013fac:	4629      	mov	r1, r5
 8013fae:	f7ff fe1b 	bl	8013be8 <_malloc_r>
 8013fb2:	4606      	mov	r6, r0
 8013fb4:	b950      	cbnz	r0, 8013fcc <__ssputs_r+0x5c>
 8013fb6:	230c      	movs	r3, #12
 8013fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8013fbc:	f8ca 3000 	str.w	r3, [sl]
 8013fc0:	89a3      	ldrh	r3, [r4, #12]
 8013fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fc6:	81a3      	strh	r3, [r4, #12]
 8013fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fcc:	464a      	mov	r2, r9
 8013fce:	6921      	ldr	r1, [r4, #16]
 8013fd0:	f7ff fd8c 	bl	8013aec <memcpy>
 8013fd4:	89a3      	ldrh	r3, [r4, #12]
 8013fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fde:	81a3      	strh	r3, [r4, #12]
 8013fe0:	6126      	str	r6, [r4, #16]
 8013fe2:	444e      	add	r6, r9
 8013fe4:	6026      	str	r6, [r4, #0]
 8013fe6:	463e      	mov	r6, r7
 8013fe8:	6165      	str	r5, [r4, #20]
 8013fea:	eba5 0509 	sub.w	r5, r5, r9
 8013fee:	60a5      	str	r5, [r4, #8]
 8013ff0:	42be      	cmp	r6, r7
 8013ff2:	d900      	bls.n	8013ff6 <__ssputs_r+0x86>
 8013ff4:	463e      	mov	r6, r7
 8013ff6:	4632      	mov	r2, r6
 8013ff8:	4641      	mov	r1, r8
 8013ffa:	6820      	ldr	r0, [r4, #0]
 8013ffc:	f000 fab8 	bl	8014570 <memmove>
 8014000:	68a3      	ldr	r3, [r4, #8]
 8014002:	2000      	movs	r0, #0
 8014004:	1b9b      	subs	r3, r3, r6
 8014006:	60a3      	str	r3, [r4, #8]
 8014008:	6823      	ldr	r3, [r4, #0]
 801400a:	4433      	add	r3, r6
 801400c:	6023      	str	r3, [r4, #0]
 801400e:	e7db      	b.n	8013fc8 <__ssputs_r+0x58>
 8014010:	462a      	mov	r2, r5
 8014012:	f000 fac7 	bl	80145a4 <_realloc_r>
 8014016:	4606      	mov	r6, r0
 8014018:	2800      	cmp	r0, #0
 801401a:	d1e1      	bne.n	8013fe0 <__ssputs_r+0x70>
 801401c:	4650      	mov	r0, sl
 801401e:	6921      	ldr	r1, [r4, #16]
 8014020:	f7ff fd7a 	bl	8013b18 <_free_r>
 8014024:	e7c7      	b.n	8013fb6 <__ssputs_r+0x46>
	...

08014028 <_svfiprintf_r>:
 8014028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801402c:	4698      	mov	r8, r3
 801402e:	898b      	ldrh	r3, [r1, #12]
 8014030:	4607      	mov	r7, r0
 8014032:	061b      	lsls	r3, r3, #24
 8014034:	460d      	mov	r5, r1
 8014036:	4614      	mov	r4, r2
 8014038:	b09d      	sub	sp, #116	; 0x74
 801403a:	d50e      	bpl.n	801405a <_svfiprintf_r+0x32>
 801403c:	690b      	ldr	r3, [r1, #16]
 801403e:	b963      	cbnz	r3, 801405a <_svfiprintf_r+0x32>
 8014040:	2140      	movs	r1, #64	; 0x40
 8014042:	f7ff fdd1 	bl	8013be8 <_malloc_r>
 8014046:	6028      	str	r0, [r5, #0]
 8014048:	6128      	str	r0, [r5, #16]
 801404a:	b920      	cbnz	r0, 8014056 <_svfiprintf_r+0x2e>
 801404c:	230c      	movs	r3, #12
 801404e:	603b      	str	r3, [r7, #0]
 8014050:	f04f 30ff 	mov.w	r0, #4294967295
 8014054:	e0d1      	b.n	80141fa <_svfiprintf_r+0x1d2>
 8014056:	2340      	movs	r3, #64	; 0x40
 8014058:	616b      	str	r3, [r5, #20]
 801405a:	2300      	movs	r3, #0
 801405c:	9309      	str	r3, [sp, #36]	; 0x24
 801405e:	2320      	movs	r3, #32
 8014060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014064:	2330      	movs	r3, #48	; 0x30
 8014066:	f04f 0901 	mov.w	r9, #1
 801406a:	f8cd 800c 	str.w	r8, [sp, #12]
 801406e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014214 <_svfiprintf_r+0x1ec>
 8014072:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014076:	4623      	mov	r3, r4
 8014078:	469a      	mov	sl, r3
 801407a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801407e:	b10a      	cbz	r2, 8014084 <_svfiprintf_r+0x5c>
 8014080:	2a25      	cmp	r2, #37	; 0x25
 8014082:	d1f9      	bne.n	8014078 <_svfiprintf_r+0x50>
 8014084:	ebba 0b04 	subs.w	fp, sl, r4
 8014088:	d00b      	beq.n	80140a2 <_svfiprintf_r+0x7a>
 801408a:	465b      	mov	r3, fp
 801408c:	4622      	mov	r2, r4
 801408e:	4629      	mov	r1, r5
 8014090:	4638      	mov	r0, r7
 8014092:	f7ff ff6d 	bl	8013f70 <__ssputs_r>
 8014096:	3001      	adds	r0, #1
 8014098:	f000 80aa 	beq.w	80141f0 <_svfiprintf_r+0x1c8>
 801409c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801409e:	445a      	add	r2, fp
 80140a0:	9209      	str	r2, [sp, #36]	; 0x24
 80140a2:	f89a 3000 	ldrb.w	r3, [sl]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	f000 80a2 	beq.w	80141f0 <_svfiprintf_r+0x1c8>
 80140ac:	2300      	movs	r3, #0
 80140ae:	f04f 32ff 	mov.w	r2, #4294967295
 80140b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80140b6:	f10a 0a01 	add.w	sl, sl, #1
 80140ba:	9304      	str	r3, [sp, #16]
 80140bc:	9307      	str	r3, [sp, #28]
 80140be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80140c2:	931a      	str	r3, [sp, #104]	; 0x68
 80140c4:	4654      	mov	r4, sl
 80140c6:	2205      	movs	r2, #5
 80140c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140cc:	4851      	ldr	r0, [pc, #324]	; (8014214 <_svfiprintf_r+0x1ec>)
 80140ce:	f000 fa41 	bl	8014554 <memchr>
 80140d2:	9a04      	ldr	r2, [sp, #16]
 80140d4:	b9d8      	cbnz	r0, 801410e <_svfiprintf_r+0xe6>
 80140d6:	06d0      	lsls	r0, r2, #27
 80140d8:	bf44      	itt	mi
 80140da:	2320      	movmi	r3, #32
 80140dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140e0:	0711      	lsls	r1, r2, #28
 80140e2:	bf44      	itt	mi
 80140e4:	232b      	movmi	r3, #43	; 0x2b
 80140e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80140ea:	f89a 3000 	ldrb.w	r3, [sl]
 80140ee:	2b2a      	cmp	r3, #42	; 0x2a
 80140f0:	d015      	beq.n	801411e <_svfiprintf_r+0xf6>
 80140f2:	4654      	mov	r4, sl
 80140f4:	2000      	movs	r0, #0
 80140f6:	f04f 0c0a 	mov.w	ip, #10
 80140fa:	9a07      	ldr	r2, [sp, #28]
 80140fc:	4621      	mov	r1, r4
 80140fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014102:	3b30      	subs	r3, #48	; 0x30
 8014104:	2b09      	cmp	r3, #9
 8014106:	d94e      	bls.n	80141a6 <_svfiprintf_r+0x17e>
 8014108:	b1b0      	cbz	r0, 8014138 <_svfiprintf_r+0x110>
 801410a:	9207      	str	r2, [sp, #28]
 801410c:	e014      	b.n	8014138 <_svfiprintf_r+0x110>
 801410e:	eba0 0308 	sub.w	r3, r0, r8
 8014112:	fa09 f303 	lsl.w	r3, r9, r3
 8014116:	4313      	orrs	r3, r2
 8014118:	46a2      	mov	sl, r4
 801411a:	9304      	str	r3, [sp, #16]
 801411c:	e7d2      	b.n	80140c4 <_svfiprintf_r+0x9c>
 801411e:	9b03      	ldr	r3, [sp, #12]
 8014120:	1d19      	adds	r1, r3, #4
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	9103      	str	r1, [sp, #12]
 8014126:	2b00      	cmp	r3, #0
 8014128:	bfbb      	ittet	lt
 801412a:	425b      	neglt	r3, r3
 801412c:	f042 0202 	orrlt.w	r2, r2, #2
 8014130:	9307      	strge	r3, [sp, #28]
 8014132:	9307      	strlt	r3, [sp, #28]
 8014134:	bfb8      	it	lt
 8014136:	9204      	strlt	r2, [sp, #16]
 8014138:	7823      	ldrb	r3, [r4, #0]
 801413a:	2b2e      	cmp	r3, #46	; 0x2e
 801413c:	d10c      	bne.n	8014158 <_svfiprintf_r+0x130>
 801413e:	7863      	ldrb	r3, [r4, #1]
 8014140:	2b2a      	cmp	r3, #42	; 0x2a
 8014142:	d135      	bne.n	80141b0 <_svfiprintf_r+0x188>
 8014144:	9b03      	ldr	r3, [sp, #12]
 8014146:	3402      	adds	r4, #2
 8014148:	1d1a      	adds	r2, r3, #4
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	9203      	str	r2, [sp, #12]
 801414e:	2b00      	cmp	r3, #0
 8014150:	bfb8      	it	lt
 8014152:	f04f 33ff 	movlt.w	r3, #4294967295
 8014156:	9305      	str	r3, [sp, #20]
 8014158:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8014218 <_svfiprintf_r+0x1f0>
 801415c:	2203      	movs	r2, #3
 801415e:	4650      	mov	r0, sl
 8014160:	7821      	ldrb	r1, [r4, #0]
 8014162:	f000 f9f7 	bl	8014554 <memchr>
 8014166:	b140      	cbz	r0, 801417a <_svfiprintf_r+0x152>
 8014168:	2340      	movs	r3, #64	; 0x40
 801416a:	eba0 000a 	sub.w	r0, r0, sl
 801416e:	fa03 f000 	lsl.w	r0, r3, r0
 8014172:	9b04      	ldr	r3, [sp, #16]
 8014174:	3401      	adds	r4, #1
 8014176:	4303      	orrs	r3, r0
 8014178:	9304      	str	r3, [sp, #16]
 801417a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801417e:	2206      	movs	r2, #6
 8014180:	4826      	ldr	r0, [pc, #152]	; (801421c <_svfiprintf_r+0x1f4>)
 8014182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014186:	f000 f9e5 	bl	8014554 <memchr>
 801418a:	2800      	cmp	r0, #0
 801418c:	d038      	beq.n	8014200 <_svfiprintf_r+0x1d8>
 801418e:	4b24      	ldr	r3, [pc, #144]	; (8014220 <_svfiprintf_r+0x1f8>)
 8014190:	bb1b      	cbnz	r3, 80141da <_svfiprintf_r+0x1b2>
 8014192:	9b03      	ldr	r3, [sp, #12]
 8014194:	3307      	adds	r3, #7
 8014196:	f023 0307 	bic.w	r3, r3, #7
 801419a:	3308      	adds	r3, #8
 801419c:	9303      	str	r3, [sp, #12]
 801419e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141a0:	4433      	add	r3, r6
 80141a2:	9309      	str	r3, [sp, #36]	; 0x24
 80141a4:	e767      	b.n	8014076 <_svfiprintf_r+0x4e>
 80141a6:	460c      	mov	r4, r1
 80141a8:	2001      	movs	r0, #1
 80141aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80141ae:	e7a5      	b.n	80140fc <_svfiprintf_r+0xd4>
 80141b0:	2300      	movs	r3, #0
 80141b2:	f04f 0c0a 	mov.w	ip, #10
 80141b6:	4619      	mov	r1, r3
 80141b8:	3401      	adds	r4, #1
 80141ba:	9305      	str	r3, [sp, #20]
 80141bc:	4620      	mov	r0, r4
 80141be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80141c2:	3a30      	subs	r2, #48	; 0x30
 80141c4:	2a09      	cmp	r2, #9
 80141c6:	d903      	bls.n	80141d0 <_svfiprintf_r+0x1a8>
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d0c5      	beq.n	8014158 <_svfiprintf_r+0x130>
 80141cc:	9105      	str	r1, [sp, #20]
 80141ce:	e7c3      	b.n	8014158 <_svfiprintf_r+0x130>
 80141d0:	4604      	mov	r4, r0
 80141d2:	2301      	movs	r3, #1
 80141d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80141d8:	e7f0      	b.n	80141bc <_svfiprintf_r+0x194>
 80141da:	ab03      	add	r3, sp, #12
 80141dc:	9300      	str	r3, [sp, #0]
 80141de:	462a      	mov	r2, r5
 80141e0:	4638      	mov	r0, r7
 80141e2:	4b10      	ldr	r3, [pc, #64]	; (8014224 <_svfiprintf_r+0x1fc>)
 80141e4:	a904      	add	r1, sp, #16
 80141e6:	f3af 8000 	nop.w
 80141ea:	1c42      	adds	r2, r0, #1
 80141ec:	4606      	mov	r6, r0
 80141ee:	d1d6      	bne.n	801419e <_svfiprintf_r+0x176>
 80141f0:	89ab      	ldrh	r3, [r5, #12]
 80141f2:	065b      	lsls	r3, r3, #25
 80141f4:	f53f af2c 	bmi.w	8014050 <_svfiprintf_r+0x28>
 80141f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141fa:	b01d      	add	sp, #116	; 0x74
 80141fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014200:	ab03      	add	r3, sp, #12
 8014202:	9300      	str	r3, [sp, #0]
 8014204:	462a      	mov	r2, r5
 8014206:	4638      	mov	r0, r7
 8014208:	4b06      	ldr	r3, [pc, #24]	; (8014224 <_svfiprintf_r+0x1fc>)
 801420a:	a904      	add	r1, sp, #16
 801420c:	f000 f87c 	bl	8014308 <_printf_i>
 8014210:	e7eb      	b.n	80141ea <_svfiprintf_r+0x1c2>
 8014212:	bf00      	nop
 8014214:	08014a3d 	.word	0x08014a3d
 8014218:	08014a43 	.word	0x08014a43
 801421c:	08014a47 	.word	0x08014a47
 8014220:	00000000 	.word	0x00000000
 8014224:	08013f71 	.word	0x08013f71

08014228 <_printf_common>:
 8014228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801422c:	4616      	mov	r6, r2
 801422e:	4699      	mov	r9, r3
 8014230:	688a      	ldr	r2, [r1, #8]
 8014232:	690b      	ldr	r3, [r1, #16]
 8014234:	4607      	mov	r7, r0
 8014236:	4293      	cmp	r3, r2
 8014238:	bfb8      	it	lt
 801423a:	4613      	movlt	r3, r2
 801423c:	6033      	str	r3, [r6, #0]
 801423e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014242:	460c      	mov	r4, r1
 8014244:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014248:	b10a      	cbz	r2, 801424e <_printf_common+0x26>
 801424a:	3301      	adds	r3, #1
 801424c:	6033      	str	r3, [r6, #0]
 801424e:	6823      	ldr	r3, [r4, #0]
 8014250:	0699      	lsls	r1, r3, #26
 8014252:	bf42      	ittt	mi
 8014254:	6833      	ldrmi	r3, [r6, #0]
 8014256:	3302      	addmi	r3, #2
 8014258:	6033      	strmi	r3, [r6, #0]
 801425a:	6825      	ldr	r5, [r4, #0]
 801425c:	f015 0506 	ands.w	r5, r5, #6
 8014260:	d106      	bne.n	8014270 <_printf_common+0x48>
 8014262:	f104 0a19 	add.w	sl, r4, #25
 8014266:	68e3      	ldr	r3, [r4, #12]
 8014268:	6832      	ldr	r2, [r6, #0]
 801426a:	1a9b      	subs	r3, r3, r2
 801426c:	42ab      	cmp	r3, r5
 801426e:	dc28      	bgt.n	80142c2 <_printf_common+0x9a>
 8014270:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014274:	1e13      	subs	r3, r2, #0
 8014276:	6822      	ldr	r2, [r4, #0]
 8014278:	bf18      	it	ne
 801427a:	2301      	movne	r3, #1
 801427c:	0692      	lsls	r2, r2, #26
 801427e:	d42d      	bmi.n	80142dc <_printf_common+0xb4>
 8014280:	4649      	mov	r1, r9
 8014282:	4638      	mov	r0, r7
 8014284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014288:	47c0      	blx	r8
 801428a:	3001      	adds	r0, #1
 801428c:	d020      	beq.n	80142d0 <_printf_common+0xa8>
 801428e:	6823      	ldr	r3, [r4, #0]
 8014290:	68e5      	ldr	r5, [r4, #12]
 8014292:	f003 0306 	and.w	r3, r3, #6
 8014296:	2b04      	cmp	r3, #4
 8014298:	bf18      	it	ne
 801429a:	2500      	movne	r5, #0
 801429c:	6832      	ldr	r2, [r6, #0]
 801429e:	f04f 0600 	mov.w	r6, #0
 80142a2:	68a3      	ldr	r3, [r4, #8]
 80142a4:	bf08      	it	eq
 80142a6:	1aad      	subeq	r5, r5, r2
 80142a8:	6922      	ldr	r2, [r4, #16]
 80142aa:	bf08      	it	eq
 80142ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80142b0:	4293      	cmp	r3, r2
 80142b2:	bfc4      	itt	gt
 80142b4:	1a9b      	subgt	r3, r3, r2
 80142b6:	18ed      	addgt	r5, r5, r3
 80142b8:	341a      	adds	r4, #26
 80142ba:	42b5      	cmp	r5, r6
 80142bc:	d11a      	bne.n	80142f4 <_printf_common+0xcc>
 80142be:	2000      	movs	r0, #0
 80142c0:	e008      	b.n	80142d4 <_printf_common+0xac>
 80142c2:	2301      	movs	r3, #1
 80142c4:	4652      	mov	r2, sl
 80142c6:	4649      	mov	r1, r9
 80142c8:	4638      	mov	r0, r7
 80142ca:	47c0      	blx	r8
 80142cc:	3001      	adds	r0, #1
 80142ce:	d103      	bne.n	80142d8 <_printf_common+0xb0>
 80142d0:	f04f 30ff 	mov.w	r0, #4294967295
 80142d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80142d8:	3501      	adds	r5, #1
 80142da:	e7c4      	b.n	8014266 <_printf_common+0x3e>
 80142dc:	2030      	movs	r0, #48	; 0x30
 80142de:	18e1      	adds	r1, r4, r3
 80142e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80142e4:	1c5a      	adds	r2, r3, #1
 80142e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80142ea:	4422      	add	r2, r4
 80142ec:	3302      	adds	r3, #2
 80142ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80142f2:	e7c5      	b.n	8014280 <_printf_common+0x58>
 80142f4:	2301      	movs	r3, #1
 80142f6:	4622      	mov	r2, r4
 80142f8:	4649      	mov	r1, r9
 80142fa:	4638      	mov	r0, r7
 80142fc:	47c0      	blx	r8
 80142fe:	3001      	adds	r0, #1
 8014300:	d0e6      	beq.n	80142d0 <_printf_common+0xa8>
 8014302:	3601      	adds	r6, #1
 8014304:	e7d9      	b.n	80142ba <_printf_common+0x92>
	...

08014308 <_printf_i>:
 8014308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801430c:	7e0f      	ldrb	r7, [r1, #24]
 801430e:	4691      	mov	r9, r2
 8014310:	2f78      	cmp	r7, #120	; 0x78
 8014312:	4680      	mov	r8, r0
 8014314:	460c      	mov	r4, r1
 8014316:	469a      	mov	sl, r3
 8014318:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801431a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801431e:	d807      	bhi.n	8014330 <_printf_i+0x28>
 8014320:	2f62      	cmp	r7, #98	; 0x62
 8014322:	d80a      	bhi.n	801433a <_printf_i+0x32>
 8014324:	2f00      	cmp	r7, #0
 8014326:	f000 80d9 	beq.w	80144dc <_printf_i+0x1d4>
 801432a:	2f58      	cmp	r7, #88	; 0x58
 801432c:	f000 80a4 	beq.w	8014478 <_printf_i+0x170>
 8014330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014338:	e03a      	b.n	80143b0 <_printf_i+0xa8>
 801433a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801433e:	2b15      	cmp	r3, #21
 8014340:	d8f6      	bhi.n	8014330 <_printf_i+0x28>
 8014342:	a101      	add	r1, pc, #4	; (adr r1, 8014348 <_printf_i+0x40>)
 8014344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014348:	080143a1 	.word	0x080143a1
 801434c:	080143b5 	.word	0x080143b5
 8014350:	08014331 	.word	0x08014331
 8014354:	08014331 	.word	0x08014331
 8014358:	08014331 	.word	0x08014331
 801435c:	08014331 	.word	0x08014331
 8014360:	080143b5 	.word	0x080143b5
 8014364:	08014331 	.word	0x08014331
 8014368:	08014331 	.word	0x08014331
 801436c:	08014331 	.word	0x08014331
 8014370:	08014331 	.word	0x08014331
 8014374:	080144c3 	.word	0x080144c3
 8014378:	080143e5 	.word	0x080143e5
 801437c:	080144a5 	.word	0x080144a5
 8014380:	08014331 	.word	0x08014331
 8014384:	08014331 	.word	0x08014331
 8014388:	080144e5 	.word	0x080144e5
 801438c:	08014331 	.word	0x08014331
 8014390:	080143e5 	.word	0x080143e5
 8014394:	08014331 	.word	0x08014331
 8014398:	08014331 	.word	0x08014331
 801439c:	080144ad 	.word	0x080144ad
 80143a0:	682b      	ldr	r3, [r5, #0]
 80143a2:	1d1a      	adds	r2, r3, #4
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	602a      	str	r2, [r5, #0]
 80143a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80143ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80143b0:	2301      	movs	r3, #1
 80143b2:	e0a4      	b.n	80144fe <_printf_i+0x1f6>
 80143b4:	6820      	ldr	r0, [r4, #0]
 80143b6:	6829      	ldr	r1, [r5, #0]
 80143b8:	0606      	lsls	r6, r0, #24
 80143ba:	f101 0304 	add.w	r3, r1, #4
 80143be:	d50a      	bpl.n	80143d6 <_printf_i+0xce>
 80143c0:	680e      	ldr	r6, [r1, #0]
 80143c2:	602b      	str	r3, [r5, #0]
 80143c4:	2e00      	cmp	r6, #0
 80143c6:	da03      	bge.n	80143d0 <_printf_i+0xc8>
 80143c8:	232d      	movs	r3, #45	; 0x2d
 80143ca:	4276      	negs	r6, r6
 80143cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80143d0:	230a      	movs	r3, #10
 80143d2:	485e      	ldr	r0, [pc, #376]	; (801454c <_printf_i+0x244>)
 80143d4:	e019      	b.n	801440a <_printf_i+0x102>
 80143d6:	680e      	ldr	r6, [r1, #0]
 80143d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80143dc:	602b      	str	r3, [r5, #0]
 80143de:	bf18      	it	ne
 80143e0:	b236      	sxthne	r6, r6
 80143e2:	e7ef      	b.n	80143c4 <_printf_i+0xbc>
 80143e4:	682b      	ldr	r3, [r5, #0]
 80143e6:	6820      	ldr	r0, [r4, #0]
 80143e8:	1d19      	adds	r1, r3, #4
 80143ea:	6029      	str	r1, [r5, #0]
 80143ec:	0601      	lsls	r1, r0, #24
 80143ee:	d501      	bpl.n	80143f4 <_printf_i+0xec>
 80143f0:	681e      	ldr	r6, [r3, #0]
 80143f2:	e002      	b.n	80143fa <_printf_i+0xf2>
 80143f4:	0646      	lsls	r6, r0, #25
 80143f6:	d5fb      	bpl.n	80143f0 <_printf_i+0xe8>
 80143f8:	881e      	ldrh	r6, [r3, #0]
 80143fa:	2f6f      	cmp	r7, #111	; 0x6f
 80143fc:	bf0c      	ite	eq
 80143fe:	2308      	moveq	r3, #8
 8014400:	230a      	movne	r3, #10
 8014402:	4852      	ldr	r0, [pc, #328]	; (801454c <_printf_i+0x244>)
 8014404:	2100      	movs	r1, #0
 8014406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801440a:	6865      	ldr	r5, [r4, #4]
 801440c:	2d00      	cmp	r5, #0
 801440e:	bfa8      	it	ge
 8014410:	6821      	ldrge	r1, [r4, #0]
 8014412:	60a5      	str	r5, [r4, #8]
 8014414:	bfa4      	itt	ge
 8014416:	f021 0104 	bicge.w	r1, r1, #4
 801441a:	6021      	strge	r1, [r4, #0]
 801441c:	b90e      	cbnz	r6, 8014422 <_printf_i+0x11a>
 801441e:	2d00      	cmp	r5, #0
 8014420:	d04d      	beq.n	80144be <_printf_i+0x1b6>
 8014422:	4615      	mov	r5, r2
 8014424:	fbb6 f1f3 	udiv	r1, r6, r3
 8014428:	fb03 6711 	mls	r7, r3, r1, r6
 801442c:	5dc7      	ldrb	r7, [r0, r7]
 801442e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014432:	4637      	mov	r7, r6
 8014434:	42bb      	cmp	r3, r7
 8014436:	460e      	mov	r6, r1
 8014438:	d9f4      	bls.n	8014424 <_printf_i+0x11c>
 801443a:	2b08      	cmp	r3, #8
 801443c:	d10b      	bne.n	8014456 <_printf_i+0x14e>
 801443e:	6823      	ldr	r3, [r4, #0]
 8014440:	07de      	lsls	r6, r3, #31
 8014442:	d508      	bpl.n	8014456 <_printf_i+0x14e>
 8014444:	6923      	ldr	r3, [r4, #16]
 8014446:	6861      	ldr	r1, [r4, #4]
 8014448:	4299      	cmp	r1, r3
 801444a:	bfde      	ittt	le
 801444c:	2330      	movle	r3, #48	; 0x30
 801444e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014452:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014456:	1b52      	subs	r2, r2, r5
 8014458:	6122      	str	r2, [r4, #16]
 801445a:	464b      	mov	r3, r9
 801445c:	4621      	mov	r1, r4
 801445e:	4640      	mov	r0, r8
 8014460:	f8cd a000 	str.w	sl, [sp]
 8014464:	aa03      	add	r2, sp, #12
 8014466:	f7ff fedf 	bl	8014228 <_printf_common>
 801446a:	3001      	adds	r0, #1
 801446c:	d14c      	bne.n	8014508 <_printf_i+0x200>
 801446e:	f04f 30ff 	mov.w	r0, #4294967295
 8014472:	b004      	add	sp, #16
 8014474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014478:	4834      	ldr	r0, [pc, #208]	; (801454c <_printf_i+0x244>)
 801447a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801447e:	6829      	ldr	r1, [r5, #0]
 8014480:	6823      	ldr	r3, [r4, #0]
 8014482:	f851 6b04 	ldr.w	r6, [r1], #4
 8014486:	6029      	str	r1, [r5, #0]
 8014488:	061d      	lsls	r5, r3, #24
 801448a:	d514      	bpl.n	80144b6 <_printf_i+0x1ae>
 801448c:	07df      	lsls	r7, r3, #31
 801448e:	bf44      	itt	mi
 8014490:	f043 0320 	orrmi.w	r3, r3, #32
 8014494:	6023      	strmi	r3, [r4, #0]
 8014496:	b91e      	cbnz	r6, 80144a0 <_printf_i+0x198>
 8014498:	6823      	ldr	r3, [r4, #0]
 801449a:	f023 0320 	bic.w	r3, r3, #32
 801449e:	6023      	str	r3, [r4, #0]
 80144a0:	2310      	movs	r3, #16
 80144a2:	e7af      	b.n	8014404 <_printf_i+0xfc>
 80144a4:	6823      	ldr	r3, [r4, #0]
 80144a6:	f043 0320 	orr.w	r3, r3, #32
 80144aa:	6023      	str	r3, [r4, #0]
 80144ac:	2378      	movs	r3, #120	; 0x78
 80144ae:	4828      	ldr	r0, [pc, #160]	; (8014550 <_printf_i+0x248>)
 80144b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80144b4:	e7e3      	b.n	801447e <_printf_i+0x176>
 80144b6:	0659      	lsls	r1, r3, #25
 80144b8:	bf48      	it	mi
 80144ba:	b2b6      	uxthmi	r6, r6
 80144bc:	e7e6      	b.n	801448c <_printf_i+0x184>
 80144be:	4615      	mov	r5, r2
 80144c0:	e7bb      	b.n	801443a <_printf_i+0x132>
 80144c2:	682b      	ldr	r3, [r5, #0]
 80144c4:	6826      	ldr	r6, [r4, #0]
 80144c6:	1d18      	adds	r0, r3, #4
 80144c8:	6961      	ldr	r1, [r4, #20]
 80144ca:	6028      	str	r0, [r5, #0]
 80144cc:	0635      	lsls	r5, r6, #24
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	d501      	bpl.n	80144d6 <_printf_i+0x1ce>
 80144d2:	6019      	str	r1, [r3, #0]
 80144d4:	e002      	b.n	80144dc <_printf_i+0x1d4>
 80144d6:	0670      	lsls	r0, r6, #25
 80144d8:	d5fb      	bpl.n	80144d2 <_printf_i+0x1ca>
 80144da:	8019      	strh	r1, [r3, #0]
 80144dc:	2300      	movs	r3, #0
 80144de:	4615      	mov	r5, r2
 80144e0:	6123      	str	r3, [r4, #16]
 80144e2:	e7ba      	b.n	801445a <_printf_i+0x152>
 80144e4:	682b      	ldr	r3, [r5, #0]
 80144e6:	2100      	movs	r1, #0
 80144e8:	1d1a      	adds	r2, r3, #4
 80144ea:	602a      	str	r2, [r5, #0]
 80144ec:	681d      	ldr	r5, [r3, #0]
 80144ee:	6862      	ldr	r2, [r4, #4]
 80144f0:	4628      	mov	r0, r5
 80144f2:	f000 f82f 	bl	8014554 <memchr>
 80144f6:	b108      	cbz	r0, 80144fc <_printf_i+0x1f4>
 80144f8:	1b40      	subs	r0, r0, r5
 80144fa:	6060      	str	r0, [r4, #4]
 80144fc:	6863      	ldr	r3, [r4, #4]
 80144fe:	6123      	str	r3, [r4, #16]
 8014500:	2300      	movs	r3, #0
 8014502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014506:	e7a8      	b.n	801445a <_printf_i+0x152>
 8014508:	462a      	mov	r2, r5
 801450a:	4649      	mov	r1, r9
 801450c:	4640      	mov	r0, r8
 801450e:	6923      	ldr	r3, [r4, #16]
 8014510:	47d0      	blx	sl
 8014512:	3001      	adds	r0, #1
 8014514:	d0ab      	beq.n	801446e <_printf_i+0x166>
 8014516:	6823      	ldr	r3, [r4, #0]
 8014518:	079b      	lsls	r3, r3, #30
 801451a:	d413      	bmi.n	8014544 <_printf_i+0x23c>
 801451c:	68e0      	ldr	r0, [r4, #12]
 801451e:	9b03      	ldr	r3, [sp, #12]
 8014520:	4298      	cmp	r0, r3
 8014522:	bfb8      	it	lt
 8014524:	4618      	movlt	r0, r3
 8014526:	e7a4      	b.n	8014472 <_printf_i+0x16a>
 8014528:	2301      	movs	r3, #1
 801452a:	4632      	mov	r2, r6
 801452c:	4649      	mov	r1, r9
 801452e:	4640      	mov	r0, r8
 8014530:	47d0      	blx	sl
 8014532:	3001      	adds	r0, #1
 8014534:	d09b      	beq.n	801446e <_printf_i+0x166>
 8014536:	3501      	adds	r5, #1
 8014538:	68e3      	ldr	r3, [r4, #12]
 801453a:	9903      	ldr	r1, [sp, #12]
 801453c:	1a5b      	subs	r3, r3, r1
 801453e:	42ab      	cmp	r3, r5
 8014540:	dcf2      	bgt.n	8014528 <_printf_i+0x220>
 8014542:	e7eb      	b.n	801451c <_printf_i+0x214>
 8014544:	2500      	movs	r5, #0
 8014546:	f104 0619 	add.w	r6, r4, #25
 801454a:	e7f5      	b.n	8014538 <_printf_i+0x230>
 801454c:	08014a4e 	.word	0x08014a4e
 8014550:	08014a5f 	.word	0x08014a5f

08014554 <memchr>:
 8014554:	4603      	mov	r3, r0
 8014556:	b510      	push	{r4, lr}
 8014558:	b2c9      	uxtb	r1, r1
 801455a:	4402      	add	r2, r0
 801455c:	4293      	cmp	r3, r2
 801455e:	4618      	mov	r0, r3
 8014560:	d101      	bne.n	8014566 <memchr+0x12>
 8014562:	2000      	movs	r0, #0
 8014564:	e003      	b.n	801456e <memchr+0x1a>
 8014566:	7804      	ldrb	r4, [r0, #0]
 8014568:	3301      	adds	r3, #1
 801456a:	428c      	cmp	r4, r1
 801456c:	d1f6      	bne.n	801455c <memchr+0x8>
 801456e:	bd10      	pop	{r4, pc}

08014570 <memmove>:
 8014570:	4288      	cmp	r0, r1
 8014572:	b510      	push	{r4, lr}
 8014574:	eb01 0402 	add.w	r4, r1, r2
 8014578:	d902      	bls.n	8014580 <memmove+0x10>
 801457a:	4284      	cmp	r4, r0
 801457c:	4623      	mov	r3, r4
 801457e:	d807      	bhi.n	8014590 <memmove+0x20>
 8014580:	1e43      	subs	r3, r0, #1
 8014582:	42a1      	cmp	r1, r4
 8014584:	d008      	beq.n	8014598 <memmove+0x28>
 8014586:	f811 2b01 	ldrb.w	r2, [r1], #1
 801458a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801458e:	e7f8      	b.n	8014582 <memmove+0x12>
 8014590:	4601      	mov	r1, r0
 8014592:	4402      	add	r2, r0
 8014594:	428a      	cmp	r2, r1
 8014596:	d100      	bne.n	801459a <memmove+0x2a>
 8014598:	bd10      	pop	{r4, pc}
 801459a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801459e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80145a2:	e7f7      	b.n	8014594 <memmove+0x24>

080145a4 <_realloc_r>:
 80145a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80145a8:	4680      	mov	r8, r0
 80145aa:	4614      	mov	r4, r2
 80145ac:	460e      	mov	r6, r1
 80145ae:	b921      	cbnz	r1, 80145ba <_realloc_r+0x16>
 80145b0:	4611      	mov	r1, r2
 80145b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80145b6:	f7ff bb17 	b.w	8013be8 <_malloc_r>
 80145ba:	b92a      	cbnz	r2, 80145c8 <_realloc_r+0x24>
 80145bc:	f7ff faac 	bl	8013b18 <_free_r>
 80145c0:	4625      	mov	r5, r4
 80145c2:	4628      	mov	r0, r5
 80145c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145c8:	f000 f81b 	bl	8014602 <_malloc_usable_size_r>
 80145cc:	4284      	cmp	r4, r0
 80145ce:	4607      	mov	r7, r0
 80145d0:	d802      	bhi.n	80145d8 <_realloc_r+0x34>
 80145d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80145d6:	d812      	bhi.n	80145fe <_realloc_r+0x5a>
 80145d8:	4621      	mov	r1, r4
 80145da:	4640      	mov	r0, r8
 80145dc:	f7ff fb04 	bl	8013be8 <_malloc_r>
 80145e0:	4605      	mov	r5, r0
 80145e2:	2800      	cmp	r0, #0
 80145e4:	d0ed      	beq.n	80145c2 <_realloc_r+0x1e>
 80145e6:	42bc      	cmp	r4, r7
 80145e8:	4622      	mov	r2, r4
 80145ea:	4631      	mov	r1, r6
 80145ec:	bf28      	it	cs
 80145ee:	463a      	movcs	r2, r7
 80145f0:	f7ff fa7c 	bl	8013aec <memcpy>
 80145f4:	4631      	mov	r1, r6
 80145f6:	4640      	mov	r0, r8
 80145f8:	f7ff fa8e 	bl	8013b18 <_free_r>
 80145fc:	e7e1      	b.n	80145c2 <_realloc_r+0x1e>
 80145fe:	4635      	mov	r5, r6
 8014600:	e7df      	b.n	80145c2 <_realloc_r+0x1e>

08014602 <_malloc_usable_size_r>:
 8014602:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014606:	1f18      	subs	r0, r3, #4
 8014608:	2b00      	cmp	r3, #0
 801460a:	bfbc      	itt	lt
 801460c:	580b      	ldrlt	r3, [r1, r0]
 801460e:	18c0      	addlt	r0, r0, r3
 8014610:	4770      	bx	lr
	...

08014614 <_init>:
 8014614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014616:	bf00      	nop
 8014618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801461a:	bc08      	pop	{r3}
 801461c:	469e      	mov	lr, r3
 801461e:	4770      	bx	lr

08014620 <_fini>:
 8014620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014622:	bf00      	nop
 8014624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014626:	bc08      	pop	{r3}
 8014628:	469e      	mov	lr, r3
 801462a:	4770      	bx	lr
